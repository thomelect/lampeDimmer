
lampeDimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000d7e  00000e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00800106  00800106  00000e18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010da  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cce  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005de  00000000  00000000  00002d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00003314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051a  00000000  00000000  00003b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000040b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_25>
  68:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_26>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e7       	ldi	r30, 0x7E	; 126
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ab 39       	cpi	r26, 0x9B	; 155
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 12 01 	call	0x224	; 0x224 <main>
  e2:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
	//ADCSRA = ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	//ADCSRB = ADHSM ACME MUX5 – ADTS3 ADTS2 ADTS1 ADTS0
	//DIDR0 = ADC7D ADC6D ADC5D ADC4D - - ADC1D ADC0D
	//DIDR2 = - - ADC13D ADC12D ADC11D ADC10D ADC9D ADC8D
	
	ADMUX = (1<<REFS0); //Référence sur AVcc avec un condensateur sur la broche AREF.
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enable / ADC diviseur = 128 (le plus lent possible).
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = (1<<ADHSM);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = (1<<ADC0D); //entrée numérique désactivée pour le ADC0.
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 102:	08 95       	ret

00000104 <adcRead>:
}

uint16_t adcRead(void)
{
	ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //On attend que la lecture du ADC soir terminée.
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <adcRead+0xa>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 11c:	08 95       	ret

0000011e <adcRead8>:

uint8_t adcRead8(void)
{
	return (adcRead() >> 2);
 11e:	0e 94 82 00 	call	0x104	; 0x104 <adcRead>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	08 95       	ret

0000012c <__vector_21>:

/**
*@brief Interruption de la comparaison sur OCR0A (timer0) qui met msFlag à 1 lorsque msCnt atteint TIMER_CNT_CYCLE qui est définie dans le define. msCnt est incrémenté à chaques 1ms.
*/
ISR(TIMER0_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	msCnt++;
 13a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <msCnt>
 13e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <msCnt+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <msCnt+0x1>
 148:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <msCnt>
	if (msCnt >= TIMER_CNT_CYCLE)
 14c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <msCnt>
 150:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <msCnt+0x1>
 154:	49 97       	sbiw	r24, 0x19	; 25
 156:	60 f0       	brcs	.+24     	; 0x170 <__vector_21+0x44>
	{
		msCnt -= TIMER_CNT_CYCLE;
 158:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <msCnt>
 15c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <msCnt+0x1>
 160:	49 97       	sbiw	r24, 0x19	; 25
 162:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <msCnt+0x1>
 166:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <msCnt>
		msFlag = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <msFlag>
	}
}
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <execRxCommand>:

void execRxCommand()
{
	valueOut = rxData;
 17e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxData>
 182:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 186:	08 95       	ret

00000188 <parseRxData>:
}

uint8_t parseRxData(uint8_t data)
{
	// Switch case des différents paramètres de la trame de réception
	switch(commState)
 188:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <commState>
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	59 f0       	breq	.+22     	; 0x1a6 <parseRxData+0x1e>
 190:	92 30       	cpi	r25, 0x02	; 2
 192:	b9 f0       	breq	.+46     	; 0x1c2 <parseRxData+0x3a>
	{
		default :
			if(data == '<') //Confirmation que la trame débute par '<'
 194:	8c 33       	cpi	r24, 0x3C	; 60
 196:	19 f4       	brne	.+6      	; 0x19e <parseRxData+0x16>
				commState = RXDATA; //Saut vers RXDATA.
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <commState>
			rxDataCnt = 0; //Remet rxDataSizeCnt à 0 pour être prêt à recevoir la donnée 0.
 19e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rxDataCnt>
				execRxCommand(); //Appel de execRxCommand() pour executer divers oppération sur les données reçues.
			commState = WAIT;
			return 1; //Retourne 1 si il y a eu validation.
			break;
	}
	return 0;// Retourne si l'a validation n'a pas été faite.
 1a2:	80 e0       	ldi	r24, 0x00	; 0
	{
		default :
			if(data == '<') //Confirmation que la trame débute par '<'
				commState = RXDATA; //Saut vers RXDATA.
			rxDataCnt = 0; //Remet rxDataSizeCnt à 0 pour être prêt à recevoir la donnée 0.
			break;
 1a4:	08 95       	ret
		case RXDATA:
			rxData = data; //Place les données dans l'union de structure. Puisque les paramètres sont placés dans la même ordre dans la structure que dans celui qu'elle sont reçu, il est possible d'utiliser bytes[x] au lieu de devoir spécifier le nom complet. Ce qui permet aussi d'assembler les valeurs 16 bits qui avaient été séparés en 2 x 8bits.
 1a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxData>
			rxDataCnt++;
 1aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rxDataCnt>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rxDataCnt>
			if(rxDataCnt >= 1) //Le nombre de données attendu est de 6.
 1b4:	88 23       	and	r24, r24
 1b6:	61 f0       	breq	.+24     	; 0x1d0 <parseRxData+0x48>
				commState = VALIDATE; //Lorsque le nombre de données anticipés est reçu on sute à validate.
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <commState>
				execRxCommand(); //Appel de execRxCommand() pour executer divers oppération sur les données reçues.
			commState = WAIT;
			return 1; //Retourne 1 si il y a eu validation.
			break;
	}
	return 0;// Retourne si l'a validation n'a pas été faite.
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
			rxDataCnt++;
			if(rxDataCnt >= 1) //Le nombre de données attendu est de 6.
				commState = VALIDATE; //Lorsque le nombre de données anticipés est reçu on sute à validate.
			break;
		case VALIDATE :
			if(data == '>') //On vérifie que la trame se termine bien par un chevron de fermeture.
 1c2:	8e 33       	cpi	r24, 0x3E	; 62
 1c4:	11 f4       	brne	.+4      	; 0x1ca <parseRxData+0x42>
				execRxCommand(); //Appel de execRxCommand() pour executer divers oppération sur les données reçues.
 1c6:	0e 94 bf 00 	call	0x17e	; 0x17e <execRxCommand>
			commState = WAIT;
 1ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <commState>
			return 1; //Retourne 1 si il y a eu validation.
 1ce:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return 0;// Retourne si l'a validation n'a pas été faite.
}
 1d0:	08 95       	ret

000001d2 <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	uint8_t top = 250; //Valeur de OCR0A.
	TCCR0A = 0b00000010; //Mode CTC.
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Prescaler de 64.
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0b00000010; //Output compare match A interrupt enable.
 1da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = top-1; //62.5ns * 64 * 250 = 1ms.
 1de:	89 ef       	ldi	r24, 0xF9	; 249
 1e0:	87 bd       	out	0x27, r24	; 39
	sei();
 1e2:	78 94       	sei
 1e4:	08 95       	ret

000001e6 <timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4A = 0b10000010; //PWM output OC4A.
 1e6:	82 e8       	ldi	r24, 0x82	; 130
 1e8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	TCCR4B = 0b00000100; //Prescaler de 4.
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	OCR4C = 255-1; //62.5ns * 4 * 255 = 127.5us.
 1f2:	8e ef       	ldi	r24, 0xFE	; 254
 1f4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
	OUTPUT_VALUE(0); //Valeur de la sortie.
 1f8:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>
 1fc:	08 95       	ret

000001fe <miscInit>:
	valueOut = rxData;
}

void miscInit(void)
{
	adcInit(); //Appel de la fonction d'initialisation du ADC.
 1fe:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
	timer0Init(); //Initialisation de timer 0.
 202:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <timer0Init>
	timer4Init(); //Initialisation de timer 4.
 206:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <timer4Init>
	usartInit(1000000, F_CPU); //Initialisation du USART à 1Mbps.
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e2       	ldi	r19, 0x24	; 36
 20e:	44 ef       	ldi	r20, 0xF4	; 244
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	60 e4       	ldi	r22, 0x40	; 64
 214:	72 e4       	ldi	r23, 0x42	; 66
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 be 01 	call	0x37c	; 0x37c <usartInit>
	
	OUTPUT_INIT();
 21e:	3f 9a       	sbi	0x07, 7	; 7
	SWITCH_INIT();
 220:	2b 9a       	sbi	0x05, 3	; 5
 222:	08 95       	ret

00000224 <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 224:	0e 94 ff 00 	call	0x1fe	; 0x1fe <miscInit>
				if (valueAdc != adcRead8())
				{
					valueAdc = adcRead8();
					valueOut = adcRead8();
				}
				sprintf(msg, "%d\n\r", valueOut);
 228:	0f 2e       	mov	r0, r31
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ef 2e       	mov	r14, r31
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	ff 2e       	mov	r15, r31
 232:	f0 2d       	mov	r31, r0
 234:	06 e1       	ldi	r16, 0x16	; 22
 236:	11 e0       	ldi	r17, 0x01	; 1
				usartSendString(msg);
			}
		}
		else
			valueOut = 0;
		OUTPUT_VALUE(valueOut);
 238:	cf ec       	ldi	r28, 0xCF	; 207
 23a:	d0 e0       	ldi	r29, 0x00	; 0
{
	miscInit();
	
	while (1)
	{
		if (SWITCH())
 23c:	1b 99       	sbic	0x03, 3	; 3
 23e:	30 c0       	rjmp	.+96     	; 0x2a0 <main+0x7c>
		{
			//valueOut = 0;
			if (usartRxAvailable()) //Si un caractère est disponible:
 240:	0e 94 3f 02 	call	0x47e	; 0x47e <usartRxAvailable>
 244:	88 23       	and	r24, r24
 246:	21 f0       	breq	.+8      	; 0x250 <main+0x2c>
				parseRxData(usartRemRxData()); //appel de la fonction parseRxData() avec en paramètre la valeur retournée par usartRemRxData().
 248:	0e 94 23 02 	call	0x446	; 0x446 <usartRemRxData>
 24c:	0e 94 c4 00 	call	0x188	; 0x188 <parseRxData>
			if (msFlag)
 250:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <msFlag>
 254:	88 23       	and	r24, r24
 256:	31 f1       	breq	.+76     	; 0x2a4 <main+0x80>
			{
				msFlag = 0;
 258:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <msFlag>
				if (valueAdc != adcRead8())
 25c:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 260:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <valueAdc>
 264:	89 17       	cp	r24, r25
 266:	41 f0       	breq	.+16     	; 0x278 <main+0x54>
				{
					valueAdc = adcRead8();
 268:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 26c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <valueAdc>
					valueOut = adcRead8();
 270:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 274:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
				}
				sprintf(msg, "%d\n\r", valueOut);
 278:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 27c:	1f 92       	push	r1
 27e:	8f 93       	push	r24
 280:	ff 92       	push	r15
 282:	ef 92       	push	r14
 284:	1f 93       	push	r17
 286:	0f 93       	push	r16
 288:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sprintf>
				usartSendString(msg);
 28c:	c8 01       	movw	r24, r16
 28e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <usartSendString>
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <main+0x80>
			}
		}
		else
			valueOut = 0;
 2a0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		OUTPUT_VALUE(valueOut);
 2a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2a8:	88 83       	st	Y, r24
	}
 2aa:	c8 cf       	rjmp	.-112    	; 0x23c <main+0x18>

000002ac <__vector_25>:
	{
		if(usartSendByte(source[i]))
			return i;
	}
	return size;
}
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
 2c2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_rxCnt>
 2cc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_rxBufferIn>
 2d0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_rxBufferIn+0x1>
 2d4:	9c 01       	movw	r18, r24
 2d6:	2f 5f       	subi	r18, 0xFF	; 255
 2d8:	3f 4f       	sbci	r19, 0xFF	; 255
 2da:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <_rxBufferIn+0x1>
 2de:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <_rxBufferIn>
 2e2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 2e6:	fc 01       	movw	r30, r24
 2e8:	e5 5e       	subi	r30, 0xE5	; 229
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	20 83       	st	Z, r18
 2ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_rxBufferIn>
 2f2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_rxBufferIn+0x1>
 2f6:	80 34       	cpi	r24, 0x40	; 64
 2f8:	91 05       	cpc	r25, r1
 2fa:	20 f0       	brcs	.+8      	; 0x304 <__vector_25+0x58>
 2fc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_rxBufferIn+0x1>
 300:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_rxBufferIn>
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_26>:
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	8f 93       	push	r24
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
 32a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_txCnt>
 32e:	81 11       	cpse	r24, r1
 330:	06 c0       	rjmp	.+12     	; 0x33e <__vector_26+0x24>
 332:	e9 ec       	ldi	r30, 0xC9	; 201
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8f 7d       	andi	r24, 0xDF	; 223
 33a:	80 83       	st	Z, r24
 33c:	17 c0       	rjmp	.+46     	; 0x36c <__vector_26+0x52>
 33e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_txCnt>
 342:	81 50       	subi	r24, 0x01	; 1
 344:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_txCnt>
 348:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <_txBufferOut>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8e 0f       	add	r24, r30
 350:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_txBufferOut>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e5 5a       	subi	r30, 0xA5	; 165
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 81       	ld	r24, Z
 35c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 360:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_txBufferOut>
 364:	80 34       	cpi	r24, 0x40	; 64
 366:	10 f0       	brcs	.+4      	; 0x36c <__vector_26+0x52>
 368:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <_txBufferOut>
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	8f 91       	pop	r24
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <usartInit>:
 37c:	cf 92       	push	r12
 37e:	df 92       	push	r13
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	6b 01       	movw	r12, r22
 386:	7c 01       	movw	r14, r24
 388:	c1 14       	cp	r12, r1
 38a:	82 ec       	ldi	r24, 0xC2	; 194
 38c:	d8 06       	cpc	r13, r24
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	e8 06       	cpc	r14, r24
 392:	f1 04       	cpc	r15, r1
 394:	20 f1       	brcs	.+72     	; 0x3de <usartInit+0x62>
 396:	e8 ec       	ldi	r30, 0xC8	; 200
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	80 83       	st	Z, r24
 3a0:	ca 01       	movw	r24, r20
 3a2:	b9 01       	movw	r22, r18
 3a4:	68 94       	set
 3a6:	12 f8       	bld	r1, 2
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	77 95       	ror	r23
 3ae:	67 95       	ror	r22
 3b0:	16 94       	lsr	r1
 3b2:	d1 f7       	brne	.-12     	; 0x3a8 <usartInit+0x2c>
 3b4:	a7 01       	movw	r20, r14
 3b6:	96 01       	movw	r18, r12
 3b8:	0e 94 b1 03 	call	0x762	; 0x762 <__udivmodsi4>
 3bc:	ca 01       	movw	r24, r20
 3be:	b9 01       	movw	r22, r18
 3c0:	0e 94 23 03 	call	0x646	; 0x646 <__floatunsisf>
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	5f e3       	ldi	r21, 0x3F	; 63
 3cc:	0e 94 87 02 	call	0x50e	; 0x50e <__subsf3>
 3d0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fixunssfsi>
 3d4:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 3d8:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 3dc:	23 c0       	rjmp	.+70     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3de:	e8 ec       	ldi	r30, 0xC8	; 200
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	8d 7f       	andi	r24, 0xFD	; 253
 3e6:	80 83       	st	Z, r24
 3e8:	ca 01       	movw	r24, r20
 3ea:	b9 01       	movw	r22, r18
 3ec:	68 94       	set
 3ee:	13 f8       	bld	r1, 3
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	16 94       	lsr	r1
 3fa:	d1 f7       	brne	.-12     	; 0x3f0 <usartInit+0x74>
 3fc:	a7 01       	movw	r20, r14
 3fe:	96 01       	movw	r18, r12
 400:	0e 94 b1 03 	call	0x762	; 0x762 <__udivmodsi4>
 404:	ca 01       	movw	r24, r20
 406:	b9 01       	movw	r22, r18
 408:	0e 94 23 03 	call	0x646	; 0x646 <__floatunsisf>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	5f e3       	ldi	r21, 0x3F	; 63
 414:	0e 94 87 02 	call	0x50e	; 0x50e <__subsf3>
 418:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fixunssfsi>
 41c:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 420:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 424:	e9 ec       	ldi	r30, 0xC9	; 201
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	88 61       	ori	r24, 0x18	; 24
 42c:	80 83       	st	Z, r24
 42e:	78 94       	sei
 430:	80 81       	ld	r24, Z
 432:	80 68       	ori	r24, 0x80	; 128
 434:	80 83       	st	Z, r24
 436:	80 81       	ld	r24, Z
 438:	80 62       	ori	r24, 0x20	; 32
 43a:	80 83       	st	Z, r24
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	df 90       	pop	r13
 442:	cf 90       	pop	r12
 444:	08 95       	ret

00000446 <usartRemRxData>:
 446:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 44a:	88 23       	and	r24, r24
 44c:	b1 f0       	breq	.+44     	; 0x47a <usartRemRxData+0x34>
 44e:	f8 94       	cli
 450:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 454:	81 50       	subi	r24, 0x01	; 1
 456:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_rxCnt>
 45a:	78 94       	sei
 45c:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <_rxBufferOut>
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	9e 0f       	add	r25, r30
 464:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_rxBufferOut>
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	e5 5e       	subi	r30, 0xE5	; 229
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	80 81       	ld	r24, Z
 470:	90 34       	cpi	r25, 0x40	; 64
 472:	20 f0       	brcs	.+8      	; 0x47c <usartRemRxData+0x36>
 474:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_rxBufferOut>
 478:	08 95       	ret
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret

0000047e <usartRxAvailable>:
 47e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 482:	08 95       	ret

00000484 <usartSendByte>:
 484:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_txCnt>
 488:	90 34       	cpi	r25, 0x40	; 64
 48a:	10 f5       	brcc	.+68     	; 0x4d0 <usartSendByte+0x4c>
 48c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_txCnt>
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_txCnt>
 496:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <_txBufferIn>
 49a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <_txBufferIn+0x1>
 49e:	a9 01       	movw	r20, r18
 4a0:	4f 5f       	subi	r20, 0xFF	; 255
 4a2:	5f 4f       	sbci	r21, 0xFF	; 255
 4a4:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <_txBufferIn+0x1>
 4a8:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <_txBufferIn>
 4ac:	f9 01       	movw	r30, r18
 4ae:	e5 5a       	subi	r30, 0xA5	; 165
 4b0:	fe 4f       	sbci	r31, 0xFE	; 254
 4b2:	80 83       	st	Z, r24
 4b4:	40 34       	cpi	r20, 0x40	; 64
 4b6:	51 05       	cpc	r21, r1
 4b8:	20 f0       	brcs	.+8      	; 0x4c2 <usartSendByte+0x3e>
 4ba:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <_txBufferIn+0x1>
 4be:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_txBufferIn>
 4c2:	e9 ec       	ldi	r30, 0xC9	; 201
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	80 62       	ori	r24, 0x20	; 32
 4ca:	80 83       	st	Z, r24
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret

000004d4 <usartSendString>:

uint8_t usartSendString(const char * str)
{
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	fc 01       	movw	r30, r24
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 4dc:	80 81       	ld	r24, Z
 4de:	88 23       	and	r24, r24
 4e0:	79 f0       	breq	.+30     	; 0x500 <usartSendString+0x2c>
 4e2:	8f 01       	movw	r16, r30
 4e4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
 4e6:	0e 94 42 02 	call	0x484	; 0x484 <usartSendByte>
 4ea:	81 11       	cpse	r24, r1
 4ec:	0b c0       	rjmp	.+22     	; 0x504 <usartSendString+0x30>
			return i;
		nbChar ++;
 4ee:	cf 5f       	subi	r28, 0xFF	; 255
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 4f0:	f8 01       	movw	r30, r16
 4f2:	ec 0f       	add	r30, r28
 4f4:	f1 1d       	adc	r31, r1
 4f6:	80 81       	ld	r24, Z
 4f8:	81 11       	cpse	r24, r1
 4fa:	f5 cf       	rjmp	.-22     	; 0x4e6 <usartSendString+0x12>
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
			return i;
		nbChar ++;
 4fc:	8c 2f       	mov	r24, r28
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <usartSendString+0x32>
	return size;
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	01 c0       	rjmp	.+2      	; 0x506 <usartSendString+0x32>
 504:	8c 2f       	mov	r24, r28
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
			return i;
		nbChar ++;
	}
	return nbChar;
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	08 95       	ret

0000050e <__subsf3>:
 50e:	50 58       	subi	r21, 0x80	; 128

00000510 <__addsf3>:
 510:	bb 27       	eor	r27, r27
 512:	aa 27       	eor	r26, r26
 514:	0e 94 9f 02 	call	0x53e	; 0x53e <__addsf3x>
 518:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_round>
 51c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscA>
 520:	38 f0       	brcs	.+14     	; 0x530 <__addsf3+0x20>
 522:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_pscB>
 526:	20 f0       	brcs	.+8      	; 0x530 <__addsf3+0x20>
 528:	39 f4       	brne	.+14     	; 0x538 <__addsf3+0x28>
 52a:	9f 3f       	cpi	r25, 0xFF	; 255
 52c:	19 f4       	brne	.+6      	; 0x534 <__addsf3+0x24>
 52e:	26 f4       	brtc	.+8      	; 0x538 <__addsf3+0x28>
 530:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_nan>
 534:	0e f4       	brtc	.+2      	; 0x538 <__addsf3+0x28>
 536:	e0 95       	com	r30
 538:	e7 fb       	bst	r30, 7
 53a:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>

0000053e <__addsf3x>:
 53e:	e9 2f       	mov	r30, r25
 540:	0e 94 88 03 	call	0x710	; 0x710 <__fp_split3>
 544:	58 f3       	brcs	.-42     	; 0x51c <__addsf3+0xc>
 546:	ba 17       	cp	r27, r26
 548:	62 07       	cpc	r22, r18
 54a:	73 07       	cpc	r23, r19
 54c:	84 07       	cpc	r24, r20
 54e:	95 07       	cpc	r25, r21
 550:	20 f0       	brcs	.+8      	; 0x55a <__addsf3x+0x1c>
 552:	79 f4       	brne	.+30     	; 0x572 <__addsf3x+0x34>
 554:	a6 f5       	brtc	.+104    	; 0x5be <__addsf3x+0x80>
 556:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_zero>
 55a:	0e f4       	brtc	.+2      	; 0x55e <__addsf3x+0x20>
 55c:	e0 95       	com	r30
 55e:	0b 2e       	mov	r0, r27
 560:	ba 2f       	mov	r27, r26
 562:	a0 2d       	mov	r26, r0
 564:	0b 01       	movw	r0, r22
 566:	b9 01       	movw	r22, r18
 568:	90 01       	movw	r18, r0
 56a:	0c 01       	movw	r0, r24
 56c:	ca 01       	movw	r24, r20
 56e:	a0 01       	movw	r20, r0
 570:	11 24       	eor	r1, r1
 572:	ff 27       	eor	r31, r31
 574:	59 1b       	sub	r21, r25
 576:	99 f0       	breq	.+38     	; 0x59e <__addsf3x+0x60>
 578:	59 3f       	cpi	r21, 0xF9	; 249
 57a:	50 f4       	brcc	.+20     	; 0x590 <__addsf3x+0x52>
 57c:	50 3e       	cpi	r21, 0xE0	; 224
 57e:	68 f1       	brcs	.+90     	; 0x5da <__addsf3x+0x9c>
 580:	1a 16       	cp	r1, r26
 582:	f0 40       	sbci	r31, 0x00	; 0
 584:	a2 2f       	mov	r26, r18
 586:	23 2f       	mov	r18, r19
 588:	34 2f       	mov	r19, r20
 58a:	44 27       	eor	r20, r20
 58c:	58 5f       	subi	r21, 0xF8	; 248
 58e:	f3 cf       	rjmp	.-26     	; 0x576 <__addsf3x+0x38>
 590:	46 95       	lsr	r20
 592:	37 95       	ror	r19
 594:	27 95       	ror	r18
 596:	a7 95       	ror	r26
 598:	f0 40       	sbci	r31, 0x00	; 0
 59a:	53 95       	inc	r21
 59c:	c9 f7       	brne	.-14     	; 0x590 <__addsf3x+0x52>
 59e:	7e f4       	brtc	.+30     	; 0x5be <__addsf3x+0x80>
 5a0:	1f 16       	cp	r1, r31
 5a2:	ba 0b       	sbc	r27, r26
 5a4:	62 0b       	sbc	r22, r18
 5a6:	73 0b       	sbc	r23, r19
 5a8:	84 0b       	sbc	r24, r20
 5aa:	ba f0       	brmi	.+46     	; 0x5da <__addsf3x+0x9c>
 5ac:	91 50       	subi	r25, 0x01	; 1
 5ae:	a1 f0       	breq	.+40     	; 0x5d8 <__addsf3x+0x9a>
 5b0:	ff 0f       	add	r31, r31
 5b2:	bb 1f       	adc	r27, r27
 5b4:	66 1f       	adc	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	c2 f7       	brpl	.-16     	; 0x5ac <__addsf3x+0x6e>
 5bc:	0e c0       	rjmp	.+28     	; 0x5da <__addsf3x+0x9c>
 5be:	ba 0f       	add	r27, r26
 5c0:	62 1f       	adc	r22, r18
 5c2:	73 1f       	adc	r23, r19
 5c4:	84 1f       	adc	r24, r20
 5c6:	48 f4       	brcc	.+18     	; 0x5da <__addsf3x+0x9c>
 5c8:	87 95       	ror	r24
 5ca:	77 95       	ror	r23
 5cc:	67 95       	ror	r22
 5ce:	b7 95       	ror	r27
 5d0:	f7 95       	ror	r31
 5d2:	9e 3f       	cpi	r25, 0xFE	; 254
 5d4:	08 f0       	brcs	.+2      	; 0x5d8 <__addsf3x+0x9a>
 5d6:	b0 cf       	rjmp	.-160    	; 0x538 <__addsf3+0x28>
 5d8:	93 95       	inc	r25
 5da:	88 0f       	add	r24, r24
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <__addsf3x+0xa2>
 5de:	99 27       	eor	r25, r25
 5e0:	ee 0f       	add	r30, r30
 5e2:	97 95       	ror	r25
 5e4:	87 95       	ror	r24
 5e6:	08 95       	ret

000005e8 <__fixunssfsi>:
 5e8:	0e 94 90 03 	call	0x720	; 0x720 <__fp_splitA>
 5ec:	88 f0       	brcs	.+34     	; 0x610 <__fixunssfsi+0x28>
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	98 f0       	brcs	.+38     	; 0x618 <__fixunssfsi+0x30>
 5f2:	b9 2f       	mov	r27, r25
 5f4:	99 27       	eor	r25, r25
 5f6:	b7 51       	subi	r27, 0x17	; 23
 5f8:	b0 f0       	brcs	.+44     	; 0x626 <__fixunssfsi+0x3e>
 5fa:	e1 f0       	breq	.+56     	; 0x634 <__fixunssfsi+0x4c>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	1a f0       	brmi	.+6      	; 0x60c <__fixunssfsi+0x24>
 606:	ba 95       	dec	r27
 608:	c9 f7       	brne	.-14     	; 0x5fc <__fixunssfsi+0x14>
 60a:	14 c0       	rjmp	.+40     	; 0x634 <__fixunssfsi+0x4c>
 60c:	b1 30       	cpi	r27, 0x01	; 1
 60e:	91 f0       	breq	.+36     	; 0x634 <__fixunssfsi+0x4c>
 610:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_zero>
 614:	b1 e0       	ldi	r27, 0x01	; 1
 616:	08 95       	ret
 618:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_zero>
 61c:	67 2f       	mov	r22, r23
 61e:	78 2f       	mov	r23, r24
 620:	88 27       	eor	r24, r24
 622:	b8 5f       	subi	r27, 0xF8	; 248
 624:	39 f0       	breq	.+14     	; 0x634 <__fixunssfsi+0x4c>
 626:	b9 3f       	cpi	r27, 0xF9	; 249
 628:	cc f3       	brlt	.-14     	; 0x61c <__fixunssfsi+0x34>
 62a:	86 95       	lsr	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b3 95       	inc	r27
 632:	d9 f7       	brne	.-10     	; 0x62a <__fixunssfsi+0x42>
 634:	3e f4       	brtc	.+14     	; 0x644 <__fixunssfsi+0x5c>
 636:	90 95       	com	r25
 638:	80 95       	com	r24
 63a:	70 95       	com	r23
 63c:	61 95       	neg	r22
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__floatunsisf>:
 646:	e8 94       	clt
 648:	09 c0       	rjmp	.+18     	; 0x65c <__floatsisf+0x12>

0000064a <__floatsisf>:
 64a:	97 fb       	bst	r25, 7
 64c:	3e f4       	brtc	.+14     	; 0x65c <__floatsisf+0x12>
 64e:	90 95       	com	r25
 650:	80 95       	com	r24
 652:	70 95       	com	r23
 654:	61 95       	neg	r22
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	8f 4f       	sbci	r24, 0xFF	; 255
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	99 23       	and	r25, r25
 65e:	a9 f0       	breq	.+42     	; 0x68a <__floatsisf+0x40>
 660:	f9 2f       	mov	r31, r25
 662:	96 e9       	ldi	r25, 0x96	; 150
 664:	bb 27       	eor	r27, r27
 666:	93 95       	inc	r25
 668:	f6 95       	lsr	r31
 66a:	87 95       	ror	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b7 95       	ror	r27
 672:	f1 11       	cpse	r31, r1
 674:	f8 cf       	rjmp	.-16     	; 0x666 <__floatsisf+0x1c>
 676:	fa f4       	brpl	.+62     	; 0x6b6 <__floatsisf+0x6c>
 678:	bb 0f       	add	r27, r27
 67a:	11 f4       	brne	.+4      	; 0x680 <__floatsisf+0x36>
 67c:	60 ff       	sbrs	r22, 0
 67e:	1b c0       	rjmp	.+54     	; 0x6b6 <__floatsisf+0x6c>
 680:	6f 5f       	subi	r22, 0xFF	; 255
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	8f 4f       	sbci	r24, 0xFF	; 255
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	16 c0       	rjmp	.+44     	; 0x6b6 <__floatsisf+0x6c>
 68a:	88 23       	and	r24, r24
 68c:	11 f0       	breq	.+4      	; 0x692 <__floatsisf+0x48>
 68e:	96 e9       	ldi	r25, 0x96	; 150
 690:	11 c0       	rjmp	.+34     	; 0x6b4 <__floatsisf+0x6a>
 692:	77 23       	and	r23, r23
 694:	21 f0       	breq	.+8      	; 0x69e <__floatsisf+0x54>
 696:	9e e8       	ldi	r25, 0x8E	; 142
 698:	87 2f       	mov	r24, r23
 69a:	76 2f       	mov	r23, r22
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <__floatsisf+0x5e>
 69e:	66 23       	and	r22, r22
 6a0:	71 f0       	breq	.+28     	; 0x6be <__floatsisf+0x74>
 6a2:	96 e8       	ldi	r25, 0x86	; 134
 6a4:	86 2f       	mov	r24, r22
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	2a f0       	brmi	.+10     	; 0x6b6 <__floatsisf+0x6c>
 6ac:	9a 95       	dec	r25
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	88 1f       	adc	r24, r24
 6b4:	da f7       	brpl	.-10     	; 0x6ac <__floatsisf+0x62>
 6b6:	88 0f       	add	r24, r24
 6b8:	96 95       	lsr	r25
 6ba:	87 95       	ror	r24
 6bc:	97 f9       	bld	r25, 7
 6be:	08 95       	ret

000006c0 <__fp_inf>:
 6c0:	97 f9       	bld	r25, 7
 6c2:	9f 67       	ori	r25, 0x7F	; 127
 6c4:	80 e8       	ldi	r24, 0x80	; 128
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	08 95       	ret

000006cc <__fp_nan>:
 6cc:	9f ef       	ldi	r25, 0xFF	; 255
 6ce:	80 ec       	ldi	r24, 0xC0	; 192
 6d0:	08 95       	ret

000006d2 <__fp_pscA>:
 6d2:	00 24       	eor	r0, r0
 6d4:	0a 94       	dec	r0
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	18 06       	cpc	r1, r24
 6dc:	09 06       	cpc	r0, r25
 6de:	08 95       	ret

000006e0 <__fp_pscB>:
 6e0:	00 24       	eor	r0, r0
 6e2:	0a 94       	dec	r0
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	05 06       	cpc	r0, r21
 6ec:	08 95       	ret

000006ee <__fp_round>:
 6ee:	09 2e       	mov	r0, r25
 6f0:	03 94       	inc	r0
 6f2:	00 0c       	add	r0, r0
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__fp_round+0xc>
 6f6:	88 23       	and	r24, r24
 6f8:	52 f0       	brmi	.+20     	; 0x70e <__fp_round+0x20>
 6fa:	bb 0f       	add	r27, r27
 6fc:	40 f4       	brcc	.+16     	; 0x70e <__fp_round+0x20>
 6fe:	bf 2b       	or	r27, r31
 700:	11 f4       	brne	.+4      	; 0x706 <__fp_round+0x18>
 702:	60 ff       	sbrs	r22, 0
 704:	04 c0       	rjmp	.+8      	; 0x70e <__fp_round+0x20>
 706:	6f 5f       	subi	r22, 0xFF	; 255
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	08 95       	ret

00000710 <__fp_split3>:
 710:	57 fd       	sbrc	r21, 7
 712:	90 58       	subi	r25, 0x80	; 128
 714:	44 0f       	add	r20, r20
 716:	55 1f       	adc	r21, r21
 718:	59 f0       	breq	.+22     	; 0x730 <__fp_splitA+0x10>
 71a:	5f 3f       	cpi	r21, 0xFF	; 255
 71c:	71 f0       	breq	.+28     	; 0x73a <__fp_splitA+0x1a>
 71e:	47 95       	ror	r20

00000720 <__fp_splitA>:
 720:	88 0f       	add	r24, r24
 722:	97 fb       	bst	r25, 7
 724:	99 1f       	adc	r25, r25
 726:	61 f0       	breq	.+24     	; 0x740 <__fp_splitA+0x20>
 728:	9f 3f       	cpi	r25, 0xFF	; 255
 72a:	79 f0       	breq	.+30     	; 0x74a <__fp_splitA+0x2a>
 72c:	87 95       	ror	r24
 72e:	08 95       	ret
 730:	12 16       	cp	r1, r18
 732:	13 06       	cpc	r1, r19
 734:	14 06       	cpc	r1, r20
 736:	55 1f       	adc	r21, r21
 738:	f2 cf       	rjmp	.-28     	; 0x71e <__fp_split3+0xe>
 73a:	46 95       	lsr	r20
 73c:	f1 df       	rcall	.-30     	; 0x720 <__fp_splitA>
 73e:	08 c0       	rjmp	.+16     	; 0x750 <__fp_splitA+0x30>
 740:	16 16       	cp	r1, r22
 742:	17 06       	cpc	r1, r23
 744:	18 06       	cpc	r1, r24
 746:	99 1f       	adc	r25, r25
 748:	f1 cf       	rjmp	.-30     	; 0x72c <__fp_splitA+0xc>
 74a:	86 95       	lsr	r24
 74c:	71 05       	cpc	r23, r1
 74e:	61 05       	cpc	r22, r1
 750:	08 94       	sec
 752:	08 95       	ret

00000754 <__fp_zero>:
 754:	e8 94       	clt

00000756 <__fp_szero>:
 756:	bb 27       	eor	r27, r27
 758:	66 27       	eor	r22, r22
 75a:	77 27       	eor	r23, r23
 75c:	cb 01       	movw	r24, r22
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret

00000762 <__udivmodsi4>:
 762:	a1 e2       	ldi	r26, 0x21	; 33
 764:	1a 2e       	mov	r1, r26
 766:	aa 1b       	sub	r26, r26
 768:	bb 1b       	sub	r27, r27
 76a:	fd 01       	movw	r30, r26
 76c:	0d c0       	rjmp	.+26     	; 0x788 <__udivmodsi4_ep>

0000076e <__udivmodsi4_loop>:
 76e:	aa 1f       	adc	r26, r26
 770:	bb 1f       	adc	r27, r27
 772:	ee 1f       	adc	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	a2 17       	cp	r26, r18
 778:	b3 07       	cpc	r27, r19
 77a:	e4 07       	cpc	r30, r20
 77c:	f5 07       	cpc	r31, r21
 77e:	20 f0       	brcs	.+8      	; 0x788 <__udivmodsi4_ep>
 780:	a2 1b       	sub	r26, r18
 782:	b3 0b       	sbc	r27, r19
 784:	e4 0b       	sbc	r30, r20
 786:	f5 0b       	sbc	r31, r21

00000788 <__udivmodsi4_ep>:
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	1a 94       	dec	r1
 792:	69 f7       	brne	.-38     	; 0x76e <__udivmodsi4_loop>
 794:	60 95       	com	r22
 796:	70 95       	com	r23
 798:	80 95       	com	r24
 79a:	90 95       	com	r25
 79c:	9b 01       	movw	r18, r22
 79e:	ac 01       	movw	r20, r24
 7a0:	bd 01       	movw	r22, r26
 7a2:	cf 01       	movw	r24, r30
 7a4:	08 95       	ret

000007a6 <sprintf>:
 7a6:	ae e0       	ldi	r26, 0x0E	; 14
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	e9 ed       	ldi	r30, 0xD9	; 217
 7ac:	f3 e0       	ldi	r31, 0x03	; 3
 7ae:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__prologue_saves__+0x1c>
 7b2:	0d 89       	ldd	r16, Y+21	; 0x15
 7b4:	1e 89       	ldd	r17, Y+22	; 0x16
 7b6:	86 e0       	ldi	r24, 0x06	; 6
 7b8:	8c 83       	std	Y+4, r24	; 0x04
 7ba:	1a 83       	std	Y+2, r17	; 0x02
 7bc:	09 83       	std	Y+1, r16	; 0x01
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	9f e7       	ldi	r25, 0x7F	; 127
 7c2:	9e 83       	std	Y+6, r25	; 0x06
 7c4:	8d 83       	std	Y+5, r24	; 0x05
 7c6:	ae 01       	movw	r20, r28
 7c8:	47 5e       	subi	r20, 0xE7	; 231
 7ca:	5f 4f       	sbci	r21, 0xFF	; 255
 7cc:	6f 89       	ldd	r22, Y+23	; 0x17
 7ce:	78 8d       	ldd	r23, Y+24	; 0x18
 7d0:	ce 01       	movw	r24, r28
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <vfprintf>
 7d8:	ef 81       	ldd	r30, Y+7	; 0x07
 7da:	f8 85       	ldd	r31, Y+8	; 0x08
 7dc:	e0 0f       	add	r30, r16
 7de:	f1 1f       	adc	r31, r17
 7e0:	10 82       	st	Z, r1
 7e2:	2e 96       	adiw	r28, 0x0e	; 14
 7e4:	e4 e0       	ldi	r30, 0x04	; 4
 7e6:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__epilogue_restores__+0x1c>

000007ea <vfprintf>:
 7ea:	ab e0       	ldi	r26, 0x0B	; 11
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	eb ef       	ldi	r30, 0xFB	; 251
 7f0:	f3 e0       	ldi	r31, 0x03	; 3
 7f2:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__prologue_saves__>
 7f6:	6c 01       	movw	r12, r24
 7f8:	7b 01       	movw	r14, r22
 7fa:	8a 01       	movw	r16, r20
 7fc:	fc 01       	movw	r30, r24
 7fe:	17 82       	std	Z+7, r1	; 0x07
 800:	16 82       	std	Z+6, r1	; 0x06
 802:	83 81       	ldd	r24, Z+3	; 0x03
 804:	81 ff       	sbrs	r24, 1
 806:	cc c1       	rjmp	.+920    	; 0xba0 <__stack+0xa1>
 808:	ce 01       	movw	r24, r28
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	3c 01       	movw	r6, r24
 80e:	f6 01       	movw	r30, r12
 810:	93 81       	ldd	r25, Z+3	; 0x03
 812:	f7 01       	movw	r30, r14
 814:	93 fd       	sbrc	r25, 3
 816:	85 91       	lpm	r24, Z+
 818:	93 ff       	sbrs	r25, 3
 81a:	81 91       	ld	r24, Z+
 81c:	7f 01       	movw	r14, r30
 81e:	88 23       	and	r24, r24
 820:	09 f4       	brne	.+2      	; 0x824 <vfprintf+0x3a>
 822:	ba c1       	rjmp	.+884    	; 0xb98 <__stack+0x99>
 824:	85 32       	cpi	r24, 0x25	; 37
 826:	39 f4       	brne	.+14     	; 0x836 <vfprintf+0x4c>
 828:	93 fd       	sbrc	r25, 3
 82a:	85 91       	lpm	r24, Z+
 82c:	93 ff       	sbrs	r25, 3
 82e:	81 91       	ld	r24, Z+
 830:	7f 01       	movw	r14, r30
 832:	85 32       	cpi	r24, 0x25	; 37
 834:	29 f4       	brne	.+10     	; 0x840 <vfprintf+0x56>
 836:	b6 01       	movw	r22, r12
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 83e:	e7 cf       	rjmp	.-50     	; 0x80e <vfprintf+0x24>
 840:	91 2c       	mov	r9, r1
 842:	21 2c       	mov	r2, r1
 844:	31 2c       	mov	r3, r1
 846:	ff e1       	ldi	r31, 0x1F	; 31
 848:	f3 15       	cp	r31, r3
 84a:	d8 f0       	brcs	.+54     	; 0x882 <vfprintf+0x98>
 84c:	8b 32       	cpi	r24, 0x2B	; 43
 84e:	79 f0       	breq	.+30     	; 0x86e <vfprintf+0x84>
 850:	38 f4       	brcc	.+14     	; 0x860 <vfprintf+0x76>
 852:	80 32       	cpi	r24, 0x20	; 32
 854:	79 f0       	breq	.+30     	; 0x874 <vfprintf+0x8a>
 856:	83 32       	cpi	r24, 0x23	; 35
 858:	a1 f4       	brne	.+40     	; 0x882 <vfprintf+0x98>
 85a:	23 2d       	mov	r18, r3
 85c:	20 61       	ori	r18, 0x10	; 16
 85e:	1d c0       	rjmp	.+58     	; 0x89a <vfprintf+0xb0>
 860:	8d 32       	cpi	r24, 0x2D	; 45
 862:	61 f0       	breq	.+24     	; 0x87c <vfprintf+0x92>
 864:	80 33       	cpi	r24, 0x30	; 48
 866:	69 f4       	brne	.+26     	; 0x882 <vfprintf+0x98>
 868:	23 2d       	mov	r18, r3
 86a:	21 60       	ori	r18, 0x01	; 1
 86c:	16 c0       	rjmp	.+44     	; 0x89a <vfprintf+0xb0>
 86e:	83 2d       	mov	r24, r3
 870:	82 60       	ori	r24, 0x02	; 2
 872:	38 2e       	mov	r3, r24
 874:	e3 2d       	mov	r30, r3
 876:	e4 60       	ori	r30, 0x04	; 4
 878:	3e 2e       	mov	r3, r30
 87a:	2a c0       	rjmp	.+84     	; 0x8d0 <vfprintf+0xe6>
 87c:	f3 2d       	mov	r31, r3
 87e:	f8 60       	ori	r31, 0x08	; 8
 880:	1d c0       	rjmp	.+58     	; 0x8bc <vfprintf+0xd2>
 882:	37 fc       	sbrc	r3, 7
 884:	2d c0       	rjmp	.+90     	; 0x8e0 <vfprintf+0xf6>
 886:	20 ed       	ldi	r18, 0xD0	; 208
 888:	28 0f       	add	r18, r24
 88a:	2a 30       	cpi	r18, 0x0A	; 10
 88c:	40 f0       	brcs	.+16     	; 0x89e <vfprintf+0xb4>
 88e:	8e 32       	cpi	r24, 0x2E	; 46
 890:	b9 f4       	brne	.+46     	; 0x8c0 <vfprintf+0xd6>
 892:	36 fc       	sbrc	r3, 6
 894:	81 c1       	rjmp	.+770    	; 0xb98 <__stack+0x99>
 896:	23 2d       	mov	r18, r3
 898:	20 64       	ori	r18, 0x40	; 64
 89a:	32 2e       	mov	r3, r18
 89c:	19 c0       	rjmp	.+50     	; 0x8d0 <vfprintf+0xe6>
 89e:	36 fe       	sbrs	r3, 6
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <vfprintf+0xc4>
 8a2:	8a e0       	ldi	r24, 0x0A	; 10
 8a4:	98 9e       	mul	r9, r24
 8a6:	20 0d       	add	r18, r0
 8a8:	11 24       	eor	r1, r1
 8aa:	92 2e       	mov	r9, r18
 8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <vfprintf+0xe6>
 8ae:	ea e0       	ldi	r30, 0x0A	; 10
 8b0:	2e 9e       	mul	r2, r30
 8b2:	20 0d       	add	r18, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	22 2e       	mov	r2, r18
 8b8:	f3 2d       	mov	r31, r3
 8ba:	f0 62       	ori	r31, 0x20	; 32
 8bc:	3f 2e       	mov	r3, r31
 8be:	08 c0       	rjmp	.+16     	; 0x8d0 <vfprintf+0xe6>
 8c0:	8c 36       	cpi	r24, 0x6C	; 108
 8c2:	21 f4       	brne	.+8      	; 0x8cc <vfprintf+0xe2>
 8c4:	83 2d       	mov	r24, r3
 8c6:	80 68       	ori	r24, 0x80	; 128
 8c8:	38 2e       	mov	r3, r24
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vfprintf+0xe6>
 8cc:	88 36       	cpi	r24, 0x68	; 104
 8ce:	41 f4       	brne	.+16     	; 0x8e0 <vfprintf+0xf6>
 8d0:	f7 01       	movw	r30, r14
 8d2:	93 fd       	sbrc	r25, 3
 8d4:	85 91       	lpm	r24, Z+
 8d6:	93 ff       	sbrs	r25, 3
 8d8:	81 91       	ld	r24, Z+
 8da:	7f 01       	movw	r14, r30
 8dc:	81 11       	cpse	r24, r1
 8de:	b3 cf       	rjmp	.-154    	; 0x846 <vfprintf+0x5c>
 8e0:	98 2f       	mov	r25, r24
 8e2:	9f 7d       	andi	r25, 0xDF	; 223
 8e4:	95 54       	subi	r25, 0x45	; 69
 8e6:	93 30       	cpi	r25, 0x03	; 3
 8e8:	28 f4       	brcc	.+10     	; 0x8f4 <vfprintf+0x10a>
 8ea:	0c 5f       	subi	r16, 0xFC	; 252
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
 8ee:	9f e3       	ldi	r25, 0x3F	; 63
 8f0:	99 83       	std	Y+1, r25	; 0x01
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <vfprintf+0x124>
 8f4:	83 36       	cpi	r24, 0x63	; 99
 8f6:	31 f0       	breq	.+12     	; 0x904 <vfprintf+0x11a>
 8f8:	83 37       	cpi	r24, 0x73	; 115
 8fa:	71 f0       	breq	.+28     	; 0x918 <vfprintf+0x12e>
 8fc:	83 35       	cpi	r24, 0x53	; 83
 8fe:	09 f0       	breq	.+2      	; 0x902 <vfprintf+0x118>
 900:	59 c0       	rjmp	.+178    	; 0x9b4 <vfprintf+0x1ca>
 902:	21 c0       	rjmp	.+66     	; 0x946 <vfprintf+0x15c>
 904:	f8 01       	movw	r30, r16
 906:	80 81       	ld	r24, Z
 908:	89 83       	std	Y+1, r24	; 0x01
 90a:	0e 5f       	subi	r16, 0xFE	; 254
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
 90e:	88 24       	eor	r8, r8
 910:	83 94       	inc	r8
 912:	91 2c       	mov	r9, r1
 914:	53 01       	movw	r10, r6
 916:	13 c0       	rjmp	.+38     	; 0x93e <vfprintf+0x154>
 918:	28 01       	movw	r4, r16
 91a:	f2 e0       	ldi	r31, 0x02	; 2
 91c:	4f 0e       	add	r4, r31
 91e:	51 1c       	adc	r5, r1
 920:	f8 01       	movw	r30, r16
 922:	a0 80       	ld	r10, Z
 924:	b1 80       	ldd	r11, Z+1	; 0x01
 926:	36 fe       	sbrs	r3, 6
 928:	03 c0       	rjmp	.+6      	; 0x930 <vfprintf+0x146>
 92a:	69 2d       	mov	r22, r9
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	02 c0       	rjmp	.+4      	; 0x934 <vfprintf+0x14a>
 930:	6f ef       	ldi	r22, 0xFF	; 255
 932:	7f ef       	ldi	r23, 0xFF	; 255
 934:	c5 01       	movw	r24, r10
 936:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <strnlen>
 93a:	4c 01       	movw	r8, r24
 93c:	82 01       	movw	r16, r4
 93e:	f3 2d       	mov	r31, r3
 940:	ff 77       	andi	r31, 0x7F	; 127
 942:	3f 2e       	mov	r3, r31
 944:	16 c0       	rjmp	.+44     	; 0x972 <vfprintf+0x188>
 946:	28 01       	movw	r4, r16
 948:	22 e0       	ldi	r18, 0x02	; 2
 94a:	42 0e       	add	r4, r18
 94c:	51 1c       	adc	r5, r1
 94e:	f8 01       	movw	r30, r16
 950:	a0 80       	ld	r10, Z
 952:	b1 80       	ldd	r11, Z+1	; 0x01
 954:	36 fe       	sbrs	r3, 6
 956:	03 c0       	rjmp	.+6      	; 0x95e <vfprintf+0x174>
 958:	69 2d       	mov	r22, r9
 95a:	70 e0       	ldi	r23, 0x00	; 0
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x178>
 95e:	6f ef       	ldi	r22, 0xFF	; 255
 960:	7f ef       	ldi	r23, 0xFF	; 255
 962:	c5 01       	movw	r24, r10
 964:	0e 94 d6 05 	call	0xbac	; 0xbac <strnlen_P>
 968:	4c 01       	movw	r8, r24
 96a:	f3 2d       	mov	r31, r3
 96c:	f0 68       	ori	r31, 0x80	; 128
 96e:	3f 2e       	mov	r3, r31
 970:	82 01       	movw	r16, r4
 972:	33 fc       	sbrc	r3, 3
 974:	1b c0       	rjmp	.+54     	; 0x9ac <vfprintf+0x1c2>
 976:	82 2d       	mov	r24, r2
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	88 16       	cp	r8, r24
 97c:	99 06       	cpc	r9, r25
 97e:	b0 f4       	brcc	.+44     	; 0x9ac <vfprintf+0x1c2>
 980:	b6 01       	movw	r22, r12
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 98a:	2a 94       	dec	r2
 98c:	f4 cf       	rjmp	.-24     	; 0x976 <vfprintf+0x18c>
 98e:	f5 01       	movw	r30, r10
 990:	37 fc       	sbrc	r3, 7
 992:	85 91       	lpm	r24, Z+
 994:	37 fe       	sbrs	r3, 7
 996:	81 91       	ld	r24, Z+
 998:	5f 01       	movw	r10, r30
 99a:	b6 01       	movw	r22, r12
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 9a2:	21 10       	cpse	r2, r1
 9a4:	2a 94       	dec	r2
 9a6:	21 e0       	ldi	r18, 0x01	; 1
 9a8:	82 1a       	sub	r8, r18
 9aa:	91 08       	sbc	r9, r1
 9ac:	81 14       	cp	r8, r1
 9ae:	91 04       	cpc	r9, r1
 9b0:	71 f7       	brne	.-36     	; 0x98e <vfprintf+0x1a4>
 9b2:	e8 c0       	rjmp	.+464    	; 0xb84 <__stack+0x85>
 9b4:	84 36       	cpi	r24, 0x64	; 100
 9b6:	11 f0       	breq	.+4      	; 0x9bc <vfprintf+0x1d2>
 9b8:	89 36       	cpi	r24, 0x69	; 105
 9ba:	41 f5       	brne	.+80     	; 0xa0c <__DATA_REGION_LENGTH__+0xc>
 9bc:	f8 01       	movw	r30, r16
 9be:	37 fe       	sbrs	r3, 7
 9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <vfprintf+0x1e6>
 9c2:	60 81       	ld	r22, Z
 9c4:	71 81       	ldd	r23, Z+1	; 0x01
 9c6:	82 81       	ldd	r24, Z+2	; 0x02
 9c8:	93 81       	ldd	r25, Z+3	; 0x03
 9ca:	0c 5f       	subi	r16, 0xFC	; 252
 9cc:	1f 4f       	sbci	r17, 0xFF	; 255
 9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <vfprintf+0x1f6>
 9d0:	60 81       	ld	r22, Z
 9d2:	71 81       	ldd	r23, Z+1	; 0x01
 9d4:	07 2e       	mov	r0, r23
 9d6:	00 0c       	add	r0, r0
 9d8:	88 0b       	sbc	r24, r24
 9da:	99 0b       	sbc	r25, r25
 9dc:	0e 5f       	subi	r16, 0xFE	; 254
 9de:	1f 4f       	sbci	r17, 0xFF	; 255
 9e0:	f3 2d       	mov	r31, r3
 9e2:	ff 76       	andi	r31, 0x6F	; 111
 9e4:	3f 2e       	mov	r3, r31
 9e6:	97 ff       	sbrs	r25, 7
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <vfprintf+0x212>
 9ea:	90 95       	com	r25
 9ec:	80 95       	com	r24
 9ee:	70 95       	com	r23
 9f0:	61 95       	neg	r22
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	f0 68       	ori	r31, 0x80	; 128
 9fa:	3f 2e       	mov	r3, r31
 9fc:	2a e0       	ldi	r18, 0x0A	; 10
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	a3 01       	movw	r20, r6
 a02:	0e 94 28 06 	call	0xc50	; 0xc50 <__ultoa_invert>
 a06:	88 2e       	mov	r8, r24
 a08:	86 18       	sub	r8, r6
 a0a:	45 c0       	rjmp	.+138    	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
 a0c:	85 37       	cpi	r24, 0x75	; 117
 a0e:	31 f4       	brne	.+12     	; 0xa1c <__DATA_REGION_LENGTH__+0x1c>
 a10:	23 2d       	mov	r18, r3
 a12:	2f 7e       	andi	r18, 0xEF	; 239
 a14:	b2 2e       	mov	r11, r18
 a16:	2a e0       	ldi	r18, 0x0A	; 10
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	25 c0       	rjmp	.+74     	; 0xa66 <__DATA_REGION_LENGTH__+0x66>
 a1c:	93 2d       	mov	r25, r3
 a1e:	99 7f       	andi	r25, 0xF9	; 249
 a20:	b9 2e       	mov	r11, r25
 a22:	8f 36       	cpi	r24, 0x6F	; 111
 a24:	c1 f0       	breq	.+48     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
 a26:	18 f4       	brcc	.+6      	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
 a28:	88 35       	cpi	r24, 0x58	; 88
 a2a:	79 f0       	breq	.+30     	; 0xa4a <__DATA_REGION_LENGTH__+0x4a>
 a2c:	b5 c0       	rjmp	.+362    	; 0xb98 <__stack+0x99>
 a2e:	80 37       	cpi	r24, 0x70	; 112
 a30:	19 f0       	breq	.+6      	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a32:	88 37       	cpi	r24, 0x78	; 120
 a34:	21 f0       	breq	.+8      	; 0xa3e <__DATA_REGION_LENGTH__+0x3e>
 a36:	b0 c0       	rjmp	.+352    	; 0xb98 <__stack+0x99>
 a38:	e9 2f       	mov	r30, r25
 a3a:	e0 61       	ori	r30, 0x10	; 16
 a3c:	be 2e       	mov	r11, r30
 a3e:	b4 fe       	sbrs	r11, 4
 a40:	0d c0       	rjmp	.+26     	; 0xa5c <__DATA_REGION_LENGTH__+0x5c>
 a42:	fb 2d       	mov	r31, r11
 a44:	f4 60       	ori	r31, 0x04	; 4
 a46:	bf 2e       	mov	r11, r31
 a48:	09 c0       	rjmp	.+18     	; 0xa5c <__DATA_REGION_LENGTH__+0x5c>
 a4a:	34 fe       	sbrs	r3, 4
 a4c:	0a c0       	rjmp	.+20     	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 a4e:	29 2f       	mov	r18, r25
 a50:	26 60       	ori	r18, 0x06	; 6
 a52:	b2 2e       	mov	r11, r18
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 a56:	28 e0       	ldi	r18, 0x08	; 8
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	05 c0       	rjmp	.+10     	; 0xa66 <__DATA_REGION_LENGTH__+0x66>
 a5c:	20 e1       	ldi	r18, 0x10	; 16
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <__DATA_REGION_LENGTH__+0x66>
 a62:	20 e1       	ldi	r18, 0x10	; 16
 a64:	32 e0       	ldi	r19, 0x02	; 2
 a66:	f8 01       	movw	r30, r16
 a68:	b7 fe       	sbrs	r11, 7
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <__DATA_REGION_LENGTH__+0x7a>
 a6c:	60 81       	ld	r22, Z
 a6e:	71 81       	ldd	r23, Z+1	; 0x01
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	0c 5f       	subi	r16, 0xFC	; 252
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <__DATA_REGION_LENGTH__+0x86>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 5f       	subi	r16, 0xFE	; 254
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	a3 01       	movw	r20, r6
 a88:	0e 94 28 06 	call	0xc50	; 0xc50 <__ultoa_invert>
 a8c:	88 2e       	mov	r8, r24
 a8e:	86 18       	sub	r8, r6
 a90:	fb 2d       	mov	r31, r11
 a92:	ff 77       	andi	r31, 0x7F	; 127
 a94:	3f 2e       	mov	r3, r31
 a96:	36 fe       	sbrs	r3, 6
 a98:	0d c0       	rjmp	.+26     	; 0xab4 <__DATA_REGION_LENGTH__+0xb4>
 a9a:	23 2d       	mov	r18, r3
 a9c:	2e 7f       	andi	r18, 0xFE	; 254
 a9e:	a2 2e       	mov	r10, r18
 aa0:	89 14       	cp	r8, r9
 aa2:	58 f4       	brcc	.+22     	; 0xaba <__DATA_REGION_LENGTH__+0xba>
 aa4:	34 fe       	sbrs	r3, 4
 aa6:	0b c0       	rjmp	.+22     	; 0xabe <__DATA_REGION_LENGTH__+0xbe>
 aa8:	32 fc       	sbrc	r3, 2
 aaa:	09 c0       	rjmp	.+18     	; 0xabe <__DATA_REGION_LENGTH__+0xbe>
 aac:	83 2d       	mov	r24, r3
 aae:	8e 7e       	andi	r24, 0xEE	; 238
 ab0:	a8 2e       	mov	r10, r24
 ab2:	05 c0       	rjmp	.+10     	; 0xabe <__DATA_REGION_LENGTH__+0xbe>
 ab4:	b8 2c       	mov	r11, r8
 ab6:	a3 2c       	mov	r10, r3
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <__DATA_REGION_LENGTH__+0xc0>
 aba:	b8 2c       	mov	r11, r8
 abc:	01 c0       	rjmp	.+2      	; 0xac0 <__DATA_REGION_LENGTH__+0xc0>
 abe:	b9 2c       	mov	r11, r9
 ac0:	a4 fe       	sbrs	r10, 4
 ac2:	0f c0       	rjmp	.+30     	; 0xae2 <__DATA_REGION_LENGTH__+0xe2>
 ac4:	fe 01       	movw	r30, r28
 ac6:	e8 0d       	add	r30, r8
 ac8:	f1 1d       	adc	r31, r1
 aca:	80 81       	ld	r24, Z
 acc:	80 33       	cpi	r24, 0x30	; 48
 ace:	21 f4       	brne	.+8      	; 0xad8 <__DATA_REGION_LENGTH__+0xd8>
 ad0:	9a 2d       	mov	r25, r10
 ad2:	99 7e       	andi	r25, 0xE9	; 233
 ad4:	a9 2e       	mov	r10, r25
 ad6:	09 c0       	rjmp	.+18     	; 0xaea <__DATA_REGION_LENGTH__+0xea>
 ad8:	a2 fe       	sbrs	r10, 2
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <__DATA_REGION_LENGTH__+0xe8>
 adc:	b3 94       	inc	r11
 ade:	b3 94       	inc	r11
 ae0:	04 c0       	rjmp	.+8      	; 0xaea <__DATA_REGION_LENGTH__+0xea>
 ae2:	8a 2d       	mov	r24, r10
 ae4:	86 78       	andi	r24, 0x86	; 134
 ae6:	09 f0       	breq	.+2      	; 0xaea <__DATA_REGION_LENGTH__+0xea>
 ae8:	b3 94       	inc	r11
 aea:	a3 fc       	sbrc	r10, 3
 aec:	11 c0       	rjmp	.+34     	; 0xb10 <__stack+0x11>
 aee:	a0 fe       	sbrs	r10, 0
 af0:	06 c0       	rjmp	.+12     	; 0xafe <__DATA_REGION_LENGTH__+0xfe>
 af2:	b2 14       	cp	r11, r2
 af4:	88 f4       	brcc	.+34     	; 0xb18 <__stack+0x19>
 af6:	28 0c       	add	r2, r8
 af8:	92 2c       	mov	r9, r2
 afa:	9b 18       	sub	r9, r11
 afc:	0e c0       	rjmp	.+28     	; 0xb1a <__stack+0x1b>
 afe:	b2 14       	cp	r11, r2
 b00:	60 f4       	brcc	.+24     	; 0xb1a <__stack+0x1b>
 b02:	b6 01       	movw	r22, r12
 b04:	80 e2       	ldi	r24, 0x20	; 32
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b0c:	b3 94       	inc	r11
 b0e:	f7 cf       	rjmp	.-18     	; 0xafe <__DATA_REGION_LENGTH__+0xfe>
 b10:	b2 14       	cp	r11, r2
 b12:	18 f4       	brcc	.+6      	; 0xb1a <__stack+0x1b>
 b14:	2b 18       	sub	r2, r11
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <__stack+0x1d>
 b18:	98 2c       	mov	r9, r8
 b1a:	21 2c       	mov	r2, r1
 b1c:	a4 fe       	sbrs	r10, 4
 b1e:	10 c0       	rjmp	.+32     	; 0xb40 <__stack+0x41>
 b20:	b6 01       	movw	r22, r12
 b22:	80 e3       	ldi	r24, 0x30	; 48
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b2a:	a2 fe       	sbrs	r10, 2
 b2c:	17 c0       	rjmp	.+46     	; 0xb5c <__stack+0x5d>
 b2e:	a1 fc       	sbrc	r10, 1
 b30:	03 c0       	rjmp	.+6      	; 0xb38 <__stack+0x39>
 b32:	88 e7       	ldi	r24, 0x78	; 120
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <__stack+0x3d>
 b38:	88 e5       	ldi	r24, 0x58	; 88
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	b6 01       	movw	r22, r12
 b3e:	0c c0       	rjmp	.+24     	; 0xb58 <__stack+0x59>
 b40:	8a 2d       	mov	r24, r10
 b42:	86 78       	andi	r24, 0x86	; 134
 b44:	59 f0       	breq	.+22     	; 0xb5c <__stack+0x5d>
 b46:	a1 fe       	sbrs	r10, 1
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <__stack+0x4f>
 b4a:	8b e2       	ldi	r24, 0x2B	; 43
 b4c:	01 c0       	rjmp	.+2      	; 0xb50 <__stack+0x51>
 b4e:	80 e2       	ldi	r24, 0x20	; 32
 b50:	a7 fc       	sbrc	r10, 7
 b52:	8d e2       	ldi	r24, 0x2D	; 45
 b54:	b6 01       	movw	r22, r12
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b5c:	89 14       	cp	r8, r9
 b5e:	38 f4       	brcc	.+14     	; 0xb6e <__stack+0x6f>
 b60:	b6 01       	movw	r22, r12
 b62:	80 e3       	ldi	r24, 0x30	; 48
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b6a:	9a 94       	dec	r9
 b6c:	f7 cf       	rjmp	.-18     	; 0xb5c <__stack+0x5d>
 b6e:	8a 94       	dec	r8
 b70:	f3 01       	movw	r30, r6
 b72:	e8 0d       	add	r30, r8
 b74:	f1 1d       	adc	r31, r1
 b76:	80 81       	ld	r24, Z
 b78:	b6 01       	movw	r22, r12
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b80:	81 10       	cpse	r8, r1
 b82:	f5 cf       	rjmp	.-22     	; 0xb6e <__stack+0x6f>
 b84:	22 20       	and	r2, r2
 b86:	09 f4       	brne	.+2      	; 0xb8a <__stack+0x8b>
 b88:	42 ce       	rjmp	.-892    	; 0x80e <vfprintf+0x24>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e2       	ldi	r24, 0x20	; 32
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b94:	2a 94       	dec	r2
 b96:	f6 cf       	rjmp	.-20     	; 0xb84 <__stack+0x85>
 b98:	f6 01       	movw	r30, r12
 b9a:	86 81       	ldd	r24, Z+6	; 0x06
 b9c:	97 81       	ldd	r25, Z+7	; 0x07
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <__stack+0xa5>
 ba0:	8f ef       	ldi	r24, 0xFF	; 255
 ba2:	9f ef       	ldi	r25, 0xFF	; 255
 ba4:	2b 96       	adiw	r28, 0x0b	; 11
 ba6:	e2 e1       	ldi	r30, 0x12	; 18
 ba8:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__epilogue_restores__>

00000bac <strnlen_P>:
 bac:	fc 01       	movw	r30, r24
 bae:	05 90       	lpm	r0, Z+
 bb0:	61 50       	subi	r22, 0x01	; 1
 bb2:	70 40       	sbci	r23, 0x00	; 0
 bb4:	01 10       	cpse	r0, r1
 bb6:	d8 f7       	brcc	.-10     	; 0xbae <strnlen_P+0x2>
 bb8:	80 95       	com	r24
 bba:	90 95       	com	r25
 bbc:	8e 0f       	add	r24, r30
 bbe:	9f 1f       	adc	r25, r31
 bc0:	08 95       	ret

00000bc2 <strnlen>:
 bc2:	fc 01       	movw	r30, r24
 bc4:	61 50       	subi	r22, 0x01	; 1
 bc6:	70 40       	sbci	r23, 0x00	; 0
 bc8:	01 90       	ld	r0, Z+
 bca:	01 10       	cpse	r0, r1
 bcc:	d8 f7       	brcc	.-10     	; 0xbc4 <strnlen+0x2>
 bce:	80 95       	com	r24
 bd0:	90 95       	com	r25
 bd2:	8e 0f       	add	r24, r30
 bd4:	9f 1f       	adc	r25, r31
 bd6:	08 95       	ret

00000bd8 <fputc>:
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	fb 01       	movw	r30, r22
 be2:	23 81       	ldd	r18, Z+3	; 0x03
 be4:	21 fd       	sbrc	r18, 1
 be6:	03 c0       	rjmp	.+6      	; 0xbee <fputc+0x16>
 be8:	8f ef       	ldi	r24, 0xFF	; 255
 bea:	9f ef       	ldi	r25, 0xFF	; 255
 bec:	2c c0       	rjmp	.+88     	; 0xc46 <fputc+0x6e>
 bee:	22 ff       	sbrs	r18, 2
 bf0:	16 c0       	rjmp	.+44     	; 0xc1e <fputc+0x46>
 bf2:	46 81       	ldd	r20, Z+6	; 0x06
 bf4:	57 81       	ldd	r21, Z+7	; 0x07
 bf6:	24 81       	ldd	r18, Z+4	; 0x04
 bf8:	35 81       	ldd	r19, Z+5	; 0x05
 bfa:	42 17       	cp	r20, r18
 bfc:	53 07       	cpc	r21, r19
 bfe:	44 f4       	brge	.+16     	; 0xc10 <fputc+0x38>
 c00:	a0 81       	ld	r26, Z
 c02:	b1 81       	ldd	r27, Z+1	; 0x01
 c04:	9d 01       	movw	r18, r26
 c06:	2f 5f       	subi	r18, 0xFF	; 255
 c08:	3f 4f       	sbci	r19, 0xFF	; 255
 c0a:	31 83       	std	Z+1, r19	; 0x01
 c0c:	20 83       	st	Z, r18
 c0e:	8c 93       	st	X, r24
 c10:	26 81       	ldd	r18, Z+6	; 0x06
 c12:	37 81       	ldd	r19, Z+7	; 0x07
 c14:	2f 5f       	subi	r18, 0xFF	; 255
 c16:	3f 4f       	sbci	r19, 0xFF	; 255
 c18:	37 83       	std	Z+7, r19	; 0x07
 c1a:	26 83       	std	Z+6, r18	; 0x06
 c1c:	14 c0       	rjmp	.+40     	; 0xc46 <fputc+0x6e>
 c1e:	8b 01       	movw	r16, r22
 c20:	ec 01       	movw	r28, r24
 c22:	fb 01       	movw	r30, r22
 c24:	00 84       	ldd	r0, Z+8	; 0x08
 c26:	f1 85       	ldd	r31, Z+9	; 0x09
 c28:	e0 2d       	mov	r30, r0
 c2a:	09 95       	icall
 c2c:	89 2b       	or	r24, r25
 c2e:	e1 f6       	brne	.-72     	; 0xbe8 <fputc+0x10>
 c30:	d8 01       	movw	r26, r16
 c32:	16 96       	adiw	r26, 0x06	; 6
 c34:	8d 91       	ld	r24, X+
 c36:	9c 91       	ld	r25, X
 c38:	17 97       	sbiw	r26, 0x07	; 7
 c3a:	01 96       	adiw	r24, 0x01	; 1
 c3c:	17 96       	adiw	r26, 0x07	; 7
 c3e:	9c 93       	st	X, r25
 c40:	8e 93       	st	-X, r24
 c42:	16 97       	sbiw	r26, 0x06	; 6
 c44:	ce 01       	movw	r24, r28
 c46:	df 91       	pop	r29
 c48:	cf 91       	pop	r28
 c4a:	1f 91       	pop	r17
 c4c:	0f 91       	pop	r16
 c4e:	08 95       	ret

00000c50 <__ultoa_invert>:
 c50:	fa 01       	movw	r30, r20
 c52:	aa 27       	eor	r26, r26
 c54:	28 30       	cpi	r18, 0x08	; 8
 c56:	51 f1       	breq	.+84     	; 0xcac <__ultoa_invert+0x5c>
 c58:	20 31       	cpi	r18, 0x10	; 16
 c5a:	81 f1       	breq	.+96     	; 0xcbc <__ultoa_invert+0x6c>
 c5c:	e8 94       	clt
 c5e:	6f 93       	push	r22
 c60:	6e 7f       	andi	r22, 0xFE	; 254
 c62:	6e 5f       	subi	r22, 0xFE	; 254
 c64:	7f 4f       	sbci	r23, 0xFF	; 255
 c66:	8f 4f       	sbci	r24, 0xFF	; 255
 c68:	9f 4f       	sbci	r25, 0xFF	; 255
 c6a:	af 4f       	sbci	r26, 0xFF	; 255
 c6c:	b1 e0       	ldi	r27, 0x01	; 1
 c6e:	3e d0       	rcall	.+124    	; 0xcec <__ultoa_invert+0x9c>
 c70:	b4 e0       	ldi	r27, 0x04	; 4
 c72:	3c d0       	rcall	.+120    	; 0xcec <__ultoa_invert+0x9c>
 c74:	67 0f       	add	r22, r23
 c76:	78 1f       	adc	r23, r24
 c78:	89 1f       	adc	r24, r25
 c7a:	9a 1f       	adc	r25, r26
 c7c:	a1 1d       	adc	r26, r1
 c7e:	68 0f       	add	r22, r24
 c80:	79 1f       	adc	r23, r25
 c82:	8a 1f       	adc	r24, r26
 c84:	91 1d       	adc	r25, r1
 c86:	a1 1d       	adc	r26, r1
 c88:	6a 0f       	add	r22, r26
 c8a:	71 1d       	adc	r23, r1
 c8c:	81 1d       	adc	r24, r1
 c8e:	91 1d       	adc	r25, r1
 c90:	a1 1d       	adc	r26, r1
 c92:	20 d0       	rcall	.+64     	; 0xcd4 <__ultoa_invert+0x84>
 c94:	09 f4       	brne	.+2      	; 0xc98 <__ultoa_invert+0x48>
 c96:	68 94       	set
 c98:	3f 91       	pop	r19
 c9a:	2a e0       	ldi	r18, 0x0A	; 10
 c9c:	26 9f       	mul	r18, r22
 c9e:	11 24       	eor	r1, r1
 ca0:	30 19       	sub	r19, r0
 ca2:	30 5d       	subi	r19, 0xD0	; 208
 ca4:	31 93       	st	Z+, r19
 ca6:	de f6       	brtc	.-74     	; 0xc5e <__ultoa_invert+0xe>
 ca8:	cf 01       	movw	r24, r30
 caa:	08 95       	ret
 cac:	46 2f       	mov	r20, r22
 cae:	47 70       	andi	r20, 0x07	; 7
 cb0:	40 5d       	subi	r20, 0xD0	; 208
 cb2:	41 93       	st	Z+, r20
 cb4:	b3 e0       	ldi	r27, 0x03	; 3
 cb6:	0f d0       	rcall	.+30     	; 0xcd6 <__ultoa_invert+0x86>
 cb8:	c9 f7       	brne	.-14     	; 0xcac <__ultoa_invert+0x5c>
 cba:	f6 cf       	rjmp	.-20     	; 0xca8 <__ultoa_invert+0x58>
 cbc:	46 2f       	mov	r20, r22
 cbe:	4f 70       	andi	r20, 0x0F	; 15
 cc0:	40 5d       	subi	r20, 0xD0	; 208
 cc2:	4a 33       	cpi	r20, 0x3A	; 58
 cc4:	18 f0       	brcs	.+6      	; 0xccc <__ultoa_invert+0x7c>
 cc6:	49 5d       	subi	r20, 0xD9	; 217
 cc8:	31 fd       	sbrc	r19, 1
 cca:	40 52       	subi	r20, 0x20	; 32
 ccc:	41 93       	st	Z+, r20
 cce:	02 d0       	rcall	.+4      	; 0xcd4 <__ultoa_invert+0x84>
 cd0:	a9 f7       	brne	.-22     	; 0xcbc <__ultoa_invert+0x6c>
 cd2:	ea cf       	rjmp	.-44     	; 0xca8 <__ultoa_invert+0x58>
 cd4:	b4 e0       	ldi	r27, 0x04	; 4
 cd6:	a6 95       	lsr	r26
 cd8:	97 95       	ror	r25
 cda:	87 95       	ror	r24
 cdc:	77 95       	ror	r23
 cde:	67 95       	ror	r22
 ce0:	ba 95       	dec	r27
 ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__ultoa_invert+0x86>
 ce4:	00 97       	sbiw	r24, 0x00	; 0
 ce6:	61 05       	cpc	r22, r1
 ce8:	71 05       	cpc	r23, r1
 cea:	08 95       	ret
 cec:	9b 01       	movw	r18, r22
 cee:	ac 01       	movw	r20, r24
 cf0:	0a 2e       	mov	r0, r26
 cf2:	06 94       	lsr	r0
 cf4:	57 95       	ror	r21
 cf6:	47 95       	ror	r20
 cf8:	37 95       	ror	r19
 cfa:	27 95       	ror	r18
 cfc:	ba 95       	dec	r27
 cfe:	c9 f7       	brne	.-14     	; 0xcf2 <__ultoa_invert+0xa2>
 d00:	62 0f       	add	r22, r18
 d02:	73 1f       	adc	r23, r19
 d04:	84 1f       	adc	r24, r20
 d06:	95 1f       	adc	r25, r21
 d08:	a0 1d       	adc	r26, r0
 d0a:	08 95       	ret

00000d0c <__prologue_saves__>:
 d0c:	2f 92       	push	r2
 d0e:	3f 92       	push	r3
 d10:	4f 92       	push	r4
 d12:	5f 92       	push	r5
 d14:	6f 92       	push	r6
 d16:	7f 92       	push	r7
 d18:	8f 92       	push	r8
 d1a:	9f 92       	push	r9
 d1c:	af 92       	push	r10
 d1e:	bf 92       	push	r11
 d20:	cf 92       	push	r12
 d22:	df 92       	push	r13
 d24:	ef 92       	push	r14
 d26:	ff 92       	push	r15
 d28:	0f 93       	push	r16
 d2a:	1f 93       	push	r17
 d2c:	cf 93       	push	r28
 d2e:	df 93       	push	r29
 d30:	cd b7       	in	r28, 0x3d	; 61
 d32:	de b7       	in	r29, 0x3e	; 62
 d34:	ca 1b       	sub	r28, r26
 d36:	db 0b       	sbc	r29, r27
 d38:	0f b6       	in	r0, 0x3f	; 63
 d3a:	f8 94       	cli
 d3c:	de bf       	out	0x3e, r29	; 62
 d3e:	0f be       	out	0x3f, r0	; 63
 d40:	cd bf       	out	0x3d, r28	; 61
 d42:	09 94       	ijmp

00000d44 <__epilogue_restores__>:
 d44:	2a 88       	ldd	r2, Y+18	; 0x12
 d46:	39 88       	ldd	r3, Y+17	; 0x11
 d48:	48 88       	ldd	r4, Y+16	; 0x10
 d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
 d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
 d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
 d50:	8c 84       	ldd	r8, Y+12	; 0x0c
 d52:	9b 84       	ldd	r9, Y+11	; 0x0b
 d54:	aa 84       	ldd	r10, Y+10	; 0x0a
 d56:	b9 84       	ldd	r11, Y+9	; 0x09
 d58:	c8 84       	ldd	r12, Y+8	; 0x08
 d5a:	df 80       	ldd	r13, Y+7	; 0x07
 d5c:	ee 80       	ldd	r14, Y+6	; 0x06
 d5e:	fd 80       	ldd	r15, Y+5	; 0x05
 d60:	0c 81       	ldd	r16, Y+4	; 0x04
 d62:	1b 81       	ldd	r17, Y+3	; 0x03
 d64:	aa 81       	ldd	r26, Y+2	; 0x02
 d66:	b9 81       	ldd	r27, Y+1	; 0x01
 d68:	ce 0f       	add	r28, r30
 d6a:	d1 1d       	adc	r29, r1
 d6c:	0f b6       	in	r0, 0x3f	; 63
 d6e:	f8 94       	cli
 d70:	de bf       	out	0x3e, r29	; 62
 d72:	0f be       	out	0x3f, r0	; 63
 d74:	cd bf       	out	0x3d, r28	; 61
 d76:	ed 01       	movw	r28, r26
 d78:	08 95       	ret

00000d7a <_exit>:
 d7a:	f8 94       	cli

00000d7c <__stop_program>:
 d7c:	ff cf       	rjmp	.-2      	; 0xd7c <__stop_program>
