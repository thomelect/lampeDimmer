
lampeDimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800100  00800100  00000602  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2f  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bac  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  000020d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005da  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000456  00000000  00000000  00002baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_21>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_25>
  68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_26>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a8 38       	cpi	r26, 0x88	; 136
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  cc:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_21>:

/**
*@brief Interruption de la comparaison sur OCR0A (timer0) qui met msFlag ‡ 1 lorsque msCnt atteint TIMER_CNT_CYCLE qui est dÈfinie dans le define. msCnt est incrÈmentÈ ‡ chaques 1ms.
*/
ISR(TIMER0_COMPA_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	msCnt++;
  e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <msCnt>
  e6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <msCnt+0x1>
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <msCnt+0x1>
  f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <msCnt>
	if (msCnt >= TIMER_CNT_CYCLE)
  f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <msCnt>
  f8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <msCnt+0x1>
  fc:	49 97       	sbiw	r24, 0x19	; 25
  fe:	60 f0       	brcs	.+24     	; 0x118 <__vector_21+0x44>
	{
		msCnt -= TIMER_CNT_CYCLE;
 100:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <msCnt>
 104:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <msCnt+0x1>
 108:	49 97       	sbiw	r24, 0x19	; 25
 10a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <msCnt+0x1>
 10e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <msCnt>
		msFlag = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 ñ ñ WGM01 WGM00
	//TCCR0B : FOC0A FOC0B ñ ñ WGM02 CS02 CS01 CS00
	//TIMSK0 : ñ ñ ñ ñ ñ OCIE0B OCIE0A TOIE0
	uint8_t top = 250; //Valeur de OCR0A.
	TCCR0A = 0b00000010; //Mode CTC.
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Prescaler de 64.
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0b00000010; //Output compare match A interrupt enable.
 12e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = top-1; //62.5ns * 64 * 250 = 1ms.
 132:	89 ef       	ldi	r24, 0xF9	; 249
 134:	87 bd       	out	0x27, r24	; 39
	sei();
 136:	78 94       	sei
 138:	08 95       	ret

0000013a <main>:
*/
void timer0Init();

int main(void)
{
	usartInit(1000000, F_CPU); //Initialisation du USART ‡ 1Mbps.
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	34 e2       	ldi	r19, 0x24	; 36
 13e:	44 ef       	ldi	r20, 0xF4	; 244
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 e4       	ldi	r22, 0x40	; 64
 144:	72 e4       	ldi	r23, 0x42	; 66
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 14 01 	call	0x228	; 0x228 <usartInit>
	timer0Init(); //Initialisation de timer 0.
 14e:	0e 94 93 00 	call	0x126	; 0x126 <timer0Init>
	while (1)
	{
		if (msFlag)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	fd cf       	rjmp	.-6      	; 0x152 <main+0x18>

00000158 <__vector_25>:

/**
*@brief Interruption n√©cessaires √† la r√©ception. Le buffer de r√©ception est remplis avec la valeur de UDR1.
*/
ISR(USART1_RX_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	_rxCnt++;
 16e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_rxCnt>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_rxCnt>
	_rxBuffer[_rxBufferIn++] = UDR1;
 178:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_rxBufferIn>
 17c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_rxBufferIn+0x1>
 180:	9c 01       	movw	r18, r24
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <_rxBufferIn+0x1>
 18a:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <_rxBufferIn>
 18e:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 192:	fc 01       	movw	r30, r24
 194:	e8 5f       	subi	r30, 0xF8	; 248
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	20 83       	st	Z, r18
	if (_rxBufferIn >= RX_BUFFER_SIZE)// Si la limite du buffer est atteinte rxBufferIn retourne √† 0 et les premi√®res donn√©s (les plus ancienne) sont √©cras√©s.
 19a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_rxBufferIn>
 19e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_rxBufferIn+0x1>
 1a2:	80 34       	cpi	r24, 0x40	; 64
 1a4:	91 05       	cpc	r25, r1
 1a6:	20 f0       	brcs	.+8      	; 0x1b0 <__vector_25+0x58>
		_rxBufferIn = 0;
 1a8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_rxBufferIn+0x1>
 1ac:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_rxBufferIn>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_26>:

/**
*@brief Interruption n√©cessaires √† la transmission. Le buffer de transmission est vid√© en donnant √† UDR1 la valeur de l'octet √† envoyer.
*/
ISR(USART1_UDRE_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	if (!_txCnt)
 1d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_txCnt>
 1da:	81 11       	cpse	r24, r1
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <__vector_26+0x24>
		UCSR1B &= ~(1<<UDRIE1);// Permet de sortir de l'interruption lorsqu'on sort du if de transmission c'est √† dire lorsqu'il n'y a plus aucun caract√®re √† transmettre.
 1de:	e9 ec       	ldi	r30, 0xC9	; 201
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	80 83       	st	Z, r24
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <__vector_26+0x52>
	else
	{
		_txCnt--;
 1ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_txCnt>
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_txCnt>
		UDR1 = _txBuffer[_txBufferOut++];
 1f4:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <_txBufferOut>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	8e 0f       	add	r24, r30
 1fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_txBufferOut>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e8 5b       	subi	r30, 0xB8	; 184
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	80 81       	ld	r24, Z
 208:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
		if (_txBufferOut >= TX_BUFFER_SIZE)
 20c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_txBufferOut>
 210:	80 34       	cpi	r24, 0x40	; 64
 212:	10 f0       	brcs	.+4      	; 0x218 <__vector_26+0x52>
			_txBufferOut = 0;
 214:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_txBufferOut>
	}
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <usartInit>:

void usartInit(uint32_t baudRate, uint32_t fcpu)
{
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	6b 01       	movw	r12, r22
 232:	7c 01       	movw	r14, r24
	if (baudRate >= 115200)
 234:	c1 14       	cp	r12, r1
 236:	82 ec       	ldi	r24, 0xC2	; 194
 238:	d8 06       	cpc	r13, r24
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	e8 06       	cpc	r14, r24
 23e:	f1 04       	cpc	r15, r1
 240:	20 f1       	brcs	.+72     	; 0x28a <usartInit+0x62>
	{
		UCSR1A |= (1<<U2X1);
 242:	e8 ec       	ldi	r30, 0xC8	; 200
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	80 83       	st	Z, r24
		UBRR1 = ((fcpu >> 3) / baudRate)-0.5; // Calcul de UDRR1 la vitesse en fonction de baudrate en param√®tre de la fonction.
 24c:	ca 01       	movw	r24, r20
 24e:	b9 01       	movw	r22, r18
 250:	68 94       	set
 252:	12 f8       	bld	r1, 2
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	77 95       	ror	r23
 25a:	67 95       	ror	r22
 25c:	16 94       	lsr	r1
 25e:	d1 f7       	brne	.-12     	; 0x254 <usartInit+0x2c>
 260:	a7 01       	movw	r20, r14
 262:	96 01       	movw	r18, r12
 264:	0e 94 a3 02 	call	0x546	; 0x546 <__udivmodsi4>
 268:	ca 01       	movw	r24, r20
 26a:	b9 01       	movw	r22, r18
 26c:	0e 94 15 02 	call	0x42a	; 0x42a <__floatunsisf>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	5f e3       	ldi	r21, 0x3F	; 63
 278:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__subsf3>
 27c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__fixunssfsi>
 280:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 284:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 288:	23 c0       	rjmp	.+70     	; 0x2d0 <usartInit+0xa8>
	}
	else
	{
		UCSR1A &= ~(1<<U2X1);
 28a:	e8 ec       	ldi	r30, 0xC8	; 200
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	8d 7f       	andi	r24, 0xFD	; 253
 292:	80 83       	st	Z, r24
		UBRR1 = ((fcpu >> 4) / baudRate)-0.5; // Calcul de UDRR1 la vitesse en fonction de baudrate en param√®tre de la fonction.
 294:	ca 01       	movw	r24, r20
 296:	b9 01       	movw	r22, r18
 298:	68 94       	set
 29a:	13 f8       	bld	r1, 3
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	77 95       	ror	r23
 2a2:	67 95       	ror	r22
 2a4:	16 94       	lsr	r1
 2a6:	d1 f7       	brne	.-12     	; 0x29c <usartInit+0x74>
 2a8:	a7 01       	movw	r20, r14
 2aa:	96 01       	movw	r18, r12
 2ac:	0e 94 a3 02 	call	0x546	; 0x546 <__udivmodsi4>
 2b0:	ca 01       	movw	r24, r20
 2b2:	b9 01       	movw	r22, r18
 2b4:	0e 94 15 02 	call	0x42a	; 0x42a <__floatunsisf>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	5f e3       	ldi	r21, 0x3F	; 63
 2c0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__subsf3>
 2c4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__fixunssfsi>
 2c8:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 2cc:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	}
	UCSR1B |= ((1<<RXEN1) | (1<<TXEN1)); // Active RX et TX.
 2d0:	e9 ec       	ldi	r30, 0xC9	; 201
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	88 61       	ori	r24, 0x18	; 24
 2d8:	80 83       	st	Z, r24
	sei();
 2da:	78 94       	sei
	UCSR1B |= (1<<RXCIE1);
 2dc:	80 81       	ld	r24, Z
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	80 83       	st	Z, r24
	UCSR1B |= (1<<UDRIE1);
 2e2:	80 81       	ld	r24, Z
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	80 83       	st	Z, r24
}
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	08 95       	ret

000002f2 <__subsf3>:
 2f2:	50 58       	subi	r21, 0x80	; 128

000002f4 <__addsf3>:
 2f4:	bb 27       	eor	r27, r27
 2f6:	aa 27       	eor	r26, r26
 2f8:	0e 94 91 01 	call	0x322	; 0x322 <__addsf3x>
 2fc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_round>
 300:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fp_pscA>
 304:	38 f0       	brcs	.+14     	; 0x314 <__addsf3+0x20>
 306:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_pscB>
 30a:	20 f0       	brcs	.+8      	; 0x314 <__addsf3+0x20>
 30c:	39 f4       	brne	.+14     	; 0x31c <__addsf3+0x28>
 30e:	9f 3f       	cpi	r25, 0xFF	; 255
 310:	19 f4       	brne	.+6      	; 0x318 <__addsf3+0x24>
 312:	26 f4       	brtc	.+8      	; 0x31c <__addsf3+0x28>
 314:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_nan>
 318:	0e f4       	brtc	.+2      	; 0x31c <__addsf3+0x28>
 31a:	e0 95       	com	r30
 31c:	e7 fb       	bst	r30, 7
 31e:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_inf>

00000322 <__addsf3x>:
 322:	e9 2f       	mov	r30, r25
 324:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_split3>
 328:	58 f3       	brcs	.-42     	; 0x300 <__addsf3+0xc>
 32a:	ba 17       	cp	r27, r26
 32c:	62 07       	cpc	r22, r18
 32e:	73 07       	cpc	r23, r19
 330:	84 07       	cpc	r24, r20
 332:	95 07       	cpc	r25, r21
 334:	20 f0       	brcs	.+8      	; 0x33e <__addsf3x+0x1c>
 336:	79 f4       	brne	.+30     	; 0x356 <__addsf3x+0x34>
 338:	a6 f5       	brtc	.+104    	; 0x3a2 <__addsf3x+0x80>
 33a:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_zero>
 33e:	0e f4       	brtc	.+2      	; 0x342 <__addsf3x+0x20>
 340:	e0 95       	com	r30
 342:	0b 2e       	mov	r0, r27
 344:	ba 2f       	mov	r27, r26
 346:	a0 2d       	mov	r26, r0
 348:	0b 01       	movw	r0, r22
 34a:	b9 01       	movw	r22, r18
 34c:	90 01       	movw	r18, r0
 34e:	0c 01       	movw	r0, r24
 350:	ca 01       	movw	r24, r20
 352:	a0 01       	movw	r20, r0
 354:	11 24       	eor	r1, r1
 356:	ff 27       	eor	r31, r31
 358:	59 1b       	sub	r21, r25
 35a:	99 f0       	breq	.+38     	; 0x382 <__addsf3x+0x60>
 35c:	59 3f       	cpi	r21, 0xF9	; 249
 35e:	50 f4       	brcc	.+20     	; 0x374 <__addsf3x+0x52>
 360:	50 3e       	cpi	r21, 0xE0	; 224
 362:	68 f1       	brcs	.+90     	; 0x3be <__addsf3x+0x9c>
 364:	1a 16       	cp	r1, r26
 366:	f0 40       	sbci	r31, 0x00	; 0
 368:	a2 2f       	mov	r26, r18
 36a:	23 2f       	mov	r18, r19
 36c:	34 2f       	mov	r19, r20
 36e:	44 27       	eor	r20, r20
 370:	58 5f       	subi	r21, 0xF8	; 248
 372:	f3 cf       	rjmp	.-26     	; 0x35a <__addsf3x+0x38>
 374:	46 95       	lsr	r20
 376:	37 95       	ror	r19
 378:	27 95       	ror	r18
 37a:	a7 95       	ror	r26
 37c:	f0 40       	sbci	r31, 0x00	; 0
 37e:	53 95       	inc	r21
 380:	c9 f7       	brne	.-14     	; 0x374 <__addsf3x+0x52>
 382:	7e f4       	brtc	.+30     	; 0x3a2 <__addsf3x+0x80>
 384:	1f 16       	cp	r1, r31
 386:	ba 0b       	sbc	r27, r26
 388:	62 0b       	sbc	r22, r18
 38a:	73 0b       	sbc	r23, r19
 38c:	84 0b       	sbc	r24, r20
 38e:	ba f0       	brmi	.+46     	; 0x3be <__addsf3x+0x9c>
 390:	91 50       	subi	r25, 0x01	; 1
 392:	a1 f0       	breq	.+40     	; 0x3bc <__addsf3x+0x9a>
 394:	ff 0f       	add	r31, r31
 396:	bb 1f       	adc	r27, r27
 398:	66 1f       	adc	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	88 1f       	adc	r24, r24
 39e:	c2 f7       	brpl	.-16     	; 0x390 <__addsf3x+0x6e>
 3a0:	0e c0       	rjmp	.+28     	; 0x3be <__addsf3x+0x9c>
 3a2:	ba 0f       	add	r27, r26
 3a4:	62 1f       	adc	r22, r18
 3a6:	73 1f       	adc	r23, r19
 3a8:	84 1f       	adc	r24, r20
 3aa:	48 f4       	brcc	.+18     	; 0x3be <__addsf3x+0x9c>
 3ac:	87 95       	ror	r24
 3ae:	77 95       	ror	r23
 3b0:	67 95       	ror	r22
 3b2:	b7 95       	ror	r27
 3b4:	f7 95       	ror	r31
 3b6:	9e 3f       	cpi	r25, 0xFE	; 254
 3b8:	08 f0       	brcs	.+2      	; 0x3bc <__addsf3x+0x9a>
 3ba:	b0 cf       	rjmp	.-160    	; 0x31c <__addsf3+0x28>
 3bc:	93 95       	inc	r25
 3be:	88 0f       	add	r24, r24
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <__addsf3x+0xa2>
 3c2:	99 27       	eor	r25, r25
 3c4:	ee 0f       	add	r30, r30
 3c6:	97 95       	ror	r25
 3c8:	87 95       	ror	r24
 3ca:	08 95       	ret

000003cc <__fixunssfsi>:
 3cc:	0e 94 82 02 	call	0x504	; 0x504 <__fp_splitA>
 3d0:	88 f0       	brcs	.+34     	; 0x3f4 <__fixunssfsi+0x28>
 3d2:	9f 57       	subi	r25, 0x7F	; 127
 3d4:	98 f0       	brcs	.+38     	; 0x3fc <__fixunssfsi+0x30>
 3d6:	b9 2f       	mov	r27, r25
 3d8:	99 27       	eor	r25, r25
 3da:	b7 51       	subi	r27, 0x17	; 23
 3dc:	b0 f0       	brcs	.+44     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3de:	e1 f0       	breq	.+56     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	1a f0       	brmi	.+6      	; 0x3f0 <__fixunssfsi+0x24>
 3ea:	ba 95       	dec	r27
 3ec:	c9 f7       	brne	.-14     	; 0x3e0 <__fixunssfsi+0x14>
 3ee:	14 c0       	rjmp	.+40     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3f0:	b1 30       	cpi	r27, 0x01	; 1
 3f2:	91 f0       	breq	.+36     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3f4:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_zero>
 3f8:	b1 e0       	ldi	r27, 0x01	; 1
 3fa:	08 95       	ret
 3fc:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_zero>
 400:	67 2f       	mov	r22, r23
 402:	78 2f       	mov	r23, r24
 404:	88 27       	eor	r24, r24
 406:	b8 5f       	subi	r27, 0xF8	; 248
 408:	39 f0       	breq	.+14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40a:	b9 3f       	cpi	r27, 0xF9	; 249
 40c:	cc f3       	brlt	.-14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 40e:	86 95       	lsr	r24
 410:	77 95       	ror	r23
 412:	67 95       	ror	r22
 414:	b3 95       	inc	r27
 416:	d9 f7       	brne	.-10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 418:	3e f4       	brtc	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41a:	90 95       	com	r25
 41c:	80 95       	com	r24
 41e:	70 95       	com	r23
 420:	61 95       	neg	r22
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	8f 4f       	sbci	r24, 0xFF	; 255
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	08 95       	ret

0000042a <__floatunsisf>:
 42a:	e8 94       	clt
 42c:	09 c0       	rjmp	.+18     	; 0x440 <__floatsisf+0x12>

0000042e <__floatsisf>:
 42e:	97 fb       	bst	r25, 7
 430:	3e f4       	brtc	.+14     	; 0x440 <__floatsisf+0x12>
 432:	90 95       	com	r25
 434:	80 95       	com	r24
 436:	70 95       	com	r23
 438:	61 95       	neg	r22
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	99 23       	and	r25, r25
 442:	a9 f0       	breq	.+42     	; 0x46e <__floatsisf+0x40>
 444:	f9 2f       	mov	r31, r25
 446:	96 e9       	ldi	r25, 0x96	; 150
 448:	bb 27       	eor	r27, r27
 44a:	93 95       	inc	r25
 44c:	f6 95       	lsr	r31
 44e:	87 95       	ror	r24
 450:	77 95       	ror	r23
 452:	67 95       	ror	r22
 454:	b7 95       	ror	r27
 456:	f1 11       	cpse	r31, r1
 458:	f8 cf       	rjmp	.-16     	; 0x44a <__floatsisf+0x1c>
 45a:	fa f4       	brpl	.+62     	; 0x49a <__floatsisf+0x6c>
 45c:	bb 0f       	add	r27, r27
 45e:	11 f4       	brne	.+4      	; 0x464 <__floatsisf+0x36>
 460:	60 ff       	sbrs	r22, 0
 462:	1b c0       	rjmp	.+54     	; 0x49a <__floatsisf+0x6c>
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	8f 4f       	sbci	r24, 0xFF	; 255
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	16 c0       	rjmp	.+44     	; 0x49a <__floatsisf+0x6c>
 46e:	88 23       	and	r24, r24
 470:	11 f0       	breq	.+4      	; 0x476 <__floatsisf+0x48>
 472:	96 e9       	ldi	r25, 0x96	; 150
 474:	11 c0       	rjmp	.+34     	; 0x498 <__floatsisf+0x6a>
 476:	77 23       	and	r23, r23
 478:	21 f0       	breq	.+8      	; 0x482 <__floatsisf+0x54>
 47a:	9e e8       	ldi	r25, 0x8E	; 142
 47c:	87 2f       	mov	r24, r23
 47e:	76 2f       	mov	r23, r22
 480:	05 c0       	rjmp	.+10     	; 0x48c <__floatsisf+0x5e>
 482:	66 23       	and	r22, r22
 484:	71 f0       	breq	.+28     	; 0x4a2 <__floatsisf+0x74>
 486:	96 e8       	ldi	r25, 0x86	; 134
 488:	86 2f       	mov	r24, r22
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	2a f0       	brmi	.+10     	; 0x49a <__floatsisf+0x6c>
 490:	9a 95       	dec	r25
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	da f7       	brpl	.-10     	; 0x490 <__floatsisf+0x62>
 49a:	88 0f       	add	r24, r24
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	97 f9       	bld	r25, 7
 4a2:	08 95       	ret

000004a4 <__fp_inf>:
 4a4:	97 f9       	bld	r25, 7
 4a6:	9f 67       	ori	r25, 0x7F	; 127
 4a8:	80 e8       	ldi	r24, 0x80	; 128
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	08 95       	ret

000004b0 <__fp_nan>:
 4b0:	9f ef       	ldi	r25, 0xFF	; 255
 4b2:	80 ec       	ldi	r24, 0xC0	; 192
 4b4:	08 95       	ret

000004b6 <__fp_pscA>:
 4b6:	00 24       	eor	r0, r0
 4b8:	0a 94       	dec	r0
 4ba:	16 16       	cp	r1, r22
 4bc:	17 06       	cpc	r1, r23
 4be:	18 06       	cpc	r1, r24
 4c0:	09 06       	cpc	r0, r25
 4c2:	08 95       	ret

000004c4 <__fp_pscB>:
 4c4:	00 24       	eor	r0, r0
 4c6:	0a 94       	dec	r0
 4c8:	12 16       	cp	r1, r18
 4ca:	13 06       	cpc	r1, r19
 4cc:	14 06       	cpc	r1, r20
 4ce:	05 06       	cpc	r0, r21
 4d0:	08 95       	ret

000004d2 <__fp_round>:
 4d2:	09 2e       	mov	r0, r25
 4d4:	03 94       	inc	r0
 4d6:	00 0c       	add	r0, r0
 4d8:	11 f4       	brne	.+4      	; 0x4de <__fp_round+0xc>
 4da:	88 23       	and	r24, r24
 4dc:	52 f0       	brmi	.+20     	; 0x4f2 <__fp_round+0x20>
 4de:	bb 0f       	add	r27, r27
 4e0:	40 f4       	brcc	.+16     	; 0x4f2 <__fp_round+0x20>
 4e2:	bf 2b       	or	r27, r31
 4e4:	11 f4       	brne	.+4      	; 0x4ea <__fp_round+0x18>
 4e6:	60 ff       	sbrs	r22, 0
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__fp_round+0x20>
 4ea:	6f 5f       	subi	r22, 0xFF	; 255
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8f 4f       	sbci	r24, 0xFF	; 255
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	08 95       	ret

000004f4 <__fp_split3>:
 4f4:	57 fd       	sbrc	r21, 7
 4f6:	90 58       	subi	r25, 0x80	; 128
 4f8:	44 0f       	add	r20, r20
 4fa:	55 1f       	adc	r21, r21
 4fc:	59 f0       	breq	.+22     	; 0x514 <__fp_splitA+0x10>
 4fe:	5f 3f       	cpi	r21, 0xFF	; 255
 500:	71 f0       	breq	.+28     	; 0x51e <__fp_splitA+0x1a>
 502:	47 95       	ror	r20

00000504 <__fp_splitA>:
 504:	88 0f       	add	r24, r24
 506:	97 fb       	bst	r25, 7
 508:	99 1f       	adc	r25, r25
 50a:	61 f0       	breq	.+24     	; 0x524 <__fp_splitA+0x20>
 50c:	9f 3f       	cpi	r25, 0xFF	; 255
 50e:	79 f0       	breq	.+30     	; 0x52e <__fp_splitA+0x2a>
 510:	87 95       	ror	r24
 512:	08 95       	ret
 514:	12 16       	cp	r1, r18
 516:	13 06       	cpc	r1, r19
 518:	14 06       	cpc	r1, r20
 51a:	55 1f       	adc	r21, r21
 51c:	f2 cf       	rjmp	.-28     	; 0x502 <__fp_split3+0xe>
 51e:	46 95       	lsr	r20
 520:	f1 df       	rcall	.-30     	; 0x504 <__fp_splitA>
 522:	08 c0       	rjmp	.+16     	; 0x534 <__fp_splitA+0x30>
 524:	16 16       	cp	r1, r22
 526:	17 06       	cpc	r1, r23
 528:	18 06       	cpc	r1, r24
 52a:	99 1f       	adc	r25, r25
 52c:	f1 cf       	rjmp	.-30     	; 0x510 <__fp_splitA+0xc>
 52e:	86 95       	lsr	r24
 530:	71 05       	cpc	r23, r1
 532:	61 05       	cpc	r22, r1
 534:	08 94       	sec
 536:	08 95       	ret

00000538 <__fp_zero>:
 538:	e8 94       	clt

0000053a <__fp_szero>:
 53a:	bb 27       	eor	r27, r27
 53c:	66 27       	eor	r22, r22
 53e:	77 27       	eor	r23, r23
 540:	cb 01       	movw	r24, r22
 542:	97 f9       	bld	r25, 7
 544:	08 95       	ret

00000546 <__udivmodsi4>:
 546:	a1 e2       	ldi	r26, 0x21	; 33
 548:	1a 2e       	mov	r1, r26
 54a:	aa 1b       	sub	r26, r26
 54c:	bb 1b       	sub	r27, r27
 54e:	fd 01       	movw	r30, r26
 550:	0d c0       	rjmp	.+26     	; 0x56c <__udivmodsi4_ep>

00000552 <__udivmodsi4_loop>:
 552:	aa 1f       	adc	r26, r26
 554:	bb 1f       	adc	r27, r27
 556:	ee 1f       	adc	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	a2 17       	cp	r26, r18
 55c:	b3 07       	cpc	r27, r19
 55e:	e4 07       	cpc	r30, r20
 560:	f5 07       	cpc	r31, r21
 562:	20 f0       	brcs	.+8      	; 0x56c <__udivmodsi4_ep>
 564:	a2 1b       	sub	r26, r18
 566:	b3 0b       	sbc	r27, r19
 568:	e4 0b       	sbc	r30, r20
 56a:	f5 0b       	sbc	r31, r21

0000056c <__udivmodsi4_ep>:
 56c:	66 1f       	adc	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	1a 94       	dec	r1
 576:	69 f7       	brne	.-38     	; 0x552 <__udivmodsi4_loop>
 578:	60 95       	com	r22
 57a:	70 95       	com	r23
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	bd 01       	movw	r22, r26
 586:	cf 01       	movw	r24, r30
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
