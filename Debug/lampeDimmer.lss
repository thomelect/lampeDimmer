
lampeDimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000d72  00000e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00800106  00800106  00000e0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010da  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cce  00000000  00000000  0000205a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c6  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051a  00000000  00000000  00003b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_25>
  68:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_26>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e2 e7       	ldi	r30, 0x72	; 114
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ab 39       	cpi	r26, 0x9B	; 155
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 11 01 	call	0x222	; 0x222 <main>
  e2:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
	//ADCSRA = ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	//ADCSRB = ADHSM ACME MUX5 – ADTS3 ADTS2 ADTS1 ADTS0
	//DIDR0 = ADC7D ADC6D ADC5D ADC4D - - ADC1D ADC0D
	//DIDR2 = - - ADC13D ADC12D ADC11D ADC10D ADC9D ADC8D
	
	ADMUX = (1<<REFS0); //Référence sur AVcc avec un condensateur sur la broche AREF.
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enable / ADC diviseur = 128 (le plus lent possible).
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = (1<<ADHSM);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = (1<<ADC0D); //entrée numérique désactivée pour le ADC0.
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 102:	08 95       	ret

00000104 <adcRead>:
}

uint16_t adcRead(void)
{
	ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //On attend que la lecture du ADC soir terminée.
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <adcRead+0xa>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 11c:	08 95       	ret

0000011e <adcRead8>:

uint8_t adcRead8(void)
{
	return (adcRead() >> 2);
 11e:	0e 94 82 00 	call	0x104	; 0x104 <adcRead>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	08 95       	ret

0000012c <__vector_21>:

/**
*@brief Interruption de la comparaison sur OCR0A (timer0) qui met msFlag à 1 lorsque msCnt atteint TIMER_CNT_CYCLE qui est définie dans le define. msCnt est incrémenté à chaques 1ms.
*/
ISR(TIMER0_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	msCnt++;
 13a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <msCnt>
 13e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <msCnt+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <msCnt+0x1>
 148:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <msCnt>
	if (msCnt >= TIMER_CNT_CYCLE)
 14c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <msCnt>
 150:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <msCnt+0x1>
 154:	49 97       	sbiw	r24, 0x19	; 25
 156:	60 f0       	brcs	.+24     	; 0x170 <__vector_21+0x44>
	{
		msCnt -= TIMER_CNT_CYCLE;
 158:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <msCnt>
 15c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <msCnt+0x1>
 160:	49 97       	sbiw	r24, 0x19	; 25
 162:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <msCnt+0x1>
 166:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <msCnt>
		msFlag = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <msFlag>
	}
}
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <execRxCommand>:

void execRxCommand()
{
	valueOut = rxData;
 17e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxData>
 182:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 186:	08 95       	ret

00000188 <parseRxData>:
}

uint8_t parseRxData(uint8_t data)
{
	// Switch case des différents paramètres de la trame de réception
	switch(commState)
 188:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <commState>
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	59 f0       	breq	.+22     	; 0x1a6 <parseRxData+0x1e>
 190:	92 30       	cpi	r25, 0x02	; 2
 192:	b9 f0       	breq	.+46     	; 0x1c2 <parseRxData+0x3a>
	{
		default :
			if(data == '<') //Confirmation que la trame débute par '<'
 194:	8c 33       	cpi	r24, 0x3C	; 60
 196:	19 f4       	brne	.+6      	; 0x19e <parseRxData+0x16>
				commState = RXDATA; //Saut vers RXDATA.
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <commState>
			rxDataCnt = 0; //Remet rxDataSizeCnt à 0 pour être prêt à recevoir la donnée 0.
 19e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rxDataCnt>
				execRxCommand(); //Appel de execRxCommand() pour executer divers oppération sur les données reçues.
			commState = WAIT;
			return 1; //Retourne 1 si il y a eu validation.
			break;
	}
	return 0;// Retourne si l'a validation n'a pas été faite.
 1a2:	80 e0       	ldi	r24, 0x00	; 0
	{
		default :
			if(data == '<') //Confirmation que la trame débute par '<'
				commState = RXDATA; //Saut vers RXDATA.
			rxDataCnt = 0; //Remet rxDataSizeCnt à 0 pour être prêt à recevoir la donnée 0.
			break;
 1a4:	08 95       	ret
		case RXDATA:
			rxData = data; //Place les données dans l'union de structure. Puisque les paramètres sont placés dans la même ordre dans la structure que dans celui qu'elle sont reçu, il est possible d'utiliser bytes[x] au lieu de devoir spécifier le nom complet. Ce qui permet aussi d'assembler les valeurs 16 bits qui avaient été séparés en 2 x 8bits.
 1a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxData>
			rxDataCnt++;
 1aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rxDataCnt>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rxDataCnt>
			if(rxDataCnt >= 1) //Le nombre de données attendu est de 6.
 1b4:	88 23       	and	r24, r24
 1b6:	61 f0       	breq	.+24     	; 0x1d0 <parseRxData+0x48>
				commState = VALIDATE; //Lorsque le nombre de données anticipés est reçu on sute à validate.
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <commState>
				execRxCommand(); //Appel de execRxCommand() pour executer divers oppération sur les données reçues.
			commState = WAIT;
			return 1; //Retourne 1 si il y a eu validation.
			break;
	}
	return 0;// Retourne si l'a validation n'a pas été faite.
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
			rxDataCnt++;
			if(rxDataCnt >= 1) //Le nombre de données attendu est de 6.
				commState = VALIDATE; //Lorsque le nombre de données anticipés est reçu on sute à validate.
			break;
		case VALIDATE :
			if(data == '>') //On vérifie que la trame se termine bien par un chevron de fermeture.
 1c2:	8e 33       	cpi	r24, 0x3E	; 62
 1c4:	11 f4       	brne	.+4      	; 0x1ca <parseRxData+0x42>
				execRxCommand(); //Appel de execRxCommand() pour executer divers oppération sur les données reçues.
 1c6:	0e 94 bf 00 	call	0x17e	; 0x17e <execRxCommand>
			commState = WAIT;
 1ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <commState>
			return 1; //Retourne 1 si il y a eu validation.
 1ce:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return 0;// Retourne si l'a validation n'a pas été faite.
}
 1d0:	08 95       	ret

000001d2 <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	uint8_t top = 250; //Valeur de OCR0A.
	TCCR0A = 0b00000010; //Mode CTC.
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Prescaler de 64.
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0b00000010; //Output compare match A interrupt enable.
 1da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = top-1; //62.5ns * 64 * 250 = 1ms.
 1de:	89 ef       	ldi	r24, 0xF9	; 249
 1e0:	87 bd       	out	0x27, r24	; 39
	sei();
 1e2:	78 94       	sei
 1e4:	08 95       	ret

000001e6 <timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4A = 0b10000010; //PWM output OC4A.
 1e6:	82 e8       	ldi	r24, 0x82	; 130
 1e8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	TCCR4B = 0b00000100; //Prescaler de 4.
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	OCR4C = 255-1; //62.5ns * 4 * 255 = 127.5us.
 1f2:	8e ef       	ldi	r24, 0xFE	; 254
 1f4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
	OUTPUT_VALUE(0); //Valeur de la sortie.
 1f8:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>
 1fc:	08 95       	ret

000001fe <miscInit>:
	valueOut = rxData;
}

void miscInit(void)
{
	adcInit(); //Appel de la fonction d'initialisation du ADC.
 1fe:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
	timer0Init(); //Initialisation de timer 0.
 202:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <timer0Init>
	timer4Init(); //Initialisation de timer 4.
 206:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <timer4Init>
	usartInit(1000000, F_CPU); //Initialisation du USART à 1Mbps.
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e2       	ldi	r19, 0x24	; 36
 20e:	44 ef       	ldi	r20, 0xF4	; 244
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	60 e4       	ldi	r22, 0x40	; 64
 214:	72 e4       	ldi	r23, 0x42	; 66
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 b8 01 	call	0x370	; 0x370 <usartInit>
	
	OUTPUT_INIT();
 21e:	3f 9a       	sbi	0x07, 7	; 7
 220:	08 95       	ret

00000222 <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 222:	0e 94 ff 00 	call	0x1fe	; 0x1fe <miscInit>
			if (valueAdc != adcRead8())
			{
				valueAdc = adcRead8();
				valueOut = adcRead8();
			}			
			OUTPUT_VALUE(valueOut);
 226:	0f 2e       	mov	r0, r31
 228:	ff ec       	ldi	r31, 0xCF	; 207
 22a:	ef 2e       	mov	r14, r31
 22c:	f1 2c       	mov	r15, r1
 22e:	f0 2d       	mov	r31, r0
			sprintf(msg, "%d\n\r", valueOut);
 230:	00 e0       	ldi	r16, 0x00	; 0
 232:	11 e0       	ldi	r17, 0x01	; 1
 234:	c6 e1       	ldi	r28, 0x16	; 22
 236:	d1 e0       	ldi	r29, 0x01	; 1
{
	miscInit();
	
	while (1)
	{
		if (usartRxAvailable()) //Si un caractère est disponible:
 238:	0e 94 39 02 	call	0x472	; 0x472 <usartRxAvailable>
 23c:	88 23       	and	r24, r24
 23e:	21 f0       	breq	.+8      	; 0x248 <main+0x26>
			parseRxData(usartRemRxData()); //appel de la fonction parseRxData() avec en paramètre la valeur retournée par usartRemRxData().
 240:	0e 94 1d 02 	call	0x43a	; 0x43a <usartRemRxData>
 244:	0e 94 c4 00 	call	0x188	; 0x188 <parseRxData>
		if (msFlag)
 248:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <msFlag>
 24c:	88 23       	and	r24, r24
 24e:	a1 f3       	breq	.-24     	; 0x238 <main+0x16>
		{
			msFlag = 0;
 250:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <msFlag>
			if (valueAdc != adcRead8())
 254:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 258:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <valueAdc>
 25c:	89 17       	cp	r24, r25
 25e:	41 f0       	breq	.+16     	; 0x270 <main+0x4e>
			{
				valueAdc = adcRead8();
 260:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 264:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <valueAdc>
				valueOut = adcRead8();
 268:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 26c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			}			
			OUTPUT_VALUE(valueOut);
 270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 274:	f7 01       	movw	r30, r14
 276:	80 83       	st	Z, r24
			sprintf(msg, "%d\n\r", valueOut);
 278:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 27c:	1f 92       	push	r1
 27e:	8f 93       	push	r24
 280:	1f 93       	push	r17
 282:	0f 93       	push	r16
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	0e 94 cd 03 	call	0x79a	; 0x79a <sprintf>
			usartSendString(msg);			
 28c:	ce 01       	movw	r24, r28
 28e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <usartSendString>
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	cc cf       	rjmp	.-104    	; 0x238 <main+0x16>

000002a0 <__vector_25>:
	{
		if(usartSendByte(source[i]))
			return i;
	}
	return size;
}
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
 2b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_rxCnt>
 2c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_rxBufferIn>
 2c4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_rxBufferIn+0x1>
 2c8:	9c 01       	movw	r18, r24
 2ca:	2f 5f       	subi	r18, 0xFF	; 255
 2cc:	3f 4f       	sbci	r19, 0xFF	; 255
 2ce:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <_rxBufferIn+0x1>
 2d2:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <_rxBufferIn>
 2d6:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 2da:	fc 01       	movw	r30, r24
 2dc:	e5 5e       	subi	r30, 0xE5	; 229
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	20 83       	st	Z, r18
 2e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_rxBufferIn>
 2e6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_rxBufferIn+0x1>
 2ea:	80 34       	cpi	r24, 0x40	; 64
 2ec:	91 05       	cpc	r25, r1
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <__vector_25+0x58>
 2f0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_rxBufferIn+0x1>
 2f4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_rxBufferIn>
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_26>:
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	8f 93       	push	r24
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
 31e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_txCnt>
 322:	81 11       	cpse	r24, r1
 324:	06 c0       	rjmp	.+12     	; 0x332 <__vector_26+0x24>
 326:	e9 ec       	ldi	r30, 0xC9	; 201
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	8f 7d       	andi	r24, 0xDF	; 223
 32e:	80 83       	st	Z, r24
 330:	17 c0       	rjmp	.+46     	; 0x360 <__vector_26+0x52>
 332:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_txCnt>
 336:	81 50       	subi	r24, 0x01	; 1
 338:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_txCnt>
 33c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <_txBufferOut>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	8e 0f       	add	r24, r30
 344:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_txBufferOut>
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	e5 5a       	subi	r30, 0xA5	; 165
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	80 81       	ld	r24, Z
 350:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 354:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_txBufferOut>
 358:	80 34       	cpi	r24, 0x40	; 64
 35a:	10 f0       	brcs	.+4      	; 0x360 <__vector_26+0x52>
 35c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <_txBufferOut>
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <usartInit>:
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	6b 01       	movw	r12, r22
 37a:	7c 01       	movw	r14, r24
 37c:	c1 14       	cp	r12, r1
 37e:	82 ec       	ldi	r24, 0xC2	; 194
 380:	d8 06       	cpc	r13, r24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	e8 06       	cpc	r14, r24
 386:	f1 04       	cpc	r15, r1
 388:	20 f1       	brcs	.+72     	; 0x3d2 <usartInit+0x62>
 38a:	e8 ec       	ldi	r30, 0xC8	; 200
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	82 60       	ori	r24, 0x02	; 2
 392:	80 83       	st	Z, r24
 394:	ca 01       	movw	r24, r20
 396:	b9 01       	movw	r22, r18
 398:	68 94       	set
 39a:	12 f8       	bld	r1, 2
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	77 95       	ror	r23
 3a2:	67 95       	ror	r22
 3a4:	16 94       	lsr	r1
 3a6:	d1 f7       	brne	.-12     	; 0x39c <usartInit+0x2c>
 3a8:	a7 01       	movw	r20, r14
 3aa:	96 01       	movw	r18, r12
 3ac:	0e 94 ab 03 	call	0x756	; 0x756 <__udivmodsi4>
 3b0:	ca 01       	movw	r24, r20
 3b2:	b9 01       	movw	r22, r18
 3b4:	0e 94 1d 03 	call	0x63a	; 0x63a <__floatunsisf>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	5f e3       	ldi	r21, 0x3F	; 63
 3c0:	0e 94 81 02 	call	0x502	; 0x502 <__subsf3>
 3c4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fixunssfsi>
 3c8:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 3cc:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 3d0:	23 c0       	rjmp	.+70     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3d2:	e8 ec       	ldi	r30, 0xC8	; 200
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	8d 7f       	andi	r24, 0xFD	; 253
 3da:	80 83       	st	Z, r24
 3dc:	ca 01       	movw	r24, r20
 3de:	b9 01       	movw	r22, r18
 3e0:	68 94       	set
 3e2:	13 f8       	bld	r1, 3
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	16 94       	lsr	r1
 3ee:	d1 f7       	brne	.-12     	; 0x3e4 <usartInit+0x74>
 3f0:	a7 01       	movw	r20, r14
 3f2:	96 01       	movw	r18, r12
 3f4:	0e 94 ab 03 	call	0x756	; 0x756 <__udivmodsi4>
 3f8:	ca 01       	movw	r24, r20
 3fa:	b9 01       	movw	r22, r18
 3fc:	0e 94 1d 03 	call	0x63a	; 0x63a <__floatunsisf>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	5f e3       	ldi	r21, 0x3F	; 63
 408:	0e 94 81 02 	call	0x502	; 0x502 <__subsf3>
 40c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__fixunssfsi>
 410:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 414:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 418:	e9 ec       	ldi	r30, 0xC9	; 201
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	88 61       	ori	r24, 0x18	; 24
 420:	80 83       	st	Z, r24
 422:	78 94       	sei
 424:	80 81       	ld	r24, Z
 426:	80 68       	ori	r24, 0x80	; 128
 428:	80 83       	st	Z, r24
 42a:	80 81       	ld	r24, Z
 42c:	80 62       	ori	r24, 0x20	; 32
 42e:	80 83       	st	Z, r24
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	df 90       	pop	r13
 436:	cf 90       	pop	r12
 438:	08 95       	ret

0000043a <usartRemRxData>:
 43a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 43e:	88 23       	and	r24, r24
 440:	b1 f0       	breq	.+44     	; 0x46e <usartRemRxData+0x34>
 442:	f8 94       	cli
 444:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 448:	81 50       	subi	r24, 0x01	; 1
 44a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_rxCnt>
 44e:	78 94       	sei
 450:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <_rxBufferOut>
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	9e 0f       	add	r25, r30
 458:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_rxBufferOut>
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	e5 5e       	subi	r30, 0xE5	; 229
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	80 81       	ld	r24, Z
 464:	90 34       	cpi	r25, 0x40	; 64
 466:	20 f0       	brcs	.+8      	; 0x470 <usartRemRxData+0x36>
 468:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_rxBufferOut>
 46c:	08 95       	ret
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret

00000472 <usartRxAvailable>:
 472:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxCnt>
 476:	08 95       	ret

00000478 <usartSendByte>:
 478:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_txCnt>
 47c:	90 34       	cpi	r25, 0x40	; 64
 47e:	10 f5       	brcc	.+68     	; 0x4c4 <usartSendByte+0x4c>
 480:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_txCnt>
 484:	9f 5f       	subi	r25, 0xFF	; 255
 486:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_txCnt>
 48a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <_txBufferIn>
 48e:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <_txBufferIn+0x1>
 492:	a9 01       	movw	r20, r18
 494:	4f 5f       	subi	r20, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255
 498:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <_txBufferIn+0x1>
 49c:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <_txBufferIn>
 4a0:	f9 01       	movw	r30, r18
 4a2:	e5 5a       	subi	r30, 0xA5	; 165
 4a4:	fe 4f       	sbci	r31, 0xFE	; 254
 4a6:	80 83       	st	Z, r24
 4a8:	40 34       	cpi	r20, 0x40	; 64
 4aa:	51 05       	cpc	r21, r1
 4ac:	20 f0       	brcs	.+8      	; 0x4b6 <usartSendByte+0x3e>
 4ae:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <_txBufferIn+0x1>
 4b2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_txBufferIn>
 4b6:	e9 ec       	ldi	r30, 0xC9	; 201
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	80 62       	ori	r24, 0x20	; 32
 4be:	80 83       	st	Z, r24
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret

000004c8 <usartSendString>:

uint8_t usartSendString(const char * str)
{
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	fc 01       	movw	r30, r24
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 4d0:	80 81       	ld	r24, Z
 4d2:	88 23       	and	r24, r24
 4d4:	79 f0       	breq	.+30     	; 0x4f4 <usartSendString+0x2c>
 4d6:	8f 01       	movw	r16, r30
 4d8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un Ã  un les caractÃ¨res qui composent la string reÃ§u.
 4da:	0e 94 3c 02 	call	0x478	; 0x478 <usartSendByte>
 4de:	81 11       	cpse	r24, r1
 4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <usartSendString+0x30>
			return i;
		nbChar ++;
 4e2:	cf 5f       	subi	r28, 0xFF	; 255
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 4e4:	f8 01       	movw	r30, r16
 4e6:	ec 0f       	add	r30, r28
 4e8:	f1 1d       	adc	r31, r1
 4ea:	80 81       	ld	r24, Z
 4ec:	81 11       	cpse	r24, r1
 4ee:	f5 cf       	rjmp	.-22     	; 0x4da <usartSendString+0x12>
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un Ã  un les caractÃ¨res qui composent la string reÃ§u.
			return i;
		nbChar ++;
 4f0:	8c 2f       	mov	r24, r28
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <usartSendString+0x32>
	return size;
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <usartSendString+0x32>
 4f8:	8c 2f       	mov	r24, r28
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un Ã  un les caractÃ¨res qui composent la string reÃ§u.
			return i;
		nbChar ++;
	}
	return nbChar;
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	08 95       	ret

00000502 <__subsf3>:
 502:	50 58       	subi	r21, 0x80	; 128

00000504 <__addsf3>:
 504:	bb 27       	eor	r27, r27
 506:	aa 27       	eor	r26, r26
 508:	0e 94 99 02 	call	0x532	; 0x532 <__addsf3x>
 50c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_round>
 510:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_pscA>
 514:	38 f0       	brcs	.+14     	; 0x524 <__addsf3+0x20>
 516:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fp_pscB>
 51a:	20 f0       	brcs	.+8      	; 0x524 <__addsf3+0x20>
 51c:	39 f4       	brne	.+14     	; 0x52c <__addsf3+0x28>
 51e:	9f 3f       	cpi	r25, 0xFF	; 255
 520:	19 f4       	brne	.+6      	; 0x528 <__addsf3+0x24>
 522:	26 f4       	brtc	.+8      	; 0x52c <__addsf3+0x28>
 524:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_nan>
 528:	0e f4       	brtc	.+2      	; 0x52c <__addsf3+0x28>
 52a:	e0 95       	com	r30
 52c:	e7 fb       	bst	r30, 7
 52e:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__fp_inf>

00000532 <__addsf3x>:
 532:	e9 2f       	mov	r30, r25
 534:	0e 94 82 03 	call	0x704	; 0x704 <__fp_split3>
 538:	58 f3       	brcs	.-42     	; 0x510 <__addsf3+0xc>
 53a:	ba 17       	cp	r27, r26
 53c:	62 07       	cpc	r22, r18
 53e:	73 07       	cpc	r23, r19
 540:	84 07       	cpc	r24, r20
 542:	95 07       	cpc	r25, r21
 544:	20 f0       	brcs	.+8      	; 0x54e <__addsf3x+0x1c>
 546:	79 f4       	brne	.+30     	; 0x566 <__addsf3x+0x34>
 548:	a6 f5       	brtc	.+104    	; 0x5b2 <__addsf3x+0x80>
 54a:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_zero>
 54e:	0e f4       	brtc	.+2      	; 0x552 <__addsf3x+0x20>
 550:	e0 95       	com	r30
 552:	0b 2e       	mov	r0, r27
 554:	ba 2f       	mov	r27, r26
 556:	a0 2d       	mov	r26, r0
 558:	0b 01       	movw	r0, r22
 55a:	b9 01       	movw	r22, r18
 55c:	90 01       	movw	r18, r0
 55e:	0c 01       	movw	r0, r24
 560:	ca 01       	movw	r24, r20
 562:	a0 01       	movw	r20, r0
 564:	11 24       	eor	r1, r1
 566:	ff 27       	eor	r31, r31
 568:	59 1b       	sub	r21, r25
 56a:	99 f0       	breq	.+38     	; 0x592 <__addsf3x+0x60>
 56c:	59 3f       	cpi	r21, 0xF9	; 249
 56e:	50 f4       	brcc	.+20     	; 0x584 <__addsf3x+0x52>
 570:	50 3e       	cpi	r21, 0xE0	; 224
 572:	68 f1       	brcs	.+90     	; 0x5ce <__addsf3x+0x9c>
 574:	1a 16       	cp	r1, r26
 576:	f0 40       	sbci	r31, 0x00	; 0
 578:	a2 2f       	mov	r26, r18
 57a:	23 2f       	mov	r18, r19
 57c:	34 2f       	mov	r19, r20
 57e:	44 27       	eor	r20, r20
 580:	58 5f       	subi	r21, 0xF8	; 248
 582:	f3 cf       	rjmp	.-26     	; 0x56a <__addsf3x+0x38>
 584:	46 95       	lsr	r20
 586:	37 95       	ror	r19
 588:	27 95       	ror	r18
 58a:	a7 95       	ror	r26
 58c:	f0 40       	sbci	r31, 0x00	; 0
 58e:	53 95       	inc	r21
 590:	c9 f7       	brne	.-14     	; 0x584 <__addsf3x+0x52>
 592:	7e f4       	brtc	.+30     	; 0x5b2 <__addsf3x+0x80>
 594:	1f 16       	cp	r1, r31
 596:	ba 0b       	sbc	r27, r26
 598:	62 0b       	sbc	r22, r18
 59a:	73 0b       	sbc	r23, r19
 59c:	84 0b       	sbc	r24, r20
 59e:	ba f0       	brmi	.+46     	; 0x5ce <__addsf3x+0x9c>
 5a0:	91 50       	subi	r25, 0x01	; 1
 5a2:	a1 f0       	breq	.+40     	; 0x5cc <__addsf3x+0x9a>
 5a4:	ff 0f       	add	r31, r31
 5a6:	bb 1f       	adc	r27, r27
 5a8:	66 1f       	adc	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	c2 f7       	brpl	.-16     	; 0x5a0 <__addsf3x+0x6e>
 5b0:	0e c0       	rjmp	.+28     	; 0x5ce <__addsf3x+0x9c>
 5b2:	ba 0f       	add	r27, r26
 5b4:	62 1f       	adc	r22, r18
 5b6:	73 1f       	adc	r23, r19
 5b8:	84 1f       	adc	r24, r20
 5ba:	48 f4       	brcc	.+18     	; 0x5ce <__addsf3x+0x9c>
 5bc:	87 95       	ror	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b7 95       	ror	r27
 5c4:	f7 95       	ror	r31
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <__addsf3x+0x9a>
 5ca:	b0 cf       	rjmp	.-160    	; 0x52c <__addsf3+0x28>
 5cc:	93 95       	inc	r25
 5ce:	88 0f       	add	r24, r24
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__addsf3x+0xa2>
 5d2:	99 27       	eor	r25, r25
 5d4:	ee 0f       	add	r30, r30
 5d6:	97 95       	ror	r25
 5d8:	87 95       	ror	r24
 5da:	08 95       	ret

000005dc <__fixunssfsi>:
 5dc:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_splitA>
 5e0:	88 f0       	brcs	.+34     	; 0x604 <__fixunssfsi+0x28>
 5e2:	9f 57       	subi	r25, 0x7F	; 127
 5e4:	98 f0       	brcs	.+38     	; 0x60c <__fixunssfsi+0x30>
 5e6:	b9 2f       	mov	r27, r25
 5e8:	99 27       	eor	r25, r25
 5ea:	b7 51       	subi	r27, 0x17	; 23
 5ec:	b0 f0       	brcs	.+44     	; 0x61a <__fixunssfsi+0x3e>
 5ee:	e1 f0       	breq	.+56     	; 0x628 <__fixunssfsi+0x4c>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	1a f0       	brmi	.+6      	; 0x600 <__fixunssfsi+0x24>
 5fa:	ba 95       	dec	r27
 5fc:	c9 f7       	brne	.-14     	; 0x5f0 <__fixunssfsi+0x14>
 5fe:	14 c0       	rjmp	.+40     	; 0x628 <__fixunssfsi+0x4c>
 600:	b1 30       	cpi	r27, 0x01	; 1
 602:	91 f0       	breq	.+36     	; 0x628 <__fixunssfsi+0x4c>
 604:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_zero>
 608:	b1 e0       	ldi	r27, 0x01	; 1
 60a:	08 95       	ret
 60c:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_zero>
 610:	67 2f       	mov	r22, r23
 612:	78 2f       	mov	r23, r24
 614:	88 27       	eor	r24, r24
 616:	b8 5f       	subi	r27, 0xF8	; 248
 618:	39 f0       	breq	.+14     	; 0x628 <__fixunssfsi+0x4c>
 61a:	b9 3f       	cpi	r27, 0xF9	; 249
 61c:	cc f3       	brlt	.-14     	; 0x610 <__fixunssfsi+0x34>
 61e:	86 95       	lsr	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b3 95       	inc	r27
 626:	d9 f7       	brne	.-10     	; 0x61e <__fixunssfsi+0x42>
 628:	3e f4       	brtc	.+14     	; 0x638 <__fixunssfsi+0x5c>
 62a:	90 95       	com	r25
 62c:	80 95       	com	r24
 62e:	70 95       	com	r23
 630:	61 95       	neg	r22
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__floatunsisf>:
 63a:	e8 94       	clt
 63c:	09 c0       	rjmp	.+18     	; 0x650 <__floatsisf+0x12>

0000063e <__floatsisf>:
 63e:	97 fb       	bst	r25, 7
 640:	3e f4       	brtc	.+14     	; 0x650 <__floatsisf+0x12>
 642:	90 95       	com	r25
 644:	80 95       	com	r24
 646:	70 95       	com	r23
 648:	61 95       	neg	r22
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	8f 4f       	sbci	r24, 0xFF	; 255
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	99 23       	and	r25, r25
 652:	a9 f0       	breq	.+42     	; 0x67e <__floatsisf+0x40>
 654:	f9 2f       	mov	r31, r25
 656:	96 e9       	ldi	r25, 0x96	; 150
 658:	bb 27       	eor	r27, r27
 65a:	93 95       	inc	r25
 65c:	f6 95       	lsr	r31
 65e:	87 95       	ror	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b7 95       	ror	r27
 666:	f1 11       	cpse	r31, r1
 668:	f8 cf       	rjmp	.-16     	; 0x65a <__floatsisf+0x1c>
 66a:	fa f4       	brpl	.+62     	; 0x6aa <__floatsisf+0x6c>
 66c:	bb 0f       	add	r27, r27
 66e:	11 f4       	brne	.+4      	; 0x674 <__floatsisf+0x36>
 670:	60 ff       	sbrs	r22, 0
 672:	1b c0       	rjmp	.+54     	; 0x6aa <__floatsisf+0x6c>
 674:	6f 5f       	subi	r22, 0xFF	; 255
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	16 c0       	rjmp	.+44     	; 0x6aa <__floatsisf+0x6c>
 67e:	88 23       	and	r24, r24
 680:	11 f0       	breq	.+4      	; 0x686 <__floatsisf+0x48>
 682:	96 e9       	ldi	r25, 0x96	; 150
 684:	11 c0       	rjmp	.+34     	; 0x6a8 <__floatsisf+0x6a>
 686:	77 23       	and	r23, r23
 688:	21 f0       	breq	.+8      	; 0x692 <__floatsisf+0x54>
 68a:	9e e8       	ldi	r25, 0x8E	; 142
 68c:	87 2f       	mov	r24, r23
 68e:	76 2f       	mov	r23, r22
 690:	05 c0       	rjmp	.+10     	; 0x69c <__floatsisf+0x5e>
 692:	66 23       	and	r22, r22
 694:	71 f0       	breq	.+28     	; 0x6b2 <__floatsisf+0x74>
 696:	96 e8       	ldi	r25, 0x86	; 134
 698:	86 2f       	mov	r24, r22
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	2a f0       	brmi	.+10     	; 0x6aa <__floatsisf+0x6c>
 6a0:	9a 95       	dec	r25
 6a2:	66 0f       	add	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	88 1f       	adc	r24, r24
 6a8:	da f7       	brpl	.-10     	; 0x6a0 <__floatsisf+0x62>
 6aa:	88 0f       	add	r24, r24
 6ac:	96 95       	lsr	r25
 6ae:	87 95       	ror	r24
 6b0:	97 f9       	bld	r25, 7
 6b2:	08 95       	ret

000006b4 <__fp_inf>:
 6b4:	97 f9       	bld	r25, 7
 6b6:	9f 67       	ori	r25, 0x7F	; 127
 6b8:	80 e8       	ldi	r24, 0x80	; 128
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	08 95       	ret

000006c0 <__fp_nan>:
 6c0:	9f ef       	ldi	r25, 0xFF	; 255
 6c2:	80 ec       	ldi	r24, 0xC0	; 192
 6c4:	08 95       	ret

000006c6 <__fp_pscA>:
 6c6:	00 24       	eor	r0, r0
 6c8:	0a 94       	dec	r0
 6ca:	16 16       	cp	r1, r22
 6cc:	17 06       	cpc	r1, r23
 6ce:	18 06       	cpc	r1, r24
 6d0:	09 06       	cpc	r0, r25
 6d2:	08 95       	ret

000006d4 <__fp_pscB>:
 6d4:	00 24       	eor	r0, r0
 6d6:	0a 94       	dec	r0
 6d8:	12 16       	cp	r1, r18
 6da:	13 06       	cpc	r1, r19
 6dc:	14 06       	cpc	r1, r20
 6de:	05 06       	cpc	r0, r21
 6e0:	08 95       	ret

000006e2 <__fp_round>:
 6e2:	09 2e       	mov	r0, r25
 6e4:	03 94       	inc	r0
 6e6:	00 0c       	add	r0, r0
 6e8:	11 f4       	brne	.+4      	; 0x6ee <__fp_round+0xc>
 6ea:	88 23       	and	r24, r24
 6ec:	52 f0       	brmi	.+20     	; 0x702 <__fp_round+0x20>
 6ee:	bb 0f       	add	r27, r27
 6f0:	40 f4       	brcc	.+16     	; 0x702 <__fp_round+0x20>
 6f2:	bf 2b       	or	r27, r31
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__fp_round+0x18>
 6f6:	60 ff       	sbrs	r22, 0
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <__fp_round+0x20>
 6fa:	6f 5f       	subi	r22, 0xFF	; 255
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__fp_split3>:
 704:	57 fd       	sbrc	r21, 7
 706:	90 58       	subi	r25, 0x80	; 128
 708:	44 0f       	add	r20, r20
 70a:	55 1f       	adc	r21, r21
 70c:	59 f0       	breq	.+22     	; 0x724 <__fp_splitA+0x10>
 70e:	5f 3f       	cpi	r21, 0xFF	; 255
 710:	71 f0       	breq	.+28     	; 0x72e <__fp_splitA+0x1a>
 712:	47 95       	ror	r20

00000714 <__fp_splitA>:
 714:	88 0f       	add	r24, r24
 716:	97 fb       	bst	r25, 7
 718:	99 1f       	adc	r25, r25
 71a:	61 f0       	breq	.+24     	; 0x734 <__fp_splitA+0x20>
 71c:	9f 3f       	cpi	r25, 0xFF	; 255
 71e:	79 f0       	breq	.+30     	; 0x73e <__fp_splitA+0x2a>
 720:	87 95       	ror	r24
 722:	08 95       	ret
 724:	12 16       	cp	r1, r18
 726:	13 06       	cpc	r1, r19
 728:	14 06       	cpc	r1, r20
 72a:	55 1f       	adc	r21, r21
 72c:	f2 cf       	rjmp	.-28     	; 0x712 <__fp_split3+0xe>
 72e:	46 95       	lsr	r20
 730:	f1 df       	rcall	.-30     	; 0x714 <__fp_splitA>
 732:	08 c0       	rjmp	.+16     	; 0x744 <__fp_splitA+0x30>
 734:	16 16       	cp	r1, r22
 736:	17 06       	cpc	r1, r23
 738:	18 06       	cpc	r1, r24
 73a:	99 1f       	adc	r25, r25
 73c:	f1 cf       	rjmp	.-30     	; 0x720 <__fp_splitA+0xc>
 73e:	86 95       	lsr	r24
 740:	71 05       	cpc	r23, r1
 742:	61 05       	cpc	r22, r1
 744:	08 94       	sec
 746:	08 95       	ret

00000748 <__fp_zero>:
 748:	e8 94       	clt

0000074a <__fp_szero>:
 74a:	bb 27       	eor	r27, r27
 74c:	66 27       	eor	r22, r22
 74e:	77 27       	eor	r23, r23
 750:	cb 01       	movw	r24, r22
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret

00000756 <__udivmodsi4>:
 756:	a1 e2       	ldi	r26, 0x21	; 33
 758:	1a 2e       	mov	r1, r26
 75a:	aa 1b       	sub	r26, r26
 75c:	bb 1b       	sub	r27, r27
 75e:	fd 01       	movw	r30, r26
 760:	0d c0       	rjmp	.+26     	; 0x77c <__udivmodsi4_ep>

00000762 <__udivmodsi4_loop>:
 762:	aa 1f       	adc	r26, r26
 764:	bb 1f       	adc	r27, r27
 766:	ee 1f       	adc	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	a2 17       	cp	r26, r18
 76c:	b3 07       	cpc	r27, r19
 76e:	e4 07       	cpc	r30, r20
 770:	f5 07       	cpc	r31, r21
 772:	20 f0       	brcs	.+8      	; 0x77c <__udivmodsi4_ep>
 774:	a2 1b       	sub	r26, r18
 776:	b3 0b       	sbc	r27, r19
 778:	e4 0b       	sbc	r30, r20
 77a:	f5 0b       	sbc	r31, r21

0000077c <__udivmodsi4_ep>:
 77c:	66 1f       	adc	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	1a 94       	dec	r1
 786:	69 f7       	brne	.-38     	; 0x762 <__udivmodsi4_loop>
 788:	60 95       	com	r22
 78a:	70 95       	com	r23
 78c:	80 95       	com	r24
 78e:	90 95       	com	r25
 790:	9b 01       	movw	r18, r22
 792:	ac 01       	movw	r20, r24
 794:	bd 01       	movw	r22, r26
 796:	cf 01       	movw	r24, r30
 798:	08 95       	ret

0000079a <sprintf>:
 79a:	ae e0       	ldi	r26, 0x0E	; 14
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e3 ed       	ldi	r30, 0xD3	; 211
 7a0:	f3 e0       	ldi	r31, 0x03	; 3
 7a2:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__prologue_saves__+0x1c>
 7a6:	0d 89       	ldd	r16, Y+21	; 0x15
 7a8:	1e 89       	ldd	r17, Y+22	; 0x16
 7aa:	86 e0       	ldi	r24, 0x06	; 6
 7ac:	8c 83       	std	Y+4, r24	; 0x04
 7ae:	1a 83       	std	Y+2, r17	; 0x02
 7b0:	09 83       	std	Y+1, r16	; 0x01
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	9f e7       	ldi	r25, 0x7F	; 127
 7b6:	9e 83       	std	Y+6, r25	; 0x06
 7b8:	8d 83       	std	Y+5, r24	; 0x05
 7ba:	ae 01       	movw	r20, r28
 7bc:	47 5e       	subi	r20, 0xE7	; 231
 7be:	5f 4f       	sbci	r21, 0xFF	; 255
 7c0:	6f 89       	ldd	r22, Y+23	; 0x17
 7c2:	78 8d       	ldd	r23, Y+24	; 0x18
 7c4:	ce 01       	movw	r24, r28
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	0e 94 ef 03 	call	0x7de	; 0x7de <vfprintf>
 7cc:	ef 81       	ldd	r30, Y+7	; 0x07
 7ce:	f8 85       	ldd	r31, Y+8	; 0x08
 7d0:	e0 0f       	add	r30, r16
 7d2:	f1 1f       	adc	r31, r17
 7d4:	10 82       	st	Z, r1
 7d6:	2e 96       	adiw	r28, 0x0e	; 14
 7d8:	e4 e0       	ldi	r30, 0x04	; 4
 7da:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__epilogue_restores__+0x1c>

000007de <vfprintf>:
 7de:	ab e0       	ldi	r26, 0x0B	; 11
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	e5 ef       	ldi	r30, 0xF5	; 245
 7e4:	f3 e0       	ldi	r31, 0x03	; 3
 7e6:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__prologue_saves__>
 7ea:	6c 01       	movw	r12, r24
 7ec:	7b 01       	movw	r14, r22
 7ee:	8a 01       	movw	r16, r20
 7f0:	fc 01       	movw	r30, r24
 7f2:	17 82       	std	Z+7, r1	; 0x07
 7f4:	16 82       	std	Z+6, r1	; 0x06
 7f6:	83 81       	ldd	r24, Z+3	; 0x03
 7f8:	81 ff       	sbrs	r24, 1
 7fa:	cc c1       	rjmp	.+920    	; 0xb94 <__stack+0x95>
 7fc:	ce 01       	movw	r24, r28
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	3c 01       	movw	r6, r24
 802:	f6 01       	movw	r30, r12
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	f7 01       	movw	r30, r14
 808:	93 fd       	sbrc	r25, 3
 80a:	85 91       	lpm	r24, Z+
 80c:	93 ff       	sbrs	r25, 3
 80e:	81 91       	ld	r24, Z+
 810:	7f 01       	movw	r14, r30
 812:	88 23       	and	r24, r24
 814:	09 f4       	brne	.+2      	; 0x818 <vfprintf+0x3a>
 816:	ba c1       	rjmp	.+884    	; 0xb8c <__stack+0x8d>
 818:	85 32       	cpi	r24, 0x25	; 37
 81a:	39 f4       	brne	.+14     	; 0x82a <vfprintf+0x4c>
 81c:	93 fd       	sbrc	r25, 3
 81e:	85 91       	lpm	r24, Z+
 820:	93 ff       	sbrs	r25, 3
 822:	81 91       	ld	r24, Z+
 824:	7f 01       	movw	r14, r30
 826:	85 32       	cpi	r24, 0x25	; 37
 828:	29 f4       	brne	.+10     	; 0x834 <vfprintf+0x56>
 82a:	b6 01       	movw	r22, r12
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 832:	e7 cf       	rjmp	.-50     	; 0x802 <vfprintf+0x24>
 834:	91 2c       	mov	r9, r1
 836:	21 2c       	mov	r2, r1
 838:	31 2c       	mov	r3, r1
 83a:	ff e1       	ldi	r31, 0x1F	; 31
 83c:	f3 15       	cp	r31, r3
 83e:	d8 f0       	brcs	.+54     	; 0x876 <vfprintf+0x98>
 840:	8b 32       	cpi	r24, 0x2B	; 43
 842:	79 f0       	breq	.+30     	; 0x862 <vfprintf+0x84>
 844:	38 f4       	brcc	.+14     	; 0x854 <vfprintf+0x76>
 846:	80 32       	cpi	r24, 0x20	; 32
 848:	79 f0       	breq	.+30     	; 0x868 <vfprintf+0x8a>
 84a:	83 32       	cpi	r24, 0x23	; 35
 84c:	a1 f4       	brne	.+40     	; 0x876 <vfprintf+0x98>
 84e:	23 2d       	mov	r18, r3
 850:	20 61       	ori	r18, 0x10	; 16
 852:	1d c0       	rjmp	.+58     	; 0x88e <vfprintf+0xb0>
 854:	8d 32       	cpi	r24, 0x2D	; 45
 856:	61 f0       	breq	.+24     	; 0x870 <vfprintf+0x92>
 858:	80 33       	cpi	r24, 0x30	; 48
 85a:	69 f4       	brne	.+26     	; 0x876 <vfprintf+0x98>
 85c:	23 2d       	mov	r18, r3
 85e:	21 60       	ori	r18, 0x01	; 1
 860:	16 c0       	rjmp	.+44     	; 0x88e <vfprintf+0xb0>
 862:	83 2d       	mov	r24, r3
 864:	82 60       	ori	r24, 0x02	; 2
 866:	38 2e       	mov	r3, r24
 868:	e3 2d       	mov	r30, r3
 86a:	e4 60       	ori	r30, 0x04	; 4
 86c:	3e 2e       	mov	r3, r30
 86e:	2a c0       	rjmp	.+84     	; 0x8c4 <vfprintf+0xe6>
 870:	f3 2d       	mov	r31, r3
 872:	f8 60       	ori	r31, 0x08	; 8
 874:	1d c0       	rjmp	.+58     	; 0x8b0 <vfprintf+0xd2>
 876:	37 fc       	sbrc	r3, 7
 878:	2d c0       	rjmp	.+90     	; 0x8d4 <vfprintf+0xf6>
 87a:	20 ed       	ldi	r18, 0xD0	; 208
 87c:	28 0f       	add	r18, r24
 87e:	2a 30       	cpi	r18, 0x0A	; 10
 880:	40 f0       	brcs	.+16     	; 0x892 <vfprintf+0xb4>
 882:	8e 32       	cpi	r24, 0x2E	; 46
 884:	b9 f4       	brne	.+46     	; 0x8b4 <vfprintf+0xd6>
 886:	36 fc       	sbrc	r3, 6
 888:	81 c1       	rjmp	.+770    	; 0xb8c <__stack+0x8d>
 88a:	23 2d       	mov	r18, r3
 88c:	20 64       	ori	r18, 0x40	; 64
 88e:	32 2e       	mov	r3, r18
 890:	19 c0       	rjmp	.+50     	; 0x8c4 <vfprintf+0xe6>
 892:	36 fe       	sbrs	r3, 6
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <vfprintf+0xc4>
 896:	8a e0       	ldi	r24, 0x0A	; 10
 898:	98 9e       	mul	r9, r24
 89a:	20 0d       	add	r18, r0
 89c:	11 24       	eor	r1, r1
 89e:	92 2e       	mov	r9, r18
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <vfprintf+0xe6>
 8a2:	ea e0       	ldi	r30, 0x0A	; 10
 8a4:	2e 9e       	mul	r2, r30
 8a6:	20 0d       	add	r18, r0
 8a8:	11 24       	eor	r1, r1
 8aa:	22 2e       	mov	r2, r18
 8ac:	f3 2d       	mov	r31, r3
 8ae:	f0 62       	ori	r31, 0x20	; 32
 8b0:	3f 2e       	mov	r3, r31
 8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <vfprintf+0xe6>
 8b4:	8c 36       	cpi	r24, 0x6C	; 108
 8b6:	21 f4       	brne	.+8      	; 0x8c0 <vfprintf+0xe2>
 8b8:	83 2d       	mov	r24, r3
 8ba:	80 68       	ori	r24, 0x80	; 128
 8bc:	38 2e       	mov	r3, r24
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <vfprintf+0xe6>
 8c0:	88 36       	cpi	r24, 0x68	; 104
 8c2:	41 f4       	brne	.+16     	; 0x8d4 <vfprintf+0xf6>
 8c4:	f7 01       	movw	r30, r14
 8c6:	93 fd       	sbrc	r25, 3
 8c8:	85 91       	lpm	r24, Z+
 8ca:	93 ff       	sbrs	r25, 3
 8cc:	81 91       	ld	r24, Z+
 8ce:	7f 01       	movw	r14, r30
 8d0:	81 11       	cpse	r24, r1
 8d2:	b3 cf       	rjmp	.-154    	; 0x83a <vfprintf+0x5c>
 8d4:	98 2f       	mov	r25, r24
 8d6:	9f 7d       	andi	r25, 0xDF	; 223
 8d8:	95 54       	subi	r25, 0x45	; 69
 8da:	93 30       	cpi	r25, 0x03	; 3
 8dc:	28 f4       	brcc	.+10     	; 0x8e8 <vfprintf+0x10a>
 8de:	0c 5f       	subi	r16, 0xFC	; 252
 8e0:	1f 4f       	sbci	r17, 0xFF	; 255
 8e2:	9f e3       	ldi	r25, 0x3F	; 63
 8e4:	99 83       	std	Y+1, r25	; 0x01
 8e6:	0d c0       	rjmp	.+26     	; 0x902 <vfprintf+0x124>
 8e8:	83 36       	cpi	r24, 0x63	; 99
 8ea:	31 f0       	breq	.+12     	; 0x8f8 <vfprintf+0x11a>
 8ec:	83 37       	cpi	r24, 0x73	; 115
 8ee:	71 f0       	breq	.+28     	; 0x90c <vfprintf+0x12e>
 8f0:	83 35       	cpi	r24, 0x53	; 83
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <vfprintf+0x118>
 8f4:	59 c0       	rjmp	.+178    	; 0x9a8 <vfprintf+0x1ca>
 8f6:	21 c0       	rjmp	.+66     	; 0x93a <vfprintf+0x15c>
 8f8:	f8 01       	movw	r30, r16
 8fa:	80 81       	ld	r24, Z
 8fc:	89 83       	std	Y+1, r24	; 0x01
 8fe:	0e 5f       	subi	r16, 0xFE	; 254
 900:	1f 4f       	sbci	r17, 0xFF	; 255
 902:	88 24       	eor	r8, r8
 904:	83 94       	inc	r8
 906:	91 2c       	mov	r9, r1
 908:	53 01       	movw	r10, r6
 90a:	13 c0       	rjmp	.+38     	; 0x932 <vfprintf+0x154>
 90c:	28 01       	movw	r4, r16
 90e:	f2 e0       	ldi	r31, 0x02	; 2
 910:	4f 0e       	add	r4, r31
 912:	51 1c       	adc	r5, r1
 914:	f8 01       	movw	r30, r16
 916:	a0 80       	ld	r10, Z
 918:	b1 80       	ldd	r11, Z+1	; 0x01
 91a:	36 fe       	sbrs	r3, 6
 91c:	03 c0       	rjmp	.+6      	; 0x924 <vfprintf+0x146>
 91e:	69 2d       	mov	r22, r9
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x14a>
 924:	6f ef       	ldi	r22, 0xFF	; 255
 926:	7f ef       	ldi	r23, 0xFF	; 255
 928:	c5 01       	movw	r24, r10
 92a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <strnlen>
 92e:	4c 01       	movw	r8, r24
 930:	82 01       	movw	r16, r4
 932:	f3 2d       	mov	r31, r3
 934:	ff 77       	andi	r31, 0x7F	; 127
 936:	3f 2e       	mov	r3, r31
 938:	16 c0       	rjmp	.+44     	; 0x966 <vfprintf+0x188>
 93a:	28 01       	movw	r4, r16
 93c:	22 e0       	ldi	r18, 0x02	; 2
 93e:	42 0e       	add	r4, r18
 940:	51 1c       	adc	r5, r1
 942:	f8 01       	movw	r30, r16
 944:	a0 80       	ld	r10, Z
 946:	b1 80       	ldd	r11, Z+1	; 0x01
 948:	36 fe       	sbrs	r3, 6
 94a:	03 c0       	rjmp	.+6      	; 0x952 <vfprintf+0x174>
 94c:	69 2d       	mov	r22, r9
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x178>
 952:	6f ef       	ldi	r22, 0xFF	; 255
 954:	7f ef       	ldi	r23, 0xFF	; 255
 956:	c5 01       	movw	r24, r10
 958:	0e 94 d0 05 	call	0xba0	; 0xba0 <strnlen_P>
 95c:	4c 01       	movw	r8, r24
 95e:	f3 2d       	mov	r31, r3
 960:	f0 68       	ori	r31, 0x80	; 128
 962:	3f 2e       	mov	r3, r31
 964:	82 01       	movw	r16, r4
 966:	33 fc       	sbrc	r3, 3
 968:	1b c0       	rjmp	.+54     	; 0x9a0 <vfprintf+0x1c2>
 96a:	82 2d       	mov	r24, r2
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	88 16       	cp	r8, r24
 970:	99 06       	cpc	r9, r25
 972:	b0 f4       	brcc	.+44     	; 0x9a0 <vfprintf+0x1c2>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 97e:	2a 94       	dec	r2
 980:	f4 cf       	rjmp	.-24     	; 0x96a <vfprintf+0x18c>
 982:	f5 01       	movw	r30, r10
 984:	37 fc       	sbrc	r3, 7
 986:	85 91       	lpm	r24, Z+
 988:	37 fe       	sbrs	r3, 7
 98a:	81 91       	ld	r24, Z+
 98c:	5f 01       	movw	r10, r30
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 996:	21 10       	cpse	r2, r1
 998:	2a 94       	dec	r2
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	82 1a       	sub	r8, r18
 99e:	91 08       	sbc	r9, r1
 9a0:	81 14       	cp	r8, r1
 9a2:	91 04       	cpc	r9, r1
 9a4:	71 f7       	brne	.-36     	; 0x982 <vfprintf+0x1a4>
 9a6:	e8 c0       	rjmp	.+464    	; 0xb78 <__stack+0x79>
 9a8:	84 36       	cpi	r24, 0x64	; 100
 9aa:	11 f0       	breq	.+4      	; 0x9b0 <vfprintf+0x1d2>
 9ac:	89 36       	cpi	r24, 0x69	; 105
 9ae:	41 f5       	brne	.+80     	; 0xa00 <__DATA_REGION_LENGTH__>
 9b0:	f8 01       	movw	r30, r16
 9b2:	37 fe       	sbrs	r3, 7
 9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <vfprintf+0x1e6>
 9b6:	60 81       	ld	r22, Z
 9b8:	71 81       	ldd	r23, Z+1	; 0x01
 9ba:	82 81       	ldd	r24, Z+2	; 0x02
 9bc:	93 81       	ldd	r25, Z+3	; 0x03
 9be:	0c 5f       	subi	r16, 0xFC	; 252
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <vfprintf+0x1f6>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	07 2e       	mov	r0, r23
 9ca:	00 0c       	add	r0, r0
 9cc:	88 0b       	sbc	r24, r24
 9ce:	99 0b       	sbc	r25, r25
 9d0:	0e 5f       	subi	r16, 0xFE	; 254
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	f3 2d       	mov	r31, r3
 9d6:	ff 76       	andi	r31, 0x6F	; 111
 9d8:	3f 2e       	mov	r3, r31
 9da:	97 ff       	sbrs	r25, 7
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <vfprintf+0x212>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	f0 68       	ori	r31, 0x80	; 128
 9ee:	3f 2e       	mov	r3, r31
 9f0:	2a e0       	ldi	r18, 0x0A	; 10
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	a3 01       	movw	r20, r6
 9f6:	0e 94 22 06 	call	0xc44	; 0xc44 <__ultoa_invert>
 9fa:	88 2e       	mov	r8, r24
 9fc:	86 18       	sub	r8, r6
 9fe:	45 c0       	rjmp	.+138    	; 0xa8a <__DATA_REGION_LENGTH__+0x8a>
 a00:	85 37       	cpi	r24, 0x75	; 117
 a02:	31 f4       	brne	.+12     	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
 a04:	23 2d       	mov	r18, r3
 a06:	2f 7e       	andi	r18, 0xEF	; 239
 a08:	b2 2e       	mov	r11, r18
 a0a:	2a e0       	ldi	r18, 0x0A	; 10
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	25 c0       	rjmp	.+74     	; 0xa5a <__DATA_REGION_LENGTH__+0x5a>
 a10:	93 2d       	mov	r25, r3
 a12:	99 7f       	andi	r25, 0xF9	; 249
 a14:	b9 2e       	mov	r11, r25
 a16:	8f 36       	cpi	r24, 0x6F	; 111
 a18:	c1 f0       	breq	.+48     	; 0xa4a <__DATA_REGION_LENGTH__+0x4a>
 a1a:	18 f4       	brcc	.+6      	; 0xa22 <__DATA_REGION_LENGTH__+0x22>
 a1c:	88 35       	cpi	r24, 0x58	; 88
 a1e:	79 f0       	breq	.+30     	; 0xa3e <__DATA_REGION_LENGTH__+0x3e>
 a20:	b5 c0       	rjmp	.+362    	; 0xb8c <__stack+0x8d>
 a22:	80 37       	cpi	r24, 0x70	; 112
 a24:	19 f0       	breq	.+6      	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 a26:	88 37       	cpi	r24, 0x78	; 120
 a28:	21 f0       	breq	.+8      	; 0xa32 <__DATA_REGION_LENGTH__+0x32>
 a2a:	b0 c0       	rjmp	.+352    	; 0xb8c <__stack+0x8d>
 a2c:	e9 2f       	mov	r30, r25
 a2e:	e0 61       	ori	r30, 0x10	; 16
 a30:	be 2e       	mov	r11, r30
 a32:	b4 fe       	sbrs	r11, 4
 a34:	0d c0       	rjmp	.+26     	; 0xa50 <__DATA_REGION_LENGTH__+0x50>
 a36:	fb 2d       	mov	r31, r11
 a38:	f4 60       	ori	r31, 0x04	; 4
 a3a:	bf 2e       	mov	r11, r31
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <__DATA_REGION_LENGTH__+0x50>
 a3e:	34 fe       	sbrs	r3, 4
 a40:	0a c0       	rjmp	.+20     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
 a42:	29 2f       	mov	r18, r25
 a44:	26 60       	ori	r18, 0x06	; 6
 a46:	b2 2e       	mov	r11, r18
 a48:	06 c0       	rjmp	.+12     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
 a4a:	28 e0       	ldi	r18, 0x08	; 8
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	05 c0       	rjmp	.+10     	; 0xa5a <__DATA_REGION_LENGTH__+0x5a>
 a50:	20 e1       	ldi	r18, 0x10	; 16
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <__DATA_REGION_LENGTH__+0x5a>
 a56:	20 e1       	ldi	r18, 0x10	; 16
 a58:	32 e0       	ldi	r19, 0x02	; 2
 a5a:	f8 01       	movw	r30, r16
 a5c:	b7 fe       	sbrs	r11, 7
 a5e:	07 c0       	rjmp	.+14     	; 0xa6e <__DATA_REGION_LENGTH__+0x6e>
 a60:	60 81       	ld	r22, Z
 a62:	71 81       	ldd	r23, Z+1	; 0x01
 a64:	82 81       	ldd	r24, Z+2	; 0x02
 a66:	93 81       	ldd	r25, Z+3	; 0x03
 a68:	0c 5f       	subi	r16, 0xFC	; 252
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <__DATA_REGION_LENGTH__+0x7a>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 5f       	subi	r16, 0xFE	; 254
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	a3 01       	movw	r20, r6
 a7c:	0e 94 22 06 	call	0xc44	; 0xc44 <__ultoa_invert>
 a80:	88 2e       	mov	r8, r24
 a82:	86 18       	sub	r8, r6
 a84:	fb 2d       	mov	r31, r11
 a86:	ff 77       	andi	r31, 0x7F	; 127
 a88:	3f 2e       	mov	r3, r31
 a8a:	36 fe       	sbrs	r3, 6
 a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__DATA_REGION_LENGTH__+0xa8>
 a8e:	23 2d       	mov	r18, r3
 a90:	2e 7f       	andi	r18, 0xFE	; 254
 a92:	a2 2e       	mov	r10, r18
 a94:	89 14       	cp	r8, r9
 a96:	58 f4       	brcc	.+22     	; 0xaae <__DATA_REGION_LENGTH__+0xae>
 a98:	34 fe       	sbrs	r3, 4
 a9a:	0b c0       	rjmp	.+22     	; 0xab2 <__DATA_REGION_LENGTH__+0xb2>
 a9c:	32 fc       	sbrc	r3, 2
 a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__DATA_REGION_LENGTH__+0xb2>
 aa0:	83 2d       	mov	r24, r3
 aa2:	8e 7e       	andi	r24, 0xEE	; 238
 aa4:	a8 2e       	mov	r10, r24
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <__DATA_REGION_LENGTH__+0xb2>
 aa8:	b8 2c       	mov	r11, r8
 aaa:	a3 2c       	mov	r10, r3
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <__DATA_REGION_LENGTH__+0xb4>
 aae:	b8 2c       	mov	r11, r8
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <__DATA_REGION_LENGTH__+0xb4>
 ab2:	b9 2c       	mov	r11, r9
 ab4:	a4 fe       	sbrs	r10, 4
 ab6:	0f c0       	rjmp	.+30     	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 ab8:	fe 01       	movw	r30, r28
 aba:	e8 0d       	add	r30, r8
 abc:	f1 1d       	adc	r31, r1
 abe:	80 81       	ld	r24, Z
 ac0:	80 33       	cpi	r24, 0x30	; 48
 ac2:	21 f4       	brne	.+8      	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 ac4:	9a 2d       	mov	r25, r10
 ac6:	99 7e       	andi	r25, 0xE9	; 233
 ac8:	a9 2e       	mov	r10, r25
 aca:	09 c0       	rjmp	.+18     	; 0xade <__DATA_REGION_LENGTH__+0xde>
 acc:	a2 fe       	sbrs	r10, 2
 ace:	06 c0       	rjmp	.+12     	; 0xadc <__DATA_REGION_LENGTH__+0xdc>
 ad0:	b3 94       	inc	r11
 ad2:	b3 94       	inc	r11
 ad4:	04 c0       	rjmp	.+8      	; 0xade <__DATA_REGION_LENGTH__+0xde>
 ad6:	8a 2d       	mov	r24, r10
 ad8:	86 78       	andi	r24, 0x86	; 134
 ada:	09 f0       	breq	.+2      	; 0xade <__DATA_REGION_LENGTH__+0xde>
 adc:	b3 94       	inc	r11
 ade:	a3 fc       	sbrc	r10, 3
 ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__stack+0x5>
 ae2:	a0 fe       	sbrs	r10, 0
 ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <__DATA_REGION_LENGTH__+0xf2>
 ae6:	b2 14       	cp	r11, r2
 ae8:	88 f4       	brcc	.+34     	; 0xb0c <__stack+0xd>
 aea:	28 0c       	add	r2, r8
 aec:	92 2c       	mov	r9, r2
 aee:	9b 18       	sub	r9, r11
 af0:	0e c0       	rjmp	.+28     	; 0xb0e <__stack+0xf>
 af2:	b2 14       	cp	r11, r2
 af4:	60 f4       	brcc	.+24     	; 0xb0e <__stack+0xf>
 af6:	b6 01       	movw	r22, r12
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 b00:	b3 94       	inc	r11
 b02:	f7 cf       	rjmp	.-18     	; 0xaf2 <__DATA_REGION_LENGTH__+0xf2>
 b04:	b2 14       	cp	r11, r2
 b06:	18 f4       	brcc	.+6      	; 0xb0e <__stack+0xf>
 b08:	2b 18       	sub	r2, r11
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <__stack+0x11>
 b0c:	98 2c       	mov	r9, r8
 b0e:	21 2c       	mov	r2, r1
 b10:	a4 fe       	sbrs	r10, 4
 b12:	10 c0       	rjmp	.+32     	; 0xb34 <__stack+0x35>
 b14:	b6 01       	movw	r22, r12
 b16:	80 e3       	ldi	r24, 0x30	; 48
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 b1e:	a2 fe       	sbrs	r10, 2
 b20:	17 c0       	rjmp	.+46     	; 0xb50 <__stack+0x51>
 b22:	a1 fc       	sbrc	r10, 1
 b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x2d>
 b26:	88 e7       	ldi	r24, 0x78	; 120
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__stack+0x31>
 b2c:	88 e5       	ldi	r24, 0x58	; 88
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	b6 01       	movw	r22, r12
 b32:	0c c0       	rjmp	.+24     	; 0xb4c <__stack+0x4d>
 b34:	8a 2d       	mov	r24, r10
 b36:	86 78       	andi	r24, 0x86	; 134
 b38:	59 f0       	breq	.+22     	; 0xb50 <__stack+0x51>
 b3a:	a1 fe       	sbrs	r10, 1
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <__stack+0x43>
 b3e:	8b e2       	ldi	r24, 0x2B	; 43
 b40:	01 c0       	rjmp	.+2      	; 0xb44 <__stack+0x45>
 b42:	80 e2       	ldi	r24, 0x20	; 32
 b44:	a7 fc       	sbrc	r10, 7
 b46:	8d e2       	ldi	r24, 0x2D	; 45
 b48:	b6 01       	movw	r22, r12
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 b50:	89 14       	cp	r8, r9
 b52:	38 f4       	brcc	.+14     	; 0xb62 <__stack+0x63>
 b54:	b6 01       	movw	r22, r12
 b56:	80 e3       	ldi	r24, 0x30	; 48
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 b5e:	9a 94       	dec	r9
 b60:	f7 cf       	rjmp	.-18     	; 0xb50 <__stack+0x51>
 b62:	8a 94       	dec	r8
 b64:	f3 01       	movw	r30, r6
 b66:	e8 0d       	add	r30, r8
 b68:	f1 1d       	adc	r31, r1
 b6a:	80 81       	ld	r24, Z
 b6c:	b6 01       	movw	r22, r12
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 b74:	81 10       	cpse	r8, r1
 b76:	f5 cf       	rjmp	.-22     	; 0xb62 <__stack+0x63>
 b78:	22 20       	and	r2, r2
 b7a:	09 f4       	brne	.+2      	; 0xb7e <__stack+0x7f>
 b7c:	42 ce       	rjmp	.-892    	; 0x802 <vfprintf+0x24>
 b7e:	b6 01       	movw	r22, r12
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputc>
 b88:	2a 94       	dec	r2
 b8a:	f6 cf       	rjmp	.-20     	; 0xb78 <__stack+0x79>
 b8c:	f6 01       	movw	r30, r12
 b8e:	86 81       	ldd	r24, Z+6	; 0x06
 b90:	97 81       	ldd	r25, Z+7	; 0x07
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <__stack+0x99>
 b94:	8f ef       	ldi	r24, 0xFF	; 255
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	2b 96       	adiw	r28, 0x0b	; 11
 b9a:	e2 e1       	ldi	r30, 0x12	; 18
 b9c:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__epilogue_restores__>

00000ba0 <strnlen_P>:
 ba0:	fc 01       	movw	r30, r24
 ba2:	05 90       	lpm	r0, Z+
 ba4:	61 50       	subi	r22, 0x01	; 1
 ba6:	70 40       	sbci	r23, 0x00	; 0
 ba8:	01 10       	cpse	r0, r1
 baa:	d8 f7       	brcc	.-10     	; 0xba2 <strnlen_P+0x2>
 bac:	80 95       	com	r24
 bae:	90 95       	com	r25
 bb0:	8e 0f       	add	r24, r30
 bb2:	9f 1f       	adc	r25, r31
 bb4:	08 95       	ret

00000bb6 <strnlen>:
 bb6:	fc 01       	movw	r30, r24
 bb8:	61 50       	subi	r22, 0x01	; 1
 bba:	70 40       	sbci	r23, 0x00	; 0
 bbc:	01 90       	ld	r0, Z+
 bbe:	01 10       	cpse	r0, r1
 bc0:	d8 f7       	brcc	.-10     	; 0xbb8 <strnlen+0x2>
 bc2:	80 95       	com	r24
 bc4:	90 95       	com	r25
 bc6:	8e 0f       	add	r24, r30
 bc8:	9f 1f       	adc	r25, r31
 bca:	08 95       	ret

00000bcc <fputc>:
 bcc:	0f 93       	push	r16
 bce:	1f 93       	push	r17
 bd0:	cf 93       	push	r28
 bd2:	df 93       	push	r29
 bd4:	fb 01       	movw	r30, r22
 bd6:	23 81       	ldd	r18, Z+3	; 0x03
 bd8:	21 fd       	sbrc	r18, 1
 bda:	03 c0       	rjmp	.+6      	; 0xbe2 <fputc+0x16>
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	9f ef       	ldi	r25, 0xFF	; 255
 be0:	2c c0       	rjmp	.+88     	; 0xc3a <fputc+0x6e>
 be2:	22 ff       	sbrs	r18, 2
 be4:	16 c0       	rjmp	.+44     	; 0xc12 <fputc+0x46>
 be6:	46 81       	ldd	r20, Z+6	; 0x06
 be8:	57 81       	ldd	r21, Z+7	; 0x07
 bea:	24 81       	ldd	r18, Z+4	; 0x04
 bec:	35 81       	ldd	r19, Z+5	; 0x05
 bee:	42 17       	cp	r20, r18
 bf0:	53 07       	cpc	r21, r19
 bf2:	44 f4       	brge	.+16     	; 0xc04 <fputc+0x38>
 bf4:	a0 81       	ld	r26, Z
 bf6:	b1 81       	ldd	r27, Z+1	; 0x01
 bf8:	9d 01       	movw	r18, r26
 bfa:	2f 5f       	subi	r18, 0xFF	; 255
 bfc:	3f 4f       	sbci	r19, 0xFF	; 255
 bfe:	31 83       	std	Z+1, r19	; 0x01
 c00:	20 83       	st	Z, r18
 c02:	8c 93       	st	X, r24
 c04:	26 81       	ldd	r18, Z+6	; 0x06
 c06:	37 81       	ldd	r19, Z+7	; 0x07
 c08:	2f 5f       	subi	r18, 0xFF	; 255
 c0a:	3f 4f       	sbci	r19, 0xFF	; 255
 c0c:	37 83       	std	Z+7, r19	; 0x07
 c0e:	26 83       	std	Z+6, r18	; 0x06
 c10:	14 c0       	rjmp	.+40     	; 0xc3a <fputc+0x6e>
 c12:	8b 01       	movw	r16, r22
 c14:	ec 01       	movw	r28, r24
 c16:	fb 01       	movw	r30, r22
 c18:	00 84       	ldd	r0, Z+8	; 0x08
 c1a:	f1 85       	ldd	r31, Z+9	; 0x09
 c1c:	e0 2d       	mov	r30, r0
 c1e:	09 95       	icall
 c20:	89 2b       	or	r24, r25
 c22:	e1 f6       	brne	.-72     	; 0xbdc <fputc+0x10>
 c24:	d8 01       	movw	r26, r16
 c26:	16 96       	adiw	r26, 0x06	; 6
 c28:	8d 91       	ld	r24, X+
 c2a:	9c 91       	ld	r25, X
 c2c:	17 97       	sbiw	r26, 0x07	; 7
 c2e:	01 96       	adiw	r24, 0x01	; 1
 c30:	17 96       	adiw	r26, 0x07	; 7
 c32:	9c 93       	st	X, r25
 c34:	8e 93       	st	-X, r24
 c36:	16 97       	sbiw	r26, 0x06	; 6
 c38:	ce 01       	movw	r24, r28
 c3a:	df 91       	pop	r29
 c3c:	cf 91       	pop	r28
 c3e:	1f 91       	pop	r17
 c40:	0f 91       	pop	r16
 c42:	08 95       	ret

00000c44 <__ultoa_invert>:
 c44:	fa 01       	movw	r30, r20
 c46:	aa 27       	eor	r26, r26
 c48:	28 30       	cpi	r18, 0x08	; 8
 c4a:	51 f1       	breq	.+84     	; 0xca0 <__ultoa_invert+0x5c>
 c4c:	20 31       	cpi	r18, 0x10	; 16
 c4e:	81 f1       	breq	.+96     	; 0xcb0 <__ultoa_invert+0x6c>
 c50:	e8 94       	clt
 c52:	6f 93       	push	r22
 c54:	6e 7f       	andi	r22, 0xFE	; 254
 c56:	6e 5f       	subi	r22, 0xFE	; 254
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	8f 4f       	sbci	r24, 0xFF	; 255
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	af 4f       	sbci	r26, 0xFF	; 255
 c60:	b1 e0       	ldi	r27, 0x01	; 1
 c62:	3e d0       	rcall	.+124    	; 0xce0 <__ultoa_invert+0x9c>
 c64:	b4 e0       	ldi	r27, 0x04	; 4
 c66:	3c d0       	rcall	.+120    	; 0xce0 <__ultoa_invert+0x9c>
 c68:	67 0f       	add	r22, r23
 c6a:	78 1f       	adc	r23, r24
 c6c:	89 1f       	adc	r24, r25
 c6e:	9a 1f       	adc	r25, r26
 c70:	a1 1d       	adc	r26, r1
 c72:	68 0f       	add	r22, r24
 c74:	79 1f       	adc	r23, r25
 c76:	8a 1f       	adc	r24, r26
 c78:	91 1d       	adc	r25, r1
 c7a:	a1 1d       	adc	r26, r1
 c7c:	6a 0f       	add	r22, r26
 c7e:	71 1d       	adc	r23, r1
 c80:	81 1d       	adc	r24, r1
 c82:	91 1d       	adc	r25, r1
 c84:	a1 1d       	adc	r26, r1
 c86:	20 d0       	rcall	.+64     	; 0xcc8 <__ultoa_invert+0x84>
 c88:	09 f4       	brne	.+2      	; 0xc8c <__ultoa_invert+0x48>
 c8a:	68 94       	set
 c8c:	3f 91       	pop	r19
 c8e:	2a e0       	ldi	r18, 0x0A	; 10
 c90:	26 9f       	mul	r18, r22
 c92:	11 24       	eor	r1, r1
 c94:	30 19       	sub	r19, r0
 c96:	30 5d       	subi	r19, 0xD0	; 208
 c98:	31 93       	st	Z+, r19
 c9a:	de f6       	brtc	.-74     	; 0xc52 <__ultoa_invert+0xe>
 c9c:	cf 01       	movw	r24, r30
 c9e:	08 95       	ret
 ca0:	46 2f       	mov	r20, r22
 ca2:	47 70       	andi	r20, 0x07	; 7
 ca4:	40 5d       	subi	r20, 0xD0	; 208
 ca6:	41 93       	st	Z+, r20
 ca8:	b3 e0       	ldi	r27, 0x03	; 3
 caa:	0f d0       	rcall	.+30     	; 0xcca <__ultoa_invert+0x86>
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__ultoa_invert+0x5c>
 cae:	f6 cf       	rjmp	.-20     	; 0xc9c <__ultoa_invert+0x58>
 cb0:	46 2f       	mov	r20, r22
 cb2:	4f 70       	andi	r20, 0x0F	; 15
 cb4:	40 5d       	subi	r20, 0xD0	; 208
 cb6:	4a 33       	cpi	r20, 0x3A	; 58
 cb8:	18 f0       	brcs	.+6      	; 0xcc0 <__ultoa_invert+0x7c>
 cba:	49 5d       	subi	r20, 0xD9	; 217
 cbc:	31 fd       	sbrc	r19, 1
 cbe:	40 52       	subi	r20, 0x20	; 32
 cc0:	41 93       	st	Z+, r20
 cc2:	02 d0       	rcall	.+4      	; 0xcc8 <__ultoa_invert+0x84>
 cc4:	a9 f7       	brne	.-22     	; 0xcb0 <__ultoa_invert+0x6c>
 cc6:	ea cf       	rjmp	.-44     	; 0xc9c <__ultoa_invert+0x58>
 cc8:	b4 e0       	ldi	r27, 0x04	; 4
 cca:	a6 95       	lsr	r26
 ccc:	97 95       	ror	r25
 cce:	87 95       	ror	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	ba 95       	dec	r27
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__ultoa_invert+0x86>
 cd8:	00 97       	sbiw	r24, 0x00	; 0
 cda:	61 05       	cpc	r22, r1
 cdc:	71 05       	cpc	r23, r1
 cde:	08 95       	ret
 ce0:	9b 01       	movw	r18, r22
 ce2:	ac 01       	movw	r20, r24
 ce4:	0a 2e       	mov	r0, r26
 ce6:	06 94       	lsr	r0
 ce8:	57 95       	ror	r21
 cea:	47 95       	ror	r20
 cec:	37 95       	ror	r19
 cee:	27 95       	ror	r18
 cf0:	ba 95       	dec	r27
 cf2:	c9 f7       	brne	.-14     	; 0xce6 <__ultoa_invert+0xa2>
 cf4:	62 0f       	add	r22, r18
 cf6:	73 1f       	adc	r23, r19
 cf8:	84 1f       	adc	r24, r20
 cfa:	95 1f       	adc	r25, r21
 cfc:	a0 1d       	adc	r26, r0
 cfe:	08 95       	ret

00000d00 <__prologue_saves__>:
 d00:	2f 92       	push	r2
 d02:	3f 92       	push	r3
 d04:	4f 92       	push	r4
 d06:	5f 92       	push	r5
 d08:	6f 92       	push	r6
 d0a:	7f 92       	push	r7
 d0c:	8f 92       	push	r8
 d0e:	9f 92       	push	r9
 d10:	af 92       	push	r10
 d12:	bf 92       	push	r11
 d14:	cf 92       	push	r12
 d16:	df 92       	push	r13
 d18:	ef 92       	push	r14
 d1a:	ff 92       	push	r15
 d1c:	0f 93       	push	r16
 d1e:	1f 93       	push	r17
 d20:	cf 93       	push	r28
 d22:	df 93       	push	r29
 d24:	cd b7       	in	r28, 0x3d	; 61
 d26:	de b7       	in	r29, 0x3e	; 62
 d28:	ca 1b       	sub	r28, r26
 d2a:	db 0b       	sbc	r29, r27
 d2c:	0f b6       	in	r0, 0x3f	; 63
 d2e:	f8 94       	cli
 d30:	de bf       	out	0x3e, r29	; 62
 d32:	0f be       	out	0x3f, r0	; 63
 d34:	cd bf       	out	0x3d, r28	; 61
 d36:	09 94       	ijmp

00000d38 <__epilogue_restores__>:
 d38:	2a 88       	ldd	r2, Y+18	; 0x12
 d3a:	39 88       	ldd	r3, Y+17	; 0x11
 d3c:	48 88       	ldd	r4, Y+16	; 0x10
 d3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 d40:	6e 84       	ldd	r6, Y+14	; 0x0e
 d42:	7d 84       	ldd	r7, Y+13	; 0x0d
 d44:	8c 84       	ldd	r8, Y+12	; 0x0c
 d46:	9b 84       	ldd	r9, Y+11	; 0x0b
 d48:	aa 84       	ldd	r10, Y+10	; 0x0a
 d4a:	b9 84       	ldd	r11, Y+9	; 0x09
 d4c:	c8 84       	ldd	r12, Y+8	; 0x08
 d4e:	df 80       	ldd	r13, Y+7	; 0x07
 d50:	ee 80       	ldd	r14, Y+6	; 0x06
 d52:	fd 80       	ldd	r15, Y+5	; 0x05
 d54:	0c 81       	ldd	r16, Y+4	; 0x04
 d56:	1b 81       	ldd	r17, Y+3	; 0x03
 d58:	aa 81       	ldd	r26, Y+2	; 0x02
 d5a:	b9 81       	ldd	r27, Y+1	; 0x01
 d5c:	ce 0f       	add	r28, r30
 d5e:	d1 1d       	adc	r29, r1
 d60:	0f b6       	in	r0, 0x3f	; 63
 d62:	f8 94       	cli
 d64:	de bf       	out	0x3e, r29	; 62
 d66:	0f be       	out	0x3f, r0	; 63
 d68:	cd bf       	out	0x3d, r28	; 61
 d6a:	ed 01       	movw	r28, r26
 d6c:	08 95       	ret

00000d6e <_exit>:
 d6e:	f8 94       	cli

00000d70 <__stop_program>:
 d70:	ff cf       	rjmp	.-2      	; 0xd70 <__stop_program>
