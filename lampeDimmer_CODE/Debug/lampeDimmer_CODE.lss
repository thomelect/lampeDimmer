
lampeDimmer_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000e2c  00000ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800106  00800106  00000ec6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e2  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfe  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000646  00000000  00000000  00002f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072f  00000000  00000000  0000378c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f4  00000000  00000000  00003ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000044af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_25>
  68:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_26>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec e2       	ldi	r30, 0x2C	; 44
  c0:	fe e0       	ldi	r31, 0x0E	; 14
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 3b       	cpi	r26, 0xB0	; 176
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 84 01 	call	0x308	; 0x308 <main>
  e2:	0c 94 14 07 	jmp	0xe28	; 0xe28 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
	//ADCSRA = ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	//ADCSRB = ADHSM ACME MUX5 – ADTS3 ADTS2 ADTS1 ADTS0
	//DIDR0 = ADC7D ADC6D ADC5D ADC4D - - ADC1D ADC0D
	//DIDR2 = - - ADC13D ADC12D ADC11D ADC10D ADC9D ADC8D
	
	ADMUX = (1<<REFS0); //Référence sur AVcc avec un condensateur sur la broche AREF.
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enable / ADC diviseur = 128 (le plus lent possible).
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = (1<<ADHSM);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = (1<<ADC0D); //entrée numérique désactivée pour le ADC0.
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 102:	08 95       	ret

00000104 <adcRead>:
}

uint16_t adcRead(void)
{
	ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //On attend que la lecture du ADC soir terminée.
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <adcRead+0xa>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 11c:	08 95       	ret

0000011e <adcRead8>:

uint8_t adcRead8(void)
{
	return (adcRead() >> 2);
 11e:	0e 94 82 00 	call	0x104	; 0x104 <adcRead>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	08 95       	ret

0000012c <__vector_21>:

/**
*@brief Interruption de la comparaison sur OCR0A (timer0) qui met msFlag à 1 lorsque msCnt atteint TIMER_CNT_CYCLE qui est définie dans le define. msCnt est incrémenté à chaques 1ms.
*/
ISR(TIMER0_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	msCnt++;
 13a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <msCnt>
 13e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <msCnt+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <msCnt+0x1>
 148:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <msCnt>
	if (msCnt >= TIMER_CNT_CYCLE)
 14c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <msCnt>
 150:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <msCnt+0x1>
 154:	49 97       	sbiw	r24, 0x19	; 25
 156:	60 f0       	brcs	.+24     	; 0x170 <__vector_21+0x44>
	{
		msCnt -= TIMER_CNT_CYCLE;
 158:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <msCnt>
 15c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <msCnt+0x1>
 160:	49 97       	sbiw	r24, 0x19	; 25
 162:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <msCnt+0x1>
 166:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <msCnt>
		msFlag = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <msFlag>
	}
}
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <execRxCommand>:

void execRxCommand()
{
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	00 d0       	rcall	.+0      	; 0x18c <execRxCommand+0xe>
 18c:	00 d0       	rcall	.+0      	; 0x18e <execRxCommand+0x10>
 18e:	1f 92       	push	r1
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
	switch (rxCommande)
 194:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rxCommande>
 198:	88 23       	and	r24, r24
 19a:	19 f0       	breq	.+6      	; 0x1a2 <execRxCommand+0x24>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	21 f0       	breq	.+8      	; 0x1a8 <execRxCommand+0x2a>
 1a0:	10 c0       	rjmp	.+32     	; 0x1c2 <execRxCommand+0x44>
	{
		case GET_ETAT:
			txCommande = 0;
 1a2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <txCommande>
 1a6:	11 c0       	rjmp	.+34     	; 0x1ca <execRxCommand+0x4c>
			break;
		case SET_VAL:
			
			if (valueSend != rxData[0])
 1a8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <rxData>
 1ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <valueSend>
 1b0:	89 17       	cp	r24, r25
 1b2:	19 f0       	breq	.+6      	; 0x1ba <execRxCommand+0x3c>
			{
				valueOut = rxData[0];
 1b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valueOut>
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <execRxCommand+0x44>
			}
			else
				valueOut = adcRead8();
 1ba:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 1be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valueOut>
			break;
	}
	switch (txCommande)
 1c2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <txCommande>
 1c6:	81 11       	cpse	r24, r1
 1c8:	19 c0       	rjmp	.+50     	; 0x1fc <execRxCommand+0x7e>
	{
		char txData[5];
		case VAL_POT:
			txData[0] = '<';
 1ca:	8c e3       	ldi	r24, 0x3C	; 60
 1cc:	89 83       	std	Y+1, r24	; 0x01
			txData[1] = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8a 83       	std	Y+2, r24	; 0x02
			txData[2] = VAL_POT;
 1d2:	1b 82       	std	Y+3, r1	; 0x03
			txData[3] = valueSend;
 1d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <valueSend>
 1d8:	8c 83       	std	Y+4, r24	; 0x04
			txData[4] = '>';
 1da:	8e e3       	ldi	r24, 0x3E	; 62
 1dc:	8d 83       	std	Y+5, r24	; 0x05
 1de:	8e 01       	movw	r16, r28
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	7e 01       	movw	r14, r28
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	e8 0e       	add	r14, r24
 1ea:	f1 1c       	adc	r15, r1
			for (int x = 0; x <= 4; x++)
			{
				usartSendByte(txData[x]);
 1ec:	f8 01       	movw	r30, r16
 1ee:	81 91       	ld	r24, Z+
 1f0:	8f 01       	movw	r16, r30
 1f2:	0e 94 b6 02 	call	0x56c	; 0x56c <usartSendByte>
			txData[0] = '<';
			txData[1] = 1;
			txData[2] = VAL_POT;
			txData[3] = valueSend;
			txData[4] = '>';
			for (int x = 0; x <= 4; x++)
 1f6:	0e 15       	cp	r16, r14
 1f8:	1f 05       	cpc	r17, r15
 1fa:	c1 f7       	brne	.-16     	; 0x1ec <execRxCommand+0x6e>
			{
				usartSendByte(txData[x]);
			}
			break;
	}
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <parseRxData>:
* @param data la donnée à traiter
*/
void parseRxData(uint8_t data)
{
	//switch case des différents paramètres de la trame de réception
	switch(rxState)
 214:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <rxState>
 218:	92 30       	cpi	r25, 0x02	; 2
 21a:	e1 f0       	breq	.+56     	; 0x254 <parseRxData+0x40>
 21c:	18 f4       	brcc	.+6      	; 0x224 <parseRxData+0x10>
 21e:	91 30       	cpi	r25, 0x01	; 1
 220:	71 f0       	breq	.+28     	; 0x23e <parseRxData+0x2a>
 222:	04 c0       	rjmp	.+8      	; 0x22c <parseRxData+0x18>
 224:	93 30       	cpi	r25, 0x03	; 3
 226:	21 f1       	breq	.+72     	; 0x270 <parseRxData+0x5c>
 228:	94 30       	cpi	r25, 0x04	; 4
 22a:	a1 f1       	breq	.+104    	; 0x294 <parseRxData+0x80>
	{
		//confirmation que la trame débute par '<'
		default :
			if(data == '<')
 22c:	8c 33       	cpi	r24, 0x3C	; 60
 22e:	09 f0       	breq	.+2      	; 0x232 <parseRxData+0x1e>
 230:	41 c0       	rjmp	.+130    	; 0x2b4 <parseRxData+0xa0>
			{
				rxState = RXSIZE;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rxState>
				rxDataCnt = 0;
 238:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rxDataCnt>
 23c:	08 95       	ret
			}
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXSIZE:
			rxDataSize = data;
 23e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rxDataSize>
			if(rxDataSize >= _MAX_RXDATASIZE_)
 242:	80 31       	cpi	r24, 0x10	; 16
 244:	18 f0       	brcs	.+6      	; 0x24c <parseRxData+0x38>
				rxState = WAIT;
 246:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rxState>
 24a:	08 95       	ret
			else
				rxState = RXCOMMANDE;
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rxState>
 252:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXCOMMANDE:
			rxCommande = data;
 254:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rxCommande>
			if(rxDataSize)
 258:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxDataSize>
 25c:	88 23       	and	r24, r24
 25e:	21 f0       	breq	.+8      	; 0x268 <parseRxData+0x54>
				rxState = RXDATA;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rxState>
 266:	08 95       	ret
			else
				rxState = VALIDATE;
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rxState>
 26e:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXDATA:
			rxData[rxDataCnt++] = data;
 270:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <rxDataCnt>
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	9e 0f       	add	r25, r30
 278:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <rxDataCnt>
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	e8 5e       	subi	r30, 0xE8	; 232
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	80 83       	st	Z, r24
			if(rxDataCnt == rxDataSize)
 284:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxDataSize>
 288:	98 13       	cpse	r25, r24
 28a:	14 c0       	rjmp	.+40     	; 0x2b4 <parseRxData+0xa0>
				rxState = VALIDATE;
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rxState>
 292:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//confirmation que la trame se termine par '>'
		case VALIDATE :
			rxState = WAIT;
 294:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rxState>
			if(data == '>')
 298:	8e 33       	cpi	r24, 0x3E	; 62
 29a:	19 f4       	brne	.+6      	; 0x2a2 <parseRxData+0x8e>
				execRxCommand();//si oui la fonction execRxCommand() est appelée
 29c:	0e 94 bf 00 	call	0x17e	; 0x17e <execRxCommand>
 2a0:	08 95       	ret
			else
				rxErrorCommCnt++;// sinon le nombre d'erreur augmente
 2a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2a6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 2b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2b4:	08 95       	ret

000002b6 <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	uint8_t top = 250; //Valeur de OCR0A.
	TCCR0A = 0b00000010; //Mode CTC.
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Prescaler de 64.
 2ba:	93 e0       	ldi	r25, 0x03	; 3
 2bc:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0b00000010; //Output compare match A interrupt enable.
 2be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = top-1; //62.5ns * 64 * 250 = 1ms.
 2c2:	89 ef       	ldi	r24, 0xF9	; 249
 2c4:	87 bd       	out	0x27, r24	; 39
	sei();
 2c6:	78 94       	sei
 2c8:	08 95       	ret

000002ca <timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4A = 0b10000010; //PWM output OC4A.
 2ca:	82 e8       	ldi	r24, 0x82	; 130
 2cc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	TCCR4B = 0b00000100; //Prescaler de 4.
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	OCR4C = 255-1; //62.5ns * 4 * 255 = 127.5us.
 2d6:	8e ef       	ldi	r24, 0xFE	; 254
 2d8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
	OUTPUT_VALUE(0); //Valeur de la sortie.
 2dc:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>
 2e0:	08 95       	ret

000002e2 <miscInit>:
	}
}

void miscInit(void)
{
	adcInit(); //Appel de la fonction d'initialisation du ADC.
 2e2:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
	timer0Init(); //Initialisation de timer 0.
 2e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <timer0Init>
	timer4Init(); //Initialisation de timer 4.
 2ea:	0e 94 65 01 	call	0x2ca	; 0x2ca <timer4Init>
	usartInit(1000000, F_CPU); //Initialisation du USART à 1Mbps.
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	34 e2       	ldi	r19, 0x24	; 36
 2f2:	44 ef       	ldi	r20, 0xF4	; 244
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	60 e4       	ldi	r22, 0x40	; 64
 2f8:	72 e4       	ldi	r23, 0x42	; 66
 2fa:	8f e0       	ldi	r24, 0x0F	; 15
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 32 02 	call	0x464	; 0x464 <usartInit>
	
	OUTPUT_INIT();
 302:	3f 9a       	sbi	0x07, 7	; 7
	SWITCH_INIT();
 304:	2b 9a       	sbi	0x05, 3	; 5
 306:	08 95       	ret

00000308 <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 308:	0e 94 71 01 	call	0x2e2	; 0x2e2 <miscInit>
					valueAdc = adcRead8();
					valueOut = adcRead8();
				}
				else
					valueSend = adcRead8();
				sprintf(msg, "%d\n\r", valueOut);
 30c:	0f 2e       	mov	r0, r31
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ef 2e       	mov	r14, r31
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	ff 2e       	mov	r15, r31
 316:	f0 2d       	mov	r31, r0
 318:	08 e2       	ldi	r16, 0x28	; 40
 31a:	11 e0       	ldi	r17, 0x01	; 1
				//usartSendString(msg);
			}
		}
		else
			valueOut = 0;
		OUTPUT_VALUE(valueOut);
 31c:	cf ec       	ldi	r28, 0xCF	; 207
 31e:	d0 e0       	ldi	r29, 0x00	; 0
{
	miscInit();
	
	while (1)
	{
		if (SWITCH())
 320:	1b 99       	sbic	0x03, 3	; 3
 322:	32 c0       	rjmp	.+100    	; 0x388 <main+0x80>
		{
			//valueOut = 0;
			if (usartRxAvailable()) //Si un caractère est disponible:
 324:	0e 94 b3 02 	call	0x566	; 0x566 <usartRxAvailable>
 328:	88 23       	and	r24, r24
 32a:	21 f0       	breq	.+8      	; 0x334 <main+0x2c>
				parseRxData(usartRemRxData()); //appel de la fonction parseRxData() avec en paramètre la valeur retournée par usartRemRxData().
 32c:	0e 94 97 02 	call	0x52e	; 0x52e <usartRemRxData>
 330:	0e 94 0a 01 	call	0x214	; 0x214 <parseRxData>
			if (msFlag)
 334:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msFlag>
 338:	88 23       	and	r24, r24
 33a:	41 f1       	breq	.+80     	; 0x38c <main+0x84>
			{
				msFlag = 0;
 33c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <msFlag>
				if (valueAdc != adcRead8())
 340:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 344:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <valueAdc>
 348:	89 17       	cp	r24, r25
 34a:	49 f0       	breq	.+18     	; 0x35e <main+0x56>
				{
					valueAdc = adcRead8();
 34c:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 350:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <valueAdc>
					valueOut = adcRead8();
 354:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 358:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valueOut>
 35c:	04 c0       	rjmp	.+8      	; 0x366 <main+0x5e>
				}
				else
					valueSend = adcRead8();
 35e:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 362:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <valueSend>
				sprintf(msg, "%d\n\r", valueOut);
 366:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <valueOut>
 36a:	1f 92       	push	r1
 36c:	8f 93       	push	r24
 36e:	ff 92       	push	r15
 370:	ef 92       	push	r14
 372:	1f 93       	push	r17
 374:	0f 93       	push	r16
 376:	0e 94 2a 04 	call	0x854	; 0x854 <sprintf>
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	02 c0       	rjmp	.+4      	; 0x38c <main+0x84>
				//usartSendString(msg);
			}
		}
		else
			valueOut = 0;
 388:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <valueOut>
		OUTPUT_VALUE(valueOut);
 38c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <valueOut>
 390:	88 83       	st	Y, r24
	}
 392:	c6 cf       	rjmp	.-116    	; 0x320 <main+0x18>

00000394 <__vector_25>:

/**
*@brief Interruption nécessaires à la réception. Le buffer de réception est remplis avec la valeur de UDR1.
*/
ISR(USART1_RX_vect)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	_rxCnt++;
 3aa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_rxCnt>
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_rxCnt>
	_rxBuffer[_rxBufferIn++] = UDR1;
 3b4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_rxBufferIn>
 3b8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_rxBufferIn+0x1>
 3bc:	9c 01       	movw	r18, r24
 3be:	2f 5f       	subi	r18, 0xFF	; 255
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <_rxBufferIn+0x1>
 3c6:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <_rxBufferIn>
 3ca:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 3ce:	fc 01       	movw	r30, r24
 3d0:	e0 5d       	subi	r30, 0xD0	; 208
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	20 83       	st	Z, r18
	if (_rxBufferIn >= RX_BUFFER_SIZE)// Si la limite du buffer est atteinte rxBufferIn retourne à 0 et les premières donnés (les plus ancienne) sont écrasés.
 3d6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_rxBufferIn>
 3da:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_rxBufferIn+0x1>
 3de:	80 34       	cpi	r24, 0x40	; 64
 3e0:	91 05       	cpc	r25, r1
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <__vector_25+0x58>
		_rxBufferIn = 0;
 3e4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_rxBufferIn+0x1>
 3e8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_rxBufferIn>
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <__vector_26>:

/**
*@brief Interruption nécessaires à la transmission. Le buffer de transmission est vidé en donnant à UDR1 la valeur de l'octet à envoyer.
*/
ISR(USART1_UDRE_vect)
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	if (!_txCnt)
 412:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_txCnt>
 416:	81 11       	cpse	r24, r1
 418:	06 c0       	rjmp	.+12     	; 0x426 <__vector_26+0x24>
		UCSR1B &= ~(1<<UDRIE1);// Permet de sortir de l'interruption lorsqu'on sort du if de transmission c'est à dire lorsqu'il n'y a plus aucun caractère à transmettre.
 41a:	e9 ec       	ldi	r30, 0xC9	; 201
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	8f 7d       	andi	r24, 0xDF	; 223
 422:	80 83       	st	Z, r24
 424:	17 c0       	rjmp	.+46     	; 0x454 <__vector_26+0x52>
	else
	{
		_txCnt--;
 426:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_txCnt>
 42a:	81 50       	subi	r24, 0x01	; 1
 42c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_txCnt>
		UDR1 = _txBuffer[_txBufferOut++];
 430:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <_txBufferOut>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	8e 0f       	add	r24, r30
 438:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_txBufferOut>
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	e0 59       	subi	r30, 0x90	; 144
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	80 81       	ld	r24, Z
 444:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
		if (_txBufferOut >= TX_BUFFER_SIZE)
 448:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_txBufferOut>
 44c:	80 34       	cpi	r24, 0x40	; 64
 44e:	10 f0       	brcs	.+4      	; 0x454 <__vector_26+0x52>
			_txBufferOut = 0;
 450:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <_txBufferOut>
	}
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <usartInit>:

void usartInit(uint32_t baudRate, uint32_t fcpu)
{
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	6b 01       	movw	r12, r22
 46e:	7c 01       	movw	r14, r24
	if (baudRate >= 115200)
 470:	c1 14       	cp	r12, r1
 472:	82 ec       	ldi	r24, 0xC2	; 194
 474:	d8 06       	cpc	r13, r24
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	e8 06       	cpc	r14, r24
 47a:	f1 04       	cpc	r15, r1
 47c:	20 f1       	brcs	.+72     	; 0x4c6 <usartInit+0x62>
	{
		UCSR1A |= (1<<U2X1);
 47e:	e8 ec       	ldi	r30, 0xC8	; 200
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	82 60       	ori	r24, 0x02	; 2
 486:	80 83       	st	Z, r24
		UBRR1 = ((fcpu >> 3) / baudRate)-0.5; // Calcul de UDRR1 la vitesse en fonction de baudrate en paramètre de la fonction.
 488:	ca 01       	movw	r24, r20
 48a:	b9 01       	movw	r22, r18
 48c:	68 94       	set
 48e:	12 f8       	bld	r1, 2
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	16 94       	lsr	r1
 49a:	d1 f7       	brne	.-12     	; 0x490 <usartInit+0x2c>
 49c:	a7 01       	movw	r20, r14
 49e:	96 01       	movw	r18, r12
 4a0:	0e 94 08 04 	call	0x810	; 0x810 <__udivmodsi4>
 4a4:	ca 01       	movw	r24, r20
 4a6:	b9 01       	movw	r22, r18
 4a8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatunsisf>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	5f e3       	ldi	r21, 0x3F	; 63
 4b4:	0e 94 de 02 	call	0x5bc	; 0x5bc <__subsf3>
 4b8:	0e 94 4b 03 	call	0x696	; 0x696 <__fixunssfsi>
 4bc:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 4c0:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 4c4:	23 c0       	rjmp	.+70     	; 0x50c <usartInit+0xa8>
	}
	else
	{
		UCSR1A &= ~(1<<U2X1);
 4c6:	e8 ec       	ldi	r30, 0xC8	; 200
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	8d 7f       	andi	r24, 0xFD	; 253
 4ce:	80 83       	st	Z, r24
		UBRR1 = ((fcpu >> 4) / baudRate)-0.5; // Calcul de UDRR1 la vitesse en fonction de baudrate en paramètre de la fonction.
 4d0:	ca 01       	movw	r24, r20
 4d2:	b9 01       	movw	r22, r18
 4d4:	68 94       	set
 4d6:	13 f8       	bld	r1, 3
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	16 94       	lsr	r1
 4e2:	d1 f7       	brne	.-12     	; 0x4d8 <usartInit+0x74>
 4e4:	a7 01       	movw	r20, r14
 4e6:	96 01       	movw	r18, r12
 4e8:	0e 94 08 04 	call	0x810	; 0x810 <__udivmodsi4>
 4ec:	ca 01       	movw	r24, r20
 4ee:	b9 01       	movw	r22, r18
 4f0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatunsisf>
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	5f e3       	ldi	r21, 0x3F	; 63
 4fc:	0e 94 de 02 	call	0x5bc	; 0x5bc <__subsf3>
 500:	0e 94 4b 03 	call	0x696	; 0x696 <__fixunssfsi>
 504:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 508:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	}
	UCSR1B |= ((1<<RXEN1) | (1<<TXEN1)); // Active RX et TX.
 50c:	e9 ec       	ldi	r30, 0xC9	; 201
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	88 61       	ori	r24, 0x18	; 24
 514:	80 83       	st	Z, r24
	sei();
 516:	78 94       	sei
	UCSR1B |= (1<<RXCIE1);
 518:	80 81       	ld	r24, Z
 51a:	80 68       	ori	r24, 0x80	; 128
 51c:	80 83       	st	Z, r24
	UCSR1B |= (1<<UDRIE1);
 51e:	80 81       	ld	r24, Z
 520:	80 62       	ori	r24, 0x20	; 32
 522:	80 83       	st	Z, r24
}
 524:	ff 90       	pop	r15
 526:	ef 90       	pop	r14
 528:	df 90       	pop	r13
 52a:	cf 90       	pop	r12
 52c:	08 95       	ret

0000052e <usartRemRxData>:

uint8_t usartRemRxData()
{
	uint8_t rxData = 0;
	if (_rxCnt)// Si rxCnt est suppérieur à 0 c'est qu'il reste des données dans le buffer de réception.
 52e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_rxCnt>
 532:	88 23       	and	r24, r24
 534:	b1 f0       	breq	.+44     	; 0x562 <usartRemRxData+0x34>
	{
		cli();// Arrêt des interruption le temps de modifier rxCnt afin d'éviter tout conflit.
 536:	f8 94       	cli
		_rxCnt--;
 538:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_rxCnt>
 53c:	81 50       	subi	r24, 0x01	; 1
 53e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_rxCnt>
		sei();
 542:	78 94       	sei
		rxData = _rxBuffer[_rxBufferOut++];// Les donnés précedement placés dans rxBuffer sont placés unes à unes dans rxData afin de vider rxBuffer. Lorsque rxBufferOut est = à rxBufferIn c'est que tout à été affiché.
 544:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <_rxBufferOut>
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	9e 0f       	add	r25, r30
 54c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_rxBufferOut>
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	e0 5d       	subi	r30, 0xD0	; 208
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	80 81       	ld	r24, Z
		if (_rxBufferOut >= RX_BUFFER_SIZE)
 558:	90 34       	cpi	r25, 0x40	; 64
 55a:	20 f0       	brcs	.+8      	; 0x564 <usartRemRxData+0x36>
			_rxBufferOut = 0;
 55c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_rxBufferOut>
 560:	08 95       	ret
	UCSR1B |= (1<<UDRIE1);
}

uint8_t usartRemRxData()
{
	uint8_t rxData = 0;
 562:	80 e0       	ldi	r24, 0x00	; 0
		rxData = _rxBuffer[_rxBufferOut++];// Les donnés précedement placés dans rxBuffer sont placés unes à unes dans rxData afin de vider rxBuffer. Lorsque rxBufferOut est = à rxBufferIn c'est que tout à été affiché.
		if (_rxBufferOut >= RX_BUFFER_SIZE)
			_rxBufferOut = 0;
	}
	return rxData;// rxData est la donnée la plus ancienne dans rxBuffer.
}
 564:	08 95       	ret

00000566 <usartRxAvailable>:

uint8_t usartRxAvailable()
{
	return _rxCnt;// rxCnt augmente quand une donnée est placée dans le buffer de réception et diminue lorsque des données en sont retirés.
 566:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_rxCnt>
}
 56a:	08 95       	ret

0000056c <usartSendByte>:

uint8_t usartSendByte(uint8_t u8Data)
{
	if(_txCnt >= TX_BUFFER_SIZE)
 56c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_txCnt>
 570:	90 34       	cpi	r25, 0x40	; 64
 572:	10 f5       	brcc	.+68     	; 0x5b8 <usartSendByte+0x4c>
		return 1;
	_txCnt++;
 574:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_txCnt>
 578:	9f 5f       	subi	r25, 0xFF	; 255
 57a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <_txCnt>
	_txBuffer[_txBufferIn++] =  u8Data;// La donnée contenue par byteSend est placé dans le buffer de transmission.
 57e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <_txBufferIn>
 582:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <_txBufferIn+0x1>
 586:	a9 01       	movw	r20, r18
 588:	4f 5f       	subi	r20, 0xFF	; 255
 58a:	5f 4f       	sbci	r21, 0xFF	; 255
 58c:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <_txBufferIn+0x1>
 590:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <_txBufferIn>
 594:	f9 01       	movw	r30, r18
 596:	e0 59       	subi	r30, 0x90	; 144
 598:	fe 4f       	sbci	r31, 0xFE	; 254
 59a:	80 83       	st	Z, r24
	if (_txBufferIn >= TX_BUFFER_SIZE)
 59c:	40 34       	cpi	r20, 0x40	; 64
 59e:	51 05       	cpc	r21, r1
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <usartSendByte+0x3e>
		_txBufferIn = 0;// Si plus de données sont reçu qu'il n'y en à qui sont envoyer, txBufferIn retourne à 0.
 5a2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <_txBufferIn+0x1>
 5a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <_txBufferIn>
	UCSR1B |= (1<<UDRIE1);// UDRIE1 est mis à 1 ce qui a pour effet de générer l'interruption USART1_UDRE_vect dans laquelle la transmission de caractère sera effectuée.
 5aa:	e9 ec       	ldi	r30, 0xC9	; 201
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	80 62       	ori	r24, 0x20	; 32
 5b2:	80 83       	st	Z, r24
	return 0;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
}

uint8_t usartSendByte(uint8_t u8Data)
{
	if(_txCnt >= TX_BUFFER_SIZE)
		return 1;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
	_txBuffer[_txBufferIn++] =  u8Data;// La donnée contenue par byteSend est placé dans le buffer de transmission.
	if (_txBufferIn >= TX_BUFFER_SIZE)
		_txBufferIn = 0;// Si plus de données sont reçu qu'il n'y en à qui sont envoyer, txBufferIn retourne à 0.
	UCSR1B |= (1<<UDRIE1);// UDRIE1 est mis à 1 ce qui a pour effet de générer l'interruption USART1_UDRE_vect dans laquelle la transmission de caractère sera effectuée.
	return 0;
}
 5ba:	08 95       	ret

000005bc <__subsf3>:
 5bc:	50 58       	subi	r21, 0x80	; 128

000005be <__addsf3>:
 5be:	bb 27       	eor	r27, r27
 5c0:	aa 27       	eor	r26, r26
 5c2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__addsf3x>
 5c6:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_round>
 5ca:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_pscA>
 5ce:	38 f0       	brcs	.+14     	; 0x5de <__addsf3+0x20>
 5d0:	0e 94 c7 03 	call	0x78e	; 0x78e <__fp_pscB>
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__addsf3+0x20>
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <__addsf3+0x28>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	19 f4       	brne	.+6      	; 0x5e2 <__addsf3+0x24>
 5dc:	26 f4       	brtc	.+8      	; 0x5e6 <__addsf3+0x28>
 5de:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_nan>
 5e2:	0e f4       	brtc	.+2      	; 0x5e6 <__addsf3+0x28>
 5e4:	e0 95       	com	r30
 5e6:	e7 fb       	bst	r30, 7
 5e8:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_inf>

000005ec <__addsf3x>:
 5ec:	e9 2f       	mov	r30, r25
 5ee:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_split3>
 5f2:	58 f3       	brcs	.-42     	; 0x5ca <__addsf3+0xc>
 5f4:	ba 17       	cp	r27, r26
 5f6:	62 07       	cpc	r22, r18
 5f8:	73 07       	cpc	r23, r19
 5fa:	84 07       	cpc	r24, r20
 5fc:	95 07       	cpc	r25, r21
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__addsf3x+0x1c>
 600:	79 f4       	brne	.+30     	; 0x620 <__addsf3x+0x34>
 602:	a6 f5       	brtc	.+104    	; 0x66c <__addsf3x+0x80>
 604:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_zero>
 608:	0e f4       	brtc	.+2      	; 0x60c <__addsf3x+0x20>
 60a:	e0 95       	com	r30
 60c:	0b 2e       	mov	r0, r27
 60e:	ba 2f       	mov	r27, r26
 610:	a0 2d       	mov	r26, r0
 612:	0b 01       	movw	r0, r22
 614:	b9 01       	movw	r22, r18
 616:	90 01       	movw	r18, r0
 618:	0c 01       	movw	r0, r24
 61a:	ca 01       	movw	r24, r20
 61c:	a0 01       	movw	r20, r0
 61e:	11 24       	eor	r1, r1
 620:	ff 27       	eor	r31, r31
 622:	59 1b       	sub	r21, r25
 624:	99 f0       	breq	.+38     	; 0x64c <__addsf3x+0x60>
 626:	59 3f       	cpi	r21, 0xF9	; 249
 628:	50 f4       	brcc	.+20     	; 0x63e <__addsf3x+0x52>
 62a:	50 3e       	cpi	r21, 0xE0	; 224
 62c:	68 f1       	brcs	.+90     	; 0x688 <__addsf3x+0x9c>
 62e:	1a 16       	cp	r1, r26
 630:	f0 40       	sbci	r31, 0x00	; 0
 632:	a2 2f       	mov	r26, r18
 634:	23 2f       	mov	r18, r19
 636:	34 2f       	mov	r19, r20
 638:	44 27       	eor	r20, r20
 63a:	58 5f       	subi	r21, 0xF8	; 248
 63c:	f3 cf       	rjmp	.-26     	; 0x624 <__addsf3x+0x38>
 63e:	46 95       	lsr	r20
 640:	37 95       	ror	r19
 642:	27 95       	ror	r18
 644:	a7 95       	ror	r26
 646:	f0 40       	sbci	r31, 0x00	; 0
 648:	53 95       	inc	r21
 64a:	c9 f7       	brne	.-14     	; 0x63e <__addsf3x+0x52>
 64c:	7e f4       	brtc	.+30     	; 0x66c <__addsf3x+0x80>
 64e:	1f 16       	cp	r1, r31
 650:	ba 0b       	sbc	r27, r26
 652:	62 0b       	sbc	r22, r18
 654:	73 0b       	sbc	r23, r19
 656:	84 0b       	sbc	r24, r20
 658:	ba f0       	brmi	.+46     	; 0x688 <__addsf3x+0x9c>
 65a:	91 50       	subi	r25, 0x01	; 1
 65c:	a1 f0       	breq	.+40     	; 0x686 <__addsf3x+0x9a>
 65e:	ff 0f       	add	r31, r31
 660:	bb 1f       	adc	r27, r27
 662:	66 1f       	adc	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	c2 f7       	brpl	.-16     	; 0x65a <__addsf3x+0x6e>
 66a:	0e c0       	rjmp	.+28     	; 0x688 <__addsf3x+0x9c>
 66c:	ba 0f       	add	r27, r26
 66e:	62 1f       	adc	r22, r18
 670:	73 1f       	adc	r23, r19
 672:	84 1f       	adc	r24, r20
 674:	48 f4       	brcc	.+18     	; 0x688 <__addsf3x+0x9c>
 676:	87 95       	ror	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b7 95       	ror	r27
 67e:	f7 95       	ror	r31
 680:	9e 3f       	cpi	r25, 0xFE	; 254
 682:	08 f0       	brcs	.+2      	; 0x686 <__addsf3x+0x9a>
 684:	b0 cf       	rjmp	.-160    	; 0x5e6 <__addsf3+0x28>
 686:	93 95       	inc	r25
 688:	88 0f       	add	r24, r24
 68a:	08 f0       	brcs	.+2      	; 0x68e <__addsf3x+0xa2>
 68c:	99 27       	eor	r25, r25
 68e:	ee 0f       	add	r30, r30
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	08 95       	ret

00000696 <__fixunssfsi>:
 696:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_splitA>
 69a:	88 f0       	brcs	.+34     	; 0x6be <__fixunssfsi+0x28>
 69c:	9f 57       	subi	r25, 0x7F	; 127
 69e:	98 f0       	brcs	.+38     	; 0x6c6 <__fixunssfsi+0x30>
 6a0:	b9 2f       	mov	r27, r25
 6a2:	99 27       	eor	r25, r25
 6a4:	b7 51       	subi	r27, 0x17	; 23
 6a6:	b0 f0       	brcs	.+44     	; 0x6d4 <__fixunssfsi+0x3e>
 6a8:	e1 f0       	breq	.+56     	; 0x6e2 <__fixunssfsi+0x4c>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	1a f0       	brmi	.+6      	; 0x6ba <__fixunssfsi+0x24>
 6b4:	ba 95       	dec	r27
 6b6:	c9 f7       	brne	.-14     	; 0x6aa <__fixunssfsi+0x14>
 6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <__fixunssfsi+0x4c>
 6ba:	b1 30       	cpi	r27, 0x01	; 1
 6bc:	91 f0       	breq	.+36     	; 0x6e2 <__fixunssfsi+0x4c>
 6be:	0e 94 01 04 	call	0x802	; 0x802 <__fp_zero>
 6c2:	b1 e0       	ldi	r27, 0x01	; 1
 6c4:	08 95       	ret
 6c6:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_zero>
 6ca:	67 2f       	mov	r22, r23
 6cc:	78 2f       	mov	r23, r24
 6ce:	88 27       	eor	r24, r24
 6d0:	b8 5f       	subi	r27, 0xF8	; 248
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <__fixunssfsi+0x4c>
 6d4:	b9 3f       	cpi	r27, 0xF9	; 249
 6d6:	cc f3       	brlt	.-14     	; 0x6ca <__fixunssfsi+0x34>
 6d8:	86 95       	lsr	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b3 95       	inc	r27
 6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__fixunssfsi+0x42>
 6e2:	3e f4       	brtc	.+14     	; 0x6f2 <__fixunssfsi+0x5c>
 6e4:	90 95       	com	r25
 6e6:	80 95       	com	r24
 6e8:	70 95       	com	r23
 6ea:	61 95       	neg	r22
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__floatunsisf>:
 6f4:	e8 94       	clt
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <__floatsisf+0x12>

000006f8 <__floatsisf>:
 6f8:	97 fb       	bst	r25, 7
 6fa:	3e f4       	brtc	.+14     	; 0x70a <__floatsisf+0x12>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	99 23       	and	r25, r25
 70c:	a9 f0       	breq	.+42     	; 0x738 <__floatsisf+0x40>
 70e:	f9 2f       	mov	r31, r25
 710:	96 e9       	ldi	r25, 0x96	; 150
 712:	bb 27       	eor	r27, r27
 714:	93 95       	inc	r25
 716:	f6 95       	lsr	r31
 718:	87 95       	ror	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f1 11       	cpse	r31, r1
 722:	f8 cf       	rjmp	.-16     	; 0x714 <__floatsisf+0x1c>
 724:	fa f4       	brpl	.+62     	; 0x764 <__floatsisf+0x6c>
 726:	bb 0f       	add	r27, r27
 728:	11 f4       	brne	.+4      	; 0x72e <__floatsisf+0x36>
 72a:	60 ff       	sbrs	r22, 0
 72c:	1b c0       	rjmp	.+54     	; 0x764 <__floatsisf+0x6c>
 72e:	6f 5f       	subi	r22, 0xFF	; 255
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	16 c0       	rjmp	.+44     	; 0x764 <__floatsisf+0x6c>
 738:	88 23       	and	r24, r24
 73a:	11 f0       	breq	.+4      	; 0x740 <__floatsisf+0x48>
 73c:	96 e9       	ldi	r25, 0x96	; 150
 73e:	11 c0       	rjmp	.+34     	; 0x762 <__floatsisf+0x6a>
 740:	77 23       	and	r23, r23
 742:	21 f0       	breq	.+8      	; 0x74c <__floatsisf+0x54>
 744:	9e e8       	ldi	r25, 0x8E	; 142
 746:	87 2f       	mov	r24, r23
 748:	76 2f       	mov	r23, r22
 74a:	05 c0       	rjmp	.+10     	; 0x756 <__floatsisf+0x5e>
 74c:	66 23       	and	r22, r22
 74e:	71 f0       	breq	.+28     	; 0x76c <__floatsisf+0x74>
 750:	96 e8       	ldi	r25, 0x86	; 134
 752:	86 2f       	mov	r24, r22
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	2a f0       	brmi	.+10     	; 0x764 <__floatsisf+0x6c>
 75a:	9a 95       	dec	r25
 75c:	66 0f       	add	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	da f7       	brpl	.-10     	; 0x75a <__floatsisf+0x62>
 764:	88 0f       	add	r24, r24
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	97 f9       	bld	r25, 7
 76c:	08 95       	ret

0000076e <__fp_inf>:
 76e:	97 f9       	bld	r25, 7
 770:	9f 67       	ori	r25, 0x7F	; 127
 772:	80 e8       	ldi	r24, 0x80	; 128
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	08 95       	ret

0000077a <__fp_nan>:
 77a:	9f ef       	ldi	r25, 0xFF	; 255
 77c:	80 ec       	ldi	r24, 0xC0	; 192
 77e:	08 95       	ret

00000780 <__fp_pscA>:
 780:	00 24       	eor	r0, r0
 782:	0a 94       	dec	r0
 784:	16 16       	cp	r1, r22
 786:	17 06       	cpc	r1, r23
 788:	18 06       	cpc	r1, r24
 78a:	09 06       	cpc	r0, r25
 78c:	08 95       	ret

0000078e <__fp_pscB>:
 78e:	00 24       	eor	r0, r0
 790:	0a 94       	dec	r0
 792:	12 16       	cp	r1, r18
 794:	13 06       	cpc	r1, r19
 796:	14 06       	cpc	r1, r20
 798:	05 06       	cpc	r0, r21
 79a:	08 95       	ret

0000079c <__fp_round>:
 79c:	09 2e       	mov	r0, r25
 79e:	03 94       	inc	r0
 7a0:	00 0c       	add	r0, r0
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__fp_round+0xc>
 7a4:	88 23       	and	r24, r24
 7a6:	52 f0       	brmi	.+20     	; 0x7bc <__fp_round+0x20>
 7a8:	bb 0f       	add	r27, r27
 7aa:	40 f4       	brcc	.+16     	; 0x7bc <__fp_round+0x20>
 7ac:	bf 2b       	or	r27, r31
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <__fp_round+0x18>
 7b0:	60 ff       	sbrs	r22, 0
 7b2:	04 c0       	rjmp	.+8      	; 0x7bc <__fp_round+0x20>
 7b4:	6f 5f       	subi	r22, 0xFF	; 255
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	08 95       	ret

000007be <__fp_split3>:
 7be:	57 fd       	sbrc	r21, 7
 7c0:	90 58       	subi	r25, 0x80	; 128
 7c2:	44 0f       	add	r20, r20
 7c4:	55 1f       	adc	r21, r21
 7c6:	59 f0       	breq	.+22     	; 0x7de <__fp_splitA+0x10>
 7c8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ca:	71 f0       	breq	.+28     	; 0x7e8 <__fp_splitA+0x1a>
 7cc:	47 95       	ror	r20

000007ce <__fp_splitA>:
 7ce:	88 0f       	add	r24, r24
 7d0:	97 fb       	bst	r25, 7
 7d2:	99 1f       	adc	r25, r25
 7d4:	61 f0       	breq	.+24     	; 0x7ee <__fp_splitA+0x20>
 7d6:	9f 3f       	cpi	r25, 0xFF	; 255
 7d8:	79 f0       	breq	.+30     	; 0x7f8 <__fp_splitA+0x2a>
 7da:	87 95       	ror	r24
 7dc:	08 95       	ret
 7de:	12 16       	cp	r1, r18
 7e0:	13 06       	cpc	r1, r19
 7e2:	14 06       	cpc	r1, r20
 7e4:	55 1f       	adc	r21, r21
 7e6:	f2 cf       	rjmp	.-28     	; 0x7cc <__fp_split3+0xe>
 7e8:	46 95       	lsr	r20
 7ea:	f1 df       	rcall	.-30     	; 0x7ce <__fp_splitA>
 7ec:	08 c0       	rjmp	.+16     	; 0x7fe <__fp_splitA+0x30>
 7ee:	16 16       	cp	r1, r22
 7f0:	17 06       	cpc	r1, r23
 7f2:	18 06       	cpc	r1, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	f1 cf       	rjmp	.-30     	; 0x7da <__fp_splitA+0xc>
 7f8:	86 95       	lsr	r24
 7fa:	71 05       	cpc	r23, r1
 7fc:	61 05       	cpc	r22, r1
 7fe:	08 94       	sec
 800:	08 95       	ret

00000802 <__fp_zero>:
 802:	e8 94       	clt

00000804 <__fp_szero>:
 804:	bb 27       	eor	r27, r27
 806:	66 27       	eor	r22, r22
 808:	77 27       	eor	r23, r23
 80a:	cb 01       	movw	r24, r22
 80c:	97 f9       	bld	r25, 7
 80e:	08 95       	ret

00000810 <__udivmodsi4>:
 810:	a1 e2       	ldi	r26, 0x21	; 33
 812:	1a 2e       	mov	r1, r26
 814:	aa 1b       	sub	r26, r26
 816:	bb 1b       	sub	r27, r27
 818:	fd 01       	movw	r30, r26
 81a:	0d c0       	rjmp	.+26     	; 0x836 <__udivmodsi4_ep>

0000081c <__udivmodsi4_loop>:
 81c:	aa 1f       	adc	r26, r26
 81e:	bb 1f       	adc	r27, r27
 820:	ee 1f       	adc	r30, r30
 822:	ff 1f       	adc	r31, r31
 824:	a2 17       	cp	r26, r18
 826:	b3 07       	cpc	r27, r19
 828:	e4 07       	cpc	r30, r20
 82a:	f5 07       	cpc	r31, r21
 82c:	20 f0       	brcs	.+8      	; 0x836 <__udivmodsi4_ep>
 82e:	a2 1b       	sub	r26, r18
 830:	b3 0b       	sbc	r27, r19
 832:	e4 0b       	sbc	r30, r20
 834:	f5 0b       	sbc	r31, r21

00000836 <__udivmodsi4_ep>:
 836:	66 1f       	adc	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	1a 94       	dec	r1
 840:	69 f7       	brne	.-38     	; 0x81c <__udivmodsi4_loop>
 842:	60 95       	com	r22
 844:	70 95       	com	r23
 846:	80 95       	com	r24
 848:	90 95       	com	r25
 84a:	9b 01       	movw	r18, r22
 84c:	ac 01       	movw	r20, r24
 84e:	bd 01       	movw	r22, r26
 850:	cf 01       	movw	r24, r30
 852:	08 95       	ret

00000854 <sprintf>:
 854:	ae e0       	ldi	r26, 0x0E	; 14
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	e0 e3       	ldi	r30, 0x30	; 48
 85a:	f4 e0       	ldi	r31, 0x04	; 4
 85c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__prologue_saves__+0x1c>
 860:	0d 89       	ldd	r16, Y+21	; 0x15
 862:	1e 89       	ldd	r17, Y+22	; 0x16
 864:	86 e0       	ldi	r24, 0x06	; 6
 866:	8c 83       	std	Y+4, r24	; 0x04
 868:	1a 83       	std	Y+2, r17	; 0x02
 86a:	09 83       	std	Y+1, r16	; 0x01
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	9f e7       	ldi	r25, 0x7F	; 127
 870:	9e 83       	std	Y+6, r25	; 0x06
 872:	8d 83       	std	Y+5, r24	; 0x05
 874:	ae 01       	movw	r20, r28
 876:	47 5e       	subi	r20, 0xE7	; 231
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	6f 89       	ldd	r22, Y+23	; 0x17
 87c:	78 8d       	ldd	r23, Y+24	; 0x18
 87e:	ce 01       	movw	r24, r28
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	0e 94 4c 04 	call	0x898	; 0x898 <vfprintf>
 886:	ef 81       	ldd	r30, Y+7	; 0x07
 888:	f8 85       	ldd	r31, Y+8	; 0x08
 88a:	e0 0f       	add	r30, r16
 88c:	f1 1f       	adc	r31, r17
 88e:	10 82       	st	Z, r1
 890:	2e 96       	adiw	r28, 0x0e	; 14
 892:	e4 e0       	ldi	r30, 0x04	; 4
 894:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__epilogue_restores__+0x1c>

00000898 <vfprintf>:
 898:	ab e0       	ldi	r26, 0x0B	; 11
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e2 e5       	ldi	r30, 0x52	; 82
 89e:	f4 e0       	ldi	r31, 0x04	; 4
 8a0:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__prologue_saves__>
 8a4:	6c 01       	movw	r12, r24
 8a6:	7b 01       	movw	r14, r22
 8a8:	8a 01       	movw	r16, r20
 8aa:	fc 01       	movw	r30, r24
 8ac:	17 82       	std	Z+7, r1	; 0x07
 8ae:	16 82       	std	Z+6, r1	; 0x06
 8b0:	83 81       	ldd	r24, Z+3	; 0x03
 8b2:	81 ff       	sbrs	r24, 1
 8b4:	cc c1       	rjmp	.+920    	; 0xc4e <__stack+0x14f>
 8b6:	ce 01       	movw	r24, r28
 8b8:	01 96       	adiw	r24, 0x01	; 1
 8ba:	3c 01       	movw	r6, r24
 8bc:	f6 01       	movw	r30, r12
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	f7 01       	movw	r30, r14
 8c2:	93 fd       	sbrc	r25, 3
 8c4:	85 91       	lpm	r24, Z+
 8c6:	93 ff       	sbrs	r25, 3
 8c8:	81 91       	ld	r24, Z+
 8ca:	7f 01       	movw	r14, r30
 8cc:	88 23       	and	r24, r24
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <vfprintf+0x3a>
 8d0:	ba c1       	rjmp	.+884    	; 0xc46 <__stack+0x147>
 8d2:	85 32       	cpi	r24, 0x25	; 37
 8d4:	39 f4       	brne	.+14     	; 0x8e4 <vfprintf+0x4c>
 8d6:	93 fd       	sbrc	r25, 3
 8d8:	85 91       	lpm	r24, Z+
 8da:	93 ff       	sbrs	r25, 3
 8dc:	81 91       	ld	r24, Z+
 8de:	7f 01       	movw	r14, r30
 8e0:	85 32       	cpi	r24, 0x25	; 37
 8e2:	29 f4       	brne	.+10     	; 0x8ee <vfprintf+0x56>
 8e4:	b6 01       	movw	r22, r12
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 8ec:	e7 cf       	rjmp	.-50     	; 0x8bc <vfprintf+0x24>
 8ee:	91 2c       	mov	r9, r1
 8f0:	21 2c       	mov	r2, r1
 8f2:	31 2c       	mov	r3, r1
 8f4:	ff e1       	ldi	r31, 0x1F	; 31
 8f6:	f3 15       	cp	r31, r3
 8f8:	d8 f0       	brcs	.+54     	; 0x930 <vfprintf+0x98>
 8fa:	8b 32       	cpi	r24, 0x2B	; 43
 8fc:	79 f0       	breq	.+30     	; 0x91c <vfprintf+0x84>
 8fe:	38 f4       	brcc	.+14     	; 0x90e <vfprintf+0x76>
 900:	80 32       	cpi	r24, 0x20	; 32
 902:	79 f0       	breq	.+30     	; 0x922 <vfprintf+0x8a>
 904:	83 32       	cpi	r24, 0x23	; 35
 906:	a1 f4       	brne	.+40     	; 0x930 <vfprintf+0x98>
 908:	23 2d       	mov	r18, r3
 90a:	20 61       	ori	r18, 0x10	; 16
 90c:	1d c0       	rjmp	.+58     	; 0x948 <vfprintf+0xb0>
 90e:	8d 32       	cpi	r24, 0x2D	; 45
 910:	61 f0       	breq	.+24     	; 0x92a <vfprintf+0x92>
 912:	80 33       	cpi	r24, 0x30	; 48
 914:	69 f4       	brne	.+26     	; 0x930 <vfprintf+0x98>
 916:	23 2d       	mov	r18, r3
 918:	21 60       	ori	r18, 0x01	; 1
 91a:	16 c0       	rjmp	.+44     	; 0x948 <vfprintf+0xb0>
 91c:	83 2d       	mov	r24, r3
 91e:	82 60       	ori	r24, 0x02	; 2
 920:	38 2e       	mov	r3, r24
 922:	e3 2d       	mov	r30, r3
 924:	e4 60       	ori	r30, 0x04	; 4
 926:	3e 2e       	mov	r3, r30
 928:	2a c0       	rjmp	.+84     	; 0x97e <vfprintf+0xe6>
 92a:	f3 2d       	mov	r31, r3
 92c:	f8 60       	ori	r31, 0x08	; 8
 92e:	1d c0       	rjmp	.+58     	; 0x96a <vfprintf+0xd2>
 930:	37 fc       	sbrc	r3, 7
 932:	2d c0       	rjmp	.+90     	; 0x98e <vfprintf+0xf6>
 934:	20 ed       	ldi	r18, 0xD0	; 208
 936:	28 0f       	add	r18, r24
 938:	2a 30       	cpi	r18, 0x0A	; 10
 93a:	40 f0       	brcs	.+16     	; 0x94c <vfprintf+0xb4>
 93c:	8e 32       	cpi	r24, 0x2E	; 46
 93e:	b9 f4       	brne	.+46     	; 0x96e <vfprintf+0xd6>
 940:	36 fc       	sbrc	r3, 6
 942:	81 c1       	rjmp	.+770    	; 0xc46 <__stack+0x147>
 944:	23 2d       	mov	r18, r3
 946:	20 64       	ori	r18, 0x40	; 64
 948:	32 2e       	mov	r3, r18
 94a:	19 c0       	rjmp	.+50     	; 0x97e <vfprintf+0xe6>
 94c:	36 fe       	sbrs	r3, 6
 94e:	06 c0       	rjmp	.+12     	; 0x95c <vfprintf+0xc4>
 950:	8a e0       	ldi	r24, 0x0A	; 10
 952:	98 9e       	mul	r9, r24
 954:	20 0d       	add	r18, r0
 956:	11 24       	eor	r1, r1
 958:	92 2e       	mov	r9, r18
 95a:	11 c0       	rjmp	.+34     	; 0x97e <vfprintf+0xe6>
 95c:	ea e0       	ldi	r30, 0x0A	; 10
 95e:	2e 9e       	mul	r2, r30
 960:	20 0d       	add	r18, r0
 962:	11 24       	eor	r1, r1
 964:	22 2e       	mov	r2, r18
 966:	f3 2d       	mov	r31, r3
 968:	f0 62       	ori	r31, 0x20	; 32
 96a:	3f 2e       	mov	r3, r31
 96c:	08 c0       	rjmp	.+16     	; 0x97e <vfprintf+0xe6>
 96e:	8c 36       	cpi	r24, 0x6C	; 108
 970:	21 f4       	brne	.+8      	; 0x97a <vfprintf+0xe2>
 972:	83 2d       	mov	r24, r3
 974:	80 68       	ori	r24, 0x80	; 128
 976:	38 2e       	mov	r3, r24
 978:	02 c0       	rjmp	.+4      	; 0x97e <vfprintf+0xe6>
 97a:	88 36       	cpi	r24, 0x68	; 104
 97c:	41 f4       	brne	.+16     	; 0x98e <vfprintf+0xf6>
 97e:	f7 01       	movw	r30, r14
 980:	93 fd       	sbrc	r25, 3
 982:	85 91       	lpm	r24, Z+
 984:	93 ff       	sbrs	r25, 3
 986:	81 91       	ld	r24, Z+
 988:	7f 01       	movw	r14, r30
 98a:	81 11       	cpse	r24, r1
 98c:	b3 cf       	rjmp	.-154    	; 0x8f4 <vfprintf+0x5c>
 98e:	98 2f       	mov	r25, r24
 990:	9f 7d       	andi	r25, 0xDF	; 223
 992:	95 54       	subi	r25, 0x45	; 69
 994:	93 30       	cpi	r25, 0x03	; 3
 996:	28 f4       	brcc	.+10     	; 0x9a2 <vfprintf+0x10a>
 998:	0c 5f       	subi	r16, 0xFC	; 252
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	9f e3       	ldi	r25, 0x3F	; 63
 99e:	99 83       	std	Y+1, r25	; 0x01
 9a0:	0d c0       	rjmp	.+26     	; 0x9bc <vfprintf+0x124>
 9a2:	83 36       	cpi	r24, 0x63	; 99
 9a4:	31 f0       	breq	.+12     	; 0x9b2 <vfprintf+0x11a>
 9a6:	83 37       	cpi	r24, 0x73	; 115
 9a8:	71 f0       	breq	.+28     	; 0x9c6 <vfprintf+0x12e>
 9aa:	83 35       	cpi	r24, 0x53	; 83
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <vfprintf+0x118>
 9ae:	59 c0       	rjmp	.+178    	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 9b0:	21 c0       	rjmp	.+66     	; 0x9f4 <vfprintf+0x15c>
 9b2:	f8 01       	movw	r30, r16
 9b4:	80 81       	ld	r24, Z
 9b6:	89 83       	std	Y+1, r24	; 0x01
 9b8:	0e 5f       	subi	r16, 0xFE	; 254
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
 9bc:	88 24       	eor	r8, r8
 9be:	83 94       	inc	r8
 9c0:	91 2c       	mov	r9, r1
 9c2:	53 01       	movw	r10, r6
 9c4:	13 c0       	rjmp	.+38     	; 0x9ec <vfprintf+0x154>
 9c6:	28 01       	movw	r4, r16
 9c8:	f2 e0       	ldi	r31, 0x02	; 2
 9ca:	4f 0e       	add	r4, r31
 9cc:	51 1c       	adc	r5, r1
 9ce:	f8 01       	movw	r30, r16
 9d0:	a0 80       	ld	r10, Z
 9d2:	b1 80       	ldd	r11, Z+1	; 0x01
 9d4:	36 fe       	sbrs	r3, 6
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <vfprintf+0x146>
 9d8:	69 2d       	mov	r22, r9
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <vfprintf+0x14a>
 9de:	6f ef       	ldi	r22, 0xFF	; 255
 9e0:	7f ef       	ldi	r23, 0xFF	; 255
 9e2:	c5 01       	movw	r24, r10
 9e4:	0e 94 38 06 	call	0xc70	; 0xc70 <strnlen>
 9e8:	4c 01       	movw	r8, r24
 9ea:	82 01       	movw	r16, r4
 9ec:	f3 2d       	mov	r31, r3
 9ee:	ff 77       	andi	r31, 0x7F	; 127
 9f0:	3f 2e       	mov	r3, r31
 9f2:	16 c0       	rjmp	.+44     	; 0xa20 <__DATA_REGION_LENGTH__+0x20>
 9f4:	28 01       	movw	r4, r16
 9f6:	22 e0       	ldi	r18, 0x02	; 2
 9f8:	42 0e       	add	r4, r18
 9fa:	51 1c       	adc	r5, r1
 9fc:	f8 01       	movw	r30, r16
 9fe:	a0 80       	ld	r10, Z
 a00:	b1 80       	ldd	r11, Z+1	; 0x01
 a02:	36 fe       	sbrs	r3, 6
 a04:	03 c0       	rjmp	.+6      	; 0xa0c <__DATA_REGION_LENGTH__+0xc>
 a06:	69 2d       	mov	r22, r9
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
 a0c:	6f ef       	ldi	r22, 0xFF	; 255
 a0e:	7f ef       	ldi	r23, 0xFF	; 255
 a10:	c5 01       	movw	r24, r10
 a12:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strnlen_P>
 a16:	4c 01       	movw	r8, r24
 a18:	f3 2d       	mov	r31, r3
 a1a:	f0 68       	ori	r31, 0x80	; 128
 a1c:	3f 2e       	mov	r3, r31
 a1e:	82 01       	movw	r16, r4
 a20:	33 fc       	sbrc	r3, 3
 a22:	1b c0       	rjmp	.+54     	; 0xa5a <__DATA_REGION_LENGTH__+0x5a>
 a24:	82 2d       	mov	r24, r2
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	88 16       	cp	r8, r24
 a2a:	99 06       	cpc	r9, r25
 a2c:	b0 f4       	brcc	.+44     	; 0xa5a <__DATA_REGION_LENGTH__+0x5a>
 a2e:	b6 01       	movw	r22, r12
 a30:	80 e2       	ldi	r24, 0x20	; 32
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 a38:	2a 94       	dec	r2
 a3a:	f4 cf       	rjmp	.-24     	; 0xa24 <__DATA_REGION_LENGTH__+0x24>
 a3c:	f5 01       	movw	r30, r10
 a3e:	37 fc       	sbrc	r3, 7
 a40:	85 91       	lpm	r24, Z+
 a42:	37 fe       	sbrs	r3, 7
 a44:	81 91       	ld	r24, Z+
 a46:	5f 01       	movw	r10, r30
 a48:	b6 01       	movw	r22, r12
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 a50:	21 10       	cpse	r2, r1
 a52:	2a 94       	dec	r2
 a54:	21 e0       	ldi	r18, 0x01	; 1
 a56:	82 1a       	sub	r8, r18
 a58:	91 08       	sbc	r9, r1
 a5a:	81 14       	cp	r8, r1
 a5c:	91 04       	cpc	r9, r1
 a5e:	71 f7       	brne	.-36     	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
 a60:	e8 c0       	rjmp	.+464    	; 0xc32 <__stack+0x133>
 a62:	84 36       	cpi	r24, 0x64	; 100
 a64:	11 f0       	breq	.+4      	; 0xa6a <__DATA_REGION_LENGTH__+0x6a>
 a66:	89 36       	cpi	r24, 0x69	; 105
 a68:	41 f5       	brne	.+80     	; 0xaba <__DATA_REGION_LENGTH__+0xba>
 a6a:	f8 01       	movw	r30, r16
 a6c:	37 fe       	sbrs	r3, 7
 a6e:	07 c0       	rjmp	.+14     	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
 a70:	60 81       	ld	r22, Z
 a72:	71 81       	ldd	r23, Z+1	; 0x01
 a74:	82 81       	ldd	r24, Z+2	; 0x02
 a76:	93 81       	ldd	r25, Z+3	; 0x03
 a78:	0c 5f       	subi	r16, 0xFC	; 252
 a7a:	1f 4f       	sbci	r17, 0xFF	; 255
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__DATA_REGION_LENGTH__+0x8e>
 a7e:	60 81       	ld	r22, Z
 a80:	71 81       	ldd	r23, Z+1	; 0x01
 a82:	07 2e       	mov	r0, r23
 a84:	00 0c       	add	r0, r0
 a86:	88 0b       	sbc	r24, r24
 a88:	99 0b       	sbc	r25, r25
 a8a:	0e 5f       	subi	r16, 0xFE	; 254
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	f3 2d       	mov	r31, r3
 a90:	ff 76       	andi	r31, 0x6F	; 111
 a92:	3f 2e       	mov	r3, r31
 a94:	97 ff       	sbrs	r25, 7
 a96:	09 c0       	rjmp	.+18     	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
 a98:	90 95       	com	r25
 a9a:	80 95       	com	r24
 a9c:	70 95       	com	r23
 a9e:	61 95       	neg	r22
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	f0 68       	ori	r31, 0x80	; 128
 aa8:	3f 2e       	mov	r3, r31
 aaa:	2a e0       	ldi	r18, 0x0A	; 10
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	a3 01       	movw	r20, r6
 ab0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__ultoa_invert>
 ab4:	88 2e       	mov	r8, r24
 ab6:	86 18       	sub	r8, r6
 ab8:	45 c0       	rjmp	.+138    	; 0xb44 <__stack+0x45>
 aba:	85 37       	cpi	r24, 0x75	; 117
 abc:	31 f4       	brne	.+12     	; 0xaca <__DATA_REGION_LENGTH__+0xca>
 abe:	23 2d       	mov	r18, r3
 ac0:	2f 7e       	andi	r18, 0xEF	; 239
 ac2:	b2 2e       	mov	r11, r18
 ac4:	2a e0       	ldi	r18, 0x0A	; 10
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	25 c0       	rjmp	.+74     	; 0xb14 <__stack+0x15>
 aca:	93 2d       	mov	r25, r3
 acc:	99 7f       	andi	r25, 0xF9	; 249
 ace:	b9 2e       	mov	r11, r25
 ad0:	8f 36       	cpi	r24, 0x6F	; 111
 ad2:	c1 f0       	breq	.+48     	; 0xb04 <__stack+0x5>
 ad4:	18 f4       	brcc	.+6      	; 0xadc <__DATA_REGION_LENGTH__+0xdc>
 ad6:	88 35       	cpi	r24, 0x58	; 88
 ad8:	79 f0       	breq	.+30     	; 0xaf8 <__DATA_REGION_LENGTH__+0xf8>
 ada:	b5 c0       	rjmp	.+362    	; 0xc46 <__stack+0x147>
 adc:	80 37       	cpi	r24, 0x70	; 112
 ade:	19 f0       	breq	.+6      	; 0xae6 <__DATA_REGION_LENGTH__+0xe6>
 ae0:	88 37       	cpi	r24, 0x78	; 120
 ae2:	21 f0       	breq	.+8      	; 0xaec <__DATA_REGION_LENGTH__+0xec>
 ae4:	b0 c0       	rjmp	.+352    	; 0xc46 <__stack+0x147>
 ae6:	e9 2f       	mov	r30, r25
 ae8:	e0 61       	ori	r30, 0x10	; 16
 aea:	be 2e       	mov	r11, r30
 aec:	b4 fe       	sbrs	r11, 4
 aee:	0d c0       	rjmp	.+26     	; 0xb0a <__stack+0xb>
 af0:	fb 2d       	mov	r31, r11
 af2:	f4 60       	ori	r31, 0x04	; 4
 af4:	bf 2e       	mov	r11, r31
 af6:	09 c0       	rjmp	.+18     	; 0xb0a <__stack+0xb>
 af8:	34 fe       	sbrs	r3, 4
 afa:	0a c0       	rjmp	.+20     	; 0xb10 <__stack+0x11>
 afc:	29 2f       	mov	r18, r25
 afe:	26 60       	ori	r18, 0x06	; 6
 b00:	b2 2e       	mov	r11, r18
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <__stack+0x11>
 b04:	28 e0       	ldi	r18, 0x08	; 8
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	05 c0       	rjmp	.+10     	; 0xb14 <__stack+0x15>
 b0a:	20 e1       	ldi	r18, 0x10	; 16
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <__stack+0x15>
 b10:	20 e1       	ldi	r18, 0x10	; 16
 b12:	32 e0       	ldi	r19, 0x02	; 2
 b14:	f8 01       	movw	r30, r16
 b16:	b7 fe       	sbrs	r11, 7
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <__stack+0x29>
 b1a:	60 81       	ld	r22, Z
 b1c:	71 81       	ldd	r23, Z+1	; 0x01
 b1e:	82 81       	ldd	r24, Z+2	; 0x02
 b20:	93 81       	ldd	r25, Z+3	; 0x03
 b22:	0c 5f       	subi	r16, 0xFC	; 252
 b24:	1f 4f       	sbci	r17, 0xFF	; 255
 b26:	06 c0       	rjmp	.+12     	; 0xb34 <__stack+0x35>
 b28:	60 81       	ld	r22, Z
 b2a:	71 81       	ldd	r23, Z+1	; 0x01
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 5f       	subi	r16, 0xFE	; 254
 b32:	1f 4f       	sbci	r17, 0xFF	; 255
 b34:	a3 01       	movw	r20, r6
 b36:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__ultoa_invert>
 b3a:	88 2e       	mov	r8, r24
 b3c:	86 18       	sub	r8, r6
 b3e:	fb 2d       	mov	r31, r11
 b40:	ff 77       	andi	r31, 0x7F	; 127
 b42:	3f 2e       	mov	r3, r31
 b44:	36 fe       	sbrs	r3, 6
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x63>
 b48:	23 2d       	mov	r18, r3
 b4a:	2e 7f       	andi	r18, 0xFE	; 254
 b4c:	a2 2e       	mov	r10, r18
 b4e:	89 14       	cp	r8, r9
 b50:	58 f4       	brcc	.+22     	; 0xb68 <__stack+0x69>
 b52:	34 fe       	sbrs	r3, 4
 b54:	0b c0       	rjmp	.+22     	; 0xb6c <__stack+0x6d>
 b56:	32 fc       	sbrc	r3, 2
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <__stack+0x6d>
 b5a:	83 2d       	mov	r24, r3
 b5c:	8e 7e       	andi	r24, 0xEE	; 238
 b5e:	a8 2e       	mov	r10, r24
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <__stack+0x6d>
 b62:	b8 2c       	mov	r11, r8
 b64:	a3 2c       	mov	r10, r3
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <__stack+0x6f>
 b68:	b8 2c       	mov	r11, r8
 b6a:	01 c0       	rjmp	.+2      	; 0xb6e <__stack+0x6f>
 b6c:	b9 2c       	mov	r11, r9
 b6e:	a4 fe       	sbrs	r10, 4
 b70:	0f c0       	rjmp	.+30     	; 0xb90 <__stack+0x91>
 b72:	fe 01       	movw	r30, r28
 b74:	e8 0d       	add	r30, r8
 b76:	f1 1d       	adc	r31, r1
 b78:	80 81       	ld	r24, Z
 b7a:	80 33       	cpi	r24, 0x30	; 48
 b7c:	21 f4       	brne	.+8      	; 0xb86 <__stack+0x87>
 b7e:	9a 2d       	mov	r25, r10
 b80:	99 7e       	andi	r25, 0xE9	; 233
 b82:	a9 2e       	mov	r10, r25
 b84:	09 c0       	rjmp	.+18     	; 0xb98 <__stack+0x99>
 b86:	a2 fe       	sbrs	r10, 2
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <__stack+0x97>
 b8a:	b3 94       	inc	r11
 b8c:	b3 94       	inc	r11
 b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__stack+0x99>
 b90:	8a 2d       	mov	r24, r10
 b92:	86 78       	andi	r24, 0x86	; 134
 b94:	09 f0       	breq	.+2      	; 0xb98 <__stack+0x99>
 b96:	b3 94       	inc	r11
 b98:	a3 fc       	sbrc	r10, 3
 b9a:	11 c0       	rjmp	.+34     	; 0xbbe <__stack+0xbf>
 b9c:	a0 fe       	sbrs	r10, 0
 b9e:	06 c0       	rjmp	.+12     	; 0xbac <__stack+0xad>
 ba0:	b2 14       	cp	r11, r2
 ba2:	88 f4       	brcc	.+34     	; 0xbc6 <__stack+0xc7>
 ba4:	28 0c       	add	r2, r8
 ba6:	92 2c       	mov	r9, r2
 ba8:	9b 18       	sub	r9, r11
 baa:	0e c0       	rjmp	.+28     	; 0xbc8 <__stack+0xc9>
 bac:	b2 14       	cp	r11, r2
 bae:	60 f4       	brcc	.+24     	; 0xbc8 <__stack+0xc9>
 bb0:	b6 01       	movw	r22, r12
 bb2:	80 e2       	ldi	r24, 0x20	; 32
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 bba:	b3 94       	inc	r11
 bbc:	f7 cf       	rjmp	.-18     	; 0xbac <__stack+0xad>
 bbe:	b2 14       	cp	r11, r2
 bc0:	18 f4       	brcc	.+6      	; 0xbc8 <__stack+0xc9>
 bc2:	2b 18       	sub	r2, r11
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <__stack+0xcb>
 bc6:	98 2c       	mov	r9, r8
 bc8:	21 2c       	mov	r2, r1
 bca:	a4 fe       	sbrs	r10, 4
 bcc:	10 c0       	rjmp	.+32     	; 0xbee <__stack+0xef>
 bce:	b6 01       	movw	r22, r12
 bd0:	80 e3       	ldi	r24, 0x30	; 48
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 bd8:	a2 fe       	sbrs	r10, 2
 bda:	17 c0       	rjmp	.+46     	; 0xc0a <__stack+0x10b>
 bdc:	a1 fc       	sbrc	r10, 1
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <__stack+0xe7>
 be0:	88 e7       	ldi	r24, 0x78	; 120
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	02 c0       	rjmp	.+4      	; 0xbea <__stack+0xeb>
 be6:	88 e5       	ldi	r24, 0x58	; 88
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	b6 01       	movw	r22, r12
 bec:	0c c0       	rjmp	.+24     	; 0xc06 <__stack+0x107>
 bee:	8a 2d       	mov	r24, r10
 bf0:	86 78       	andi	r24, 0x86	; 134
 bf2:	59 f0       	breq	.+22     	; 0xc0a <__stack+0x10b>
 bf4:	a1 fe       	sbrs	r10, 1
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <__stack+0xfd>
 bf8:	8b e2       	ldi	r24, 0x2B	; 43
 bfa:	01 c0       	rjmp	.+2      	; 0xbfe <__stack+0xff>
 bfc:	80 e2       	ldi	r24, 0x20	; 32
 bfe:	a7 fc       	sbrc	r10, 7
 c00:	8d e2       	ldi	r24, 0x2D	; 45
 c02:	b6 01       	movw	r22, r12
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c0a:	89 14       	cp	r8, r9
 c0c:	38 f4       	brcc	.+14     	; 0xc1c <__stack+0x11d>
 c0e:	b6 01       	movw	r22, r12
 c10:	80 e3       	ldi	r24, 0x30	; 48
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c18:	9a 94       	dec	r9
 c1a:	f7 cf       	rjmp	.-18     	; 0xc0a <__stack+0x10b>
 c1c:	8a 94       	dec	r8
 c1e:	f3 01       	movw	r30, r6
 c20:	e8 0d       	add	r30, r8
 c22:	f1 1d       	adc	r31, r1
 c24:	80 81       	ld	r24, Z
 c26:	b6 01       	movw	r22, r12
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c2e:	81 10       	cpse	r8, r1
 c30:	f5 cf       	rjmp	.-22     	; 0xc1c <__stack+0x11d>
 c32:	22 20       	and	r2, r2
 c34:	09 f4       	brne	.+2      	; 0xc38 <__stack+0x139>
 c36:	42 ce       	rjmp	.-892    	; 0x8bc <vfprintf+0x24>
 c38:	b6 01       	movw	r22, r12
 c3a:	80 e2       	ldi	r24, 0x20	; 32
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	0e 94 43 06 	call	0xc86	; 0xc86 <fputc>
 c42:	2a 94       	dec	r2
 c44:	f6 cf       	rjmp	.-20     	; 0xc32 <__stack+0x133>
 c46:	f6 01       	movw	r30, r12
 c48:	86 81       	ldd	r24, Z+6	; 0x06
 c4a:	97 81       	ldd	r25, Z+7	; 0x07
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__stack+0x153>
 c4e:	8f ef       	ldi	r24, 0xFF	; 255
 c50:	9f ef       	ldi	r25, 0xFF	; 255
 c52:	2b 96       	adiw	r28, 0x0b	; 11
 c54:	e2 e1       	ldi	r30, 0x12	; 18
 c56:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__epilogue_restores__>

00000c5a <strnlen_P>:
 c5a:	fc 01       	movw	r30, r24
 c5c:	05 90       	lpm	r0, Z+
 c5e:	61 50       	subi	r22, 0x01	; 1
 c60:	70 40       	sbci	r23, 0x00	; 0
 c62:	01 10       	cpse	r0, r1
 c64:	d8 f7       	brcc	.-10     	; 0xc5c <strnlen_P+0x2>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	8e 0f       	add	r24, r30
 c6c:	9f 1f       	adc	r25, r31
 c6e:	08 95       	ret

00000c70 <strnlen>:
 c70:	fc 01       	movw	r30, r24
 c72:	61 50       	subi	r22, 0x01	; 1
 c74:	70 40       	sbci	r23, 0x00	; 0
 c76:	01 90       	ld	r0, Z+
 c78:	01 10       	cpse	r0, r1
 c7a:	d8 f7       	brcc	.-10     	; 0xc72 <strnlen+0x2>
 c7c:	80 95       	com	r24
 c7e:	90 95       	com	r25
 c80:	8e 0f       	add	r24, r30
 c82:	9f 1f       	adc	r25, r31
 c84:	08 95       	ret

00000c86 <fputc>:
 c86:	0f 93       	push	r16
 c88:	1f 93       	push	r17
 c8a:	cf 93       	push	r28
 c8c:	df 93       	push	r29
 c8e:	fb 01       	movw	r30, r22
 c90:	23 81       	ldd	r18, Z+3	; 0x03
 c92:	21 fd       	sbrc	r18, 1
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <fputc+0x16>
 c96:	8f ef       	ldi	r24, 0xFF	; 255
 c98:	9f ef       	ldi	r25, 0xFF	; 255
 c9a:	2c c0       	rjmp	.+88     	; 0xcf4 <fputc+0x6e>
 c9c:	22 ff       	sbrs	r18, 2
 c9e:	16 c0       	rjmp	.+44     	; 0xccc <fputc+0x46>
 ca0:	46 81       	ldd	r20, Z+6	; 0x06
 ca2:	57 81       	ldd	r21, Z+7	; 0x07
 ca4:	24 81       	ldd	r18, Z+4	; 0x04
 ca6:	35 81       	ldd	r19, Z+5	; 0x05
 ca8:	42 17       	cp	r20, r18
 caa:	53 07       	cpc	r21, r19
 cac:	44 f4       	brge	.+16     	; 0xcbe <fputc+0x38>
 cae:	a0 81       	ld	r26, Z
 cb0:	b1 81       	ldd	r27, Z+1	; 0x01
 cb2:	9d 01       	movw	r18, r26
 cb4:	2f 5f       	subi	r18, 0xFF	; 255
 cb6:	3f 4f       	sbci	r19, 0xFF	; 255
 cb8:	31 83       	std	Z+1, r19	; 0x01
 cba:	20 83       	st	Z, r18
 cbc:	8c 93       	st	X, r24
 cbe:	26 81       	ldd	r18, Z+6	; 0x06
 cc0:	37 81       	ldd	r19, Z+7	; 0x07
 cc2:	2f 5f       	subi	r18, 0xFF	; 255
 cc4:	3f 4f       	sbci	r19, 0xFF	; 255
 cc6:	37 83       	std	Z+7, r19	; 0x07
 cc8:	26 83       	std	Z+6, r18	; 0x06
 cca:	14 c0       	rjmp	.+40     	; 0xcf4 <fputc+0x6e>
 ccc:	8b 01       	movw	r16, r22
 cce:	ec 01       	movw	r28, r24
 cd0:	fb 01       	movw	r30, r22
 cd2:	00 84       	ldd	r0, Z+8	; 0x08
 cd4:	f1 85       	ldd	r31, Z+9	; 0x09
 cd6:	e0 2d       	mov	r30, r0
 cd8:	09 95       	icall
 cda:	89 2b       	or	r24, r25
 cdc:	e1 f6       	brne	.-72     	; 0xc96 <fputc+0x10>
 cde:	d8 01       	movw	r26, r16
 ce0:	16 96       	adiw	r26, 0x06	; 6
 ce2:	8d 91       	ld	r24, X+
 ce4:	9c 91       	ld	r25, X
 ce6:	17 97       	sbiw	r26, 0x07	; 7
 ce8:	01 96       	adiw	r24, 0x01	; 1
 cea:	17 96       	adiw	r26, 0x07	; 7
 cec:	9c 93       	st	X, r25
 cee:	8e 93       	st	-X, r24
 cf0:	16 97       	sbiw	r26, 0x06	; 6
 cf2:	ce 01       	movw	r24, r28
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	0f 91       	pop	r16
 cfc:	08 95       	ret

00000cfe <__ultoa_invert>:
 cfe:	fa 01       	movw	r30, r20
 d00:	aa 27       	eor	r26, r26
 d02:	28 30       	cpi	r18, 0x08	; 8
 d04:	51 f1       	breq	.+84     	; 0xd5a <__ultoa_invert+0x5c>
 d06:	20 31       	cpi	r18, 0x10	; 16
 d08:	81 f1       	breq	.+96     	; 0xd6a <__ultoa_invert+0x6c>
 d0a:	e8 94       	clt
 d0c:	6f 93       	push	r22
 d0e:	6e 7f       	andi	r22, 0xFE	; 254
 d10:	6e 5f       	subi	r22, 0xFE	; 254
 d12:	7f 4f       	sbci	r23, 0xFF	; 255
 d14:	8f 4f       	sbci	r24, 0xFF	; 255
 d16:	9f 4f       	sbci	r25, 0xFF	; 255
 d18:	af 4f       	sbci	r26, 0xFF	; 255
 d1a:	b1 e0       	ldi	r27, 0x01	; 1
 d1c:	3e d0       	rcall	.+124    	; 0xd9a <__ultoa_invert+0x9c>
 d1e:	b4 e0       	ldi	r27, 0x04	; 4
 d20:	3c d0       	rcall	.+120    	; 0xd9a <__ultoa_invert+0x9c>
 d22:	67 0f       	add	r22, r23
 d24:	78 1f       	adc	r23, r24
 d26:	89 1f       	adc	r24, r25
 d28:	9a 1f       	adc	r25, r26
 d2a:	a1 1d       	adc	r26, r1
 d2c:	68 0f       	add	r22, r24
 d2e:	79 1f       	adc	r23, r25
 d30:	8a 1f       	adc	r24, r26
 d32:	91 1d       	adc	r25, r1
 d34:	a1 1d       	adc	r26, r1
 d36:	6a 0f       	add	r22, r26
 d38:	71 1d       	adc	r23, r1
 d3a:	81 1d       	adc	r24, r1
 d3c:	91 1d       	adc	r25, r1
 d3e:	a1 1d       	adc	r26, r1
 d40:	20 d0       	rcall	.+64     	; 0xd82 <__ultoa_invert+0x84>
 d42:	09 f4       	brne	.+2      	; 0xd46 <__ultoa_invert+0x48>
 d44:	68 94       	set
 d46:	3f 91       	pop	r19
 d48:	2a e0       	ldi	r18, 0x0A	; 10
 d4a:	26 9f       	mul	r18, r22
 d4c:	11 24       	eor	r1, r1
 d4e:	30 19       	sub	r19, r0
 d50:	30 5d       	subi	r19, 0xD0	; 208
 d52:	31 93       	st	Z+, r19
 d54:	de f6       	brtc	.-74     	; 0xd0c <__ultoa_invert+0xe>
 d56:	cf 01       	movw	r24, r30
 d58:	08 95       	ret
 d5a:	46 2f       	mov	r20, r22
 d5c:	47 70       	andi	r20, 0x07	; 7
 d5e:	40 5d       	subi	r20, 0xD0	; 208
 d60:	41 93       	st	Z+, r20
 d62:	b3 e0       	ldi	r27, 0x03	; 3
 d64:	0f d0       	rcall	.+30     	; 0xd84 <__ultoa_invert+0x86>
 d66:	c9 f7       	brne	.-14     	; 0xd5a <__ultoa_invert+0x5c>
 d68:	f6 cf       	rjmp	.-20     	; 0xd56 <__ultoa_invert+0x58>
 d6a:	46 2f       	mov	r20, r22
 d6c:	4f 70       	andi	r20, 0x0F	; 15
 d6e:	40 5d       	subi	r20, 0xD0	; 208
 d70:	4a 33       	cpi	r20, 0x3A	; 58
 d72:	18 f0       	brcs	.+6      	; 0xd7a <__ultoa_invert+0x7c>
 d74:	49 5d       	subi	r20, 0xD9	; 217
 d76:	31 fd       	sbrc	r19, 1
 d78:	40 52       	subi	r20, 0x20	; 32
 d7a:	41 93       	st	Z+, r20
 d7c:	02 d0       	rcall	.+4      	; 0xd82 <__ultoa_invert+0x84>
 d7e:	a9 f7       	brne	.-22     	; 0xd6a <__ultoa_invert+0x6c>
 d80:	ea cf       	rjmp	.-44     	; 0xd56 <__ultoa_invert+0x58>
 d82:	b4 e0       	ldi	r27, 0x04	; 4
 d84:	a6 95       	lsr	r26
 d86:	97 95       	ror	r25
 d88:	87 95       	ror	r24
 d8a:	77 95       	ror	r23
 d8c:	67 95       	ror	r22
 d8e:	ba 95       	dec	r27
 d90:	c9 f7       	brne	.-14     	; 0xd84 <__ultoa_invert+0x86>
 d92:	00 97       	sbiw	r24, 0x00	; 0
 d94:	61 05       	cpc	r22, r1
 d96:	71 05       	cpc	r23, r1
 d98:	08 95       	ret
 d9a:	9b 01       	movw	r18, r22
 d9c:	ac 01       	movw	r20, r24
 d9e:	0a 2e       	mov	r0, r26
 da0:	06 94       	lsr	r0
 da2:	57 95       	ror	r21
 da4:	47 95       	ror	r20
 da6:	37 95       	ror	r19
 da8:	27 95       	ror	r18
 daa:	ba 95       	dec	r27
 dac:	c9 f7       	brne	.-14     	; 0xda0 <__ultoa_invert+0xa2>
 dae:	62 0f       	add	r22, r18
 db0:	73 1f       	adc	r23, r19
 db2:	84 1f       	adc	r24, r20
 db4:	95 1f       	adc	r25, r21
 db6:	a0 1d       	adc	r26, r0
 db8:	08 95       	ret

00000dba <__prologue_saves__>:
 dba:	2f 92       	push	r2
 dbc:	3f 92       	push	r3
 dbe:	4f 92       	push	r4
 dc0:	5f 92       	push	r5
 dc2:	6f 92       	push	r6
 dc4:	7f 92       	push	r7
 dc6:	8f 92       	push	r8
 dc8:	9f 92       	push	r9
 dca:	af 92       	push	r10
 dcc:	bf 92       	push	r11
 dce:	cf 92       	push	r12
 dd0:	df 92       	push	r13
 dd2:	ef 92       	push	r14
 dd4:	ff 92       	push	r15
 dd6:	0f 93       	push	r16
 dd8:	1f 93       	push	r17
 dda:	cf 93       	push	r28
 ddc:	df 93       	push	r29
 dde:	cd b7       	in	r28, 0x3d	; 61
 de0:	de b7       	in	r29, 0x3e	; 62
 de2:	ca 1b       	sub	r28, r26
 de4:	db 0b       	sbc	r29, r27
 de6:	0f b6       	in	r0, 0x3f	; 63
 de8:	f8 94       	cli
 dea:	de bf       	out	0x3e, r29	; 62
 dec:	0f be       	out	0x3f, r0	; 63
 dee:	cd bf       	out	0x3d, r28	; 61
 df0:	09 94       	ijmp

00000df2 <__epilogue_restores__>:
 df2:	2a 88       	ldd	r2, Y+18	; 0x12
 df4:	39 88       	ldd	r3, Y+17	; 0x11
 df6:	48 88       	ldd	r4, Y+16	; 0x10
 df8:	5f 84       	ldd	r5, Y+15	; 0x0f
 dfa:	6e 84       	ldd	r6, Y+14	; 0x0e
 dfc:	7d 84       	ldd	r7, Y+13	; 0x0d
 dfe:	8c 84       	ldd	r8, Y+12	; 0x0c
 e00:	9b 84       	ldd	r9, Y+11	; 0x0b
 e02:	aa 84       	ldd	r10, Y+10	; 0x0a
 e04:	b9 84       	ldd	r11, Y+9	; 0x09
 e06:	c8 84       	ldd	r12, Y+8	; 0x08
 e08:	df 80       	ldd	r13, Y+7	; 0x07
 e0a:	ee 80       	ldd	r14, Y+6	; 0x06
 e0c:	fd 80       	ldd	r15, Y+5	; 0x05
 e0e:	0c 81       	ldd	r16, Y+4	; 0x04
 e10:	1b 81       	ldd	r17, Y+3	; 0x03
 e12:	aa 81       	ldd	r26, Y+2	; 0x02
 e14:	b9 81       	ldd	r27, Y+1	; 0x01
 e16:	ce 0f       	add	r28, r30
 e18:	d1 1d       	adc	r29, r1
 e1a:	0f b6       	in	r0, 0x3f	; 63
 e1c:	f8 94       	cli
 e1e:	de bf       	out	0x3e, r29	; 62
 e20:	0f be       	out	0x3f, r0	; 63
 e22:	cd bf       	out	0x3d, r28	; 61
 e24:	ed 01       	movw	r28, r26
 e26:	08 95       	ret

00000e28 <_exit>:
 e28:	f8 94       	cli

00000e2a <__stop_program>:
 e2a:	ff cf       	rjmp	.-2      	; 0xe2a <__stop_program>
