
lampeDimmer_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000d5a  00000dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800106  00800106  00000df4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001170  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb2  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fc  00000000  00000000  00002d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071e  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000564  00000000  00000000  00003caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000420e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_25>
  68:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_26>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e5       	ldi	r30, 0x5A	; 90
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ad 3a       	cpi	r26, 0xAD	; 173
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 48 01 	call	0x290	; 0x290 <main>
  e2:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
	//ADCSRA = ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	//ADCSRB = ADHSM ACME MUX5 – ADTS3 ADTS2 ADTS1 ADTS0
	//DIDR0 = ADC7D ADC6D ADC5D ADC4D - - ADC1D ADC0D
	//DIDR2 = - - ADC13D ADC12D ADC11D ADC10D ADC9D ADC8D
	
	ADMUX = (1<<REFS0); //Référence sur AVcc avec un condensateur sur la broche AREF.
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enable / ADC diviseur = 128 (le plus lent possible).
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = (1<<ADHSM);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = (1<<ADC0D); //entrée numérique désactivée pour le ADC0.
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 102:	08 95       	ret

00000104 <adcRead>:
}

uint16_t adcRead(void)
{
	ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //On attend que la lecture du ADC soir terminée.
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <adcRead+0xa>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 11c:	08 95       	ret

0000011e <adcRead8>:

uint8_t adcRead8(void)
{
	return (adcRead() >> 2);
 11e:	0e 94 82 00 	call	0x104	; 0x104 <adcRead>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	08 95       	ret

0000012c <__vector_21>:

/**
*@brief Interruption de la comparaison sur OCR0A (timer0) qui met msFlag à 1 lorsque msCnt atteint TIMER_CNT_CYCLE qui est définie dans le define. msCnt est incrémenté à chaques 1ms.
*/
ISR(TIMER0_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	msCnt++;
 13a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msCnt>
 13e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msCnt+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <msCnt+0x1>
 148:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <msCnt>
	if (msCnt >= TIMER_CNT_CYCLE)
 14c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msCnt>
 150:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msCnt+0x1>
 154:	49 97       	sbiw	r24, 0x19	; 25
 156:	60 f0       	brcs	.+24     	; 0x170 <__vector_21+0x44>
	{
		msCnt -= TIMER_CNT_CYCLE;
 158:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msCnt>
 15c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msCnt+0x1>
 160:	49 97       	sbiw	r24, 0x19	; 25
 162:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <msCnt+0x1>
 166:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <msCnt>
		msFlag = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <msFlag>
	}
}
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <execRxCommand>:

void execRxCommand()
{
	switch (rxCommande)
 17e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rxCommande>
 182:	88 23       	and	r24, r24
 184:	19 f0       	breq	.+6      	; 0x18c <execRxCommand+0xe>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	21 f0       	breq	.+8      	; 0x192 <execRxCommand+0x14>
 18a:	08 95       	ret
	{
		case GET_ETAT:
			txCommande = 0;
 18c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <txCommande>
			break;
 190:	08 95       	ret
		case SET_VAL:
			valueOut = rxData[0];
 192:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <rxData>
 196:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <valueOut>
 19a:	08 95       	ret

0000019c <parseRxData>:
* @param data la donnée à traiter
*/
void parseRxData(uint8_t data)
{
	//switch case des différents paramètres de la trame de réception
	switch(rxState)
 19c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <rxState>
 1a0:	92 30       	cpi	r25, 0x02	; 2
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <parseRxData+0x40>
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <parseRxData+0x10>
 1a6:	91 30       	cpi	r25, 0x01	; 1
 1a8:	71 f0       	breq	.+28     	; 0x1c6 <parseRxData+0x2a>
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <parseRxData+0x18>
 1ac:	93 30       	cpi	r25, 0x03	; 3
 1ae:	21 f1       	breq	.+72     	; 0x1f8 <parseRxData+0x5c>
 1b0:	94 30       	cpi	r25, 0x04	; 4
 1b2:	a1 f1       	breq	.+104    	; 0x21c <parseRxData+0x80>
	{
		//confirmation que la trame débute par '<'
		default :
			if(data == '<')
 1b4:	8c 33       	cpi	r24, 0x3C	; 60
 1b6:	09 f0       	breq	.+2      	; 0x1ba <parseRxData+0x1e>
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <parseRxData+0xa0>
			{
				rxState = RXSIZE;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <rxState>
				rxDataCnt = 0;
 1c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rxDataCnt>
 1c4:	08 95       	ret
			}
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXSIZE:
			rxDataSize = data;
 1c6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <rxDataSize>
			if(rxDataSize >= _MAX_RXDATASIZE_)
 1ca:	80 31       	cpi	r24, 0x10	; 16
 1cc:	18 f0       	brcs	.+6      	; 0x1d4 <parseRxData+0x38>
				rxState = WAIT;
 1ce:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <rxState>
 1d2:	08 95       	ret
			else
				rxState = RXCOMMANDE;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <rxState>
 1da:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXCOMMANDE:
			rxCommande = data;
 1dc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <rxCommande>
			if(rxDataSize)
 1e0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <rxDataSize>
 1e4:	88 23       	and	r24, r24
 1e6:	21 f0       	breq	.+8      	; 0x1f0 <parseRxData+0x54>
				rxState = RXDATA;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <rxState>
 1ee:	08 95       	ret
			else
				rxState = VALIDATE;
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <rxState>
 1f6:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXDATA:
			rxData[rxDataCnt++] = data;
 1f8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <rxDataCnt>
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	9e 0f       	add	r25, r30
 200:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <rxDataCnt>
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	eb 5e       	subi	r30, 0xEB	; 235
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	80 83       	st	Z, r24
			if(rxDataCnt == rxDataSize)
 20c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <rxDataSize>
 210:	98 13       	cpse	r25, r24
 212:	14 c0       	rjmp	.+40     	; 0x23c <parseRxData+0xa0>
				rxState = VALIDATE;
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <rxState>
 21a:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//confirmation que la trame se termine par '>'
		case VALIDATE :
			rxState = WAIT;
 21c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <rxState>
			if(data == '>')
 220:	8e 33       	cpi	r24, 0x3E	; 62
 222:	19 f4       	brne	.+6      	; 0x22a <parseRxData+0x8e>
				execRxCommand();//si oui la fonction execRxCommand() est appelée
 224:	0e 94 bf 00 	call	0x17e	; 0x17e <execRxCommand>
 228:	08 95       	ret
			else
				rxErrorCommCnt++;// sinon le nombre d'erreur augmente
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 22e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 238:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 23c:	08 95       	ret

0000023e <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	uint8_t top = 250; //Valeur de OCR0A.
	TCCR0A = 0b00000010; //Mode CTC.
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Prescaler de 64.
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0b00000010; //Output compare match A interrupt enable.
 246:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = top-1; //62.5ns * 64 * 250 = 1ms.
 24a:	89 ef       	ldi	r24, 0xF9	; 249
 24c:	87 bd       	out	0x27, r24	; 39
	sei();
 24e:	78 94       	sei
 250:	08 95       	ret

00000252 <timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4A = 0b10000010; //PWM output OC4A.
 252:	82 e8       	ldi	r24, 0x82	; 130
 254:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	TCCR4B = 0b00000100; //Prescaler de 4.
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	OCR4C = 255-1; //62.5ns * 4 * 255 = 127.5us.
 25e:	8e ef       	ldi	r24, 0xFE	; 254
 260:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
	OUTPUT_VALUE(0); //Valeur de la sortie.
 264:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>
 268:	08 95       	ret

0000026a <miscInit>:
	*/
}

void miscInit(void)
{
	adcInit(); //Appel de la fonction d'initialisation du ADC.
 26a:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
	timer0Init(); //Initialisation de timer 0.
 26e:	0e 94 1f 01 	call	0x23e	; 0x23e <timer0Init>
	timer4Init(); //Initialisation de timer 4.
 272:	0e 94 29 01 	call	0x252	; 0x252 <timer4Init>
	usartInit(1000000, F_CPU); //Initialisation du USART à 1Mbps.
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	34 e2       	ldi	r19, 0x24	; 36
 27a:	44 ef       	ldi	r20, 0xF4	; 244
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	60 e4       	ldi	r22, 0x40	; 64
 280:	72 e4       	ldi	r23, 0x42	; 66
 282:	8f e0       	ldi	r24, 0x0F	; 15
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <usartInit>
	
	OUTPUT_INIT();
 28a:	3f 9a       	sbi	0x07, 7	; 7
	SWITCH_INIT();
 28c:	2b 9a       	sbi	0x05, 3	; 5
 28e:	08 95       	ret

00000290 <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 290:	0e 94 35 01 	call	0x26a	; 0x26a <miscInit>
				if (valueAdc != adcRead8())
				{
					valueAdc = adcRead8();
					valueOut = adcRead8();
				}
				sprintf(msg, "%d\n\r", valueOut);
 294:	0f 2e       	mov	r0, r31
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ef 2e       	mov	r14, r31
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	ff 2e       	mov	r15, r31
 29e:	f0 2d       	mov	r31, r0
 2a0:	05 e2       	ldi	r16, 0x25	; 37
 2a2:	11 e0       	ldi	r17, 0x01	; 1
				//usartSendString(msg);
			}
		}
		else
			valueOut = 0;
		OUTPUT_VALUE(valueOut);
 2a4:	cf ec       	ldi	r28, 0xCF	; 207
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
{
	miscInit();
	
	while (1)
	{
		if (SWITCH())
 2a8:	1b 99       	sbic	0x03, 3	; 3
 2aa:	2d c0       	rjmp	.+90     	; 0x306 <main+0x76>
		{
			//valueOut = 0;
			if (usartRxAvailable()) //Si un caractère est disponible:
 2ac:	0e 94 72 02 	call	0x4e4	; 0x4e4 <usartRxAvailable>
 2b0:	88 23       	and	r24, r24
 2b2:	21 f0       	breq	.+8      	; 0x2bc <main+0x2c>
				parseRxData(usartRemRxData()); //appel de la fonction parseRxData() avec en paramètre la valeur retournée par usartRemRxData().
 2b4:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartRemRxData>
 2b8:	0e 94 ce 00 	call	0x19c	; 0x19c <parseRxData>
			if (msFlag)
 2bc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <msFlag>
 2c0:	88 23       	and	r24, r24
 2c2:	19 f1       	breq	.+70     	; 0x30a <main+0x7a>
			{
				msFlag = 0;
 2c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <msFlag>
				if (valueAdc != adcRead8())
 2c8:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 2cc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <valueAdc>
 2d0:	89 17       	cp	r24, r25
 2d2:	41 f0       	breq	.+16     	; 0x2e4 <main+0x54>
				{
					valueAdc = adcRead8();
 2d4:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 2d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valueAdc>
					valueOut = adcRead8();
 2dc:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 2e0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <valueOut>
				}
				sprintf(msg, "%d\n\r", valueOut);
 2e4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <valueOut>
 2e8:	1f 92       	push	r1
 2ea:	8f 93       	push	r24
 2ec:	ff 92       	push	r15
 2ee:	ef 92       	push	r14
 2f0:	1f 93       	push	r17
 2f2:	0f 93       	push	r16
 2f4:	0e 94 c1 03 	call	0x782	; 0x782 <sprintf>
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	02 c0       	rjmp	.+4      	; 0x30a <main+0x7a>
				//usartSendString(msg);
			}
		}
		else
			valueOut = 0;
 306:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <valueOut>
		OUTPUT_VALUE(valueOut);
 30a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <valueOut>
 30e:	88 83       	st	Y, r24
	}
 310:	cb cf       	rjmp	.-106    	; 0x2a8 <main+0x18>

00000312 <__vector_25>:

/**
*@brief Interruption nécessaires à la réception. Le buffer de réception est remplis avec la valeur de UDR1.
*/
ISR(USART1_RX_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
	_rxCnt++;
 328:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_rxCnt>
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_rxCnt>
	_rxBuffer[_rxBufferIn++] = UDR1;
 332:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxBufferIn>
 336:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_rxBufferIn+0x1>
 33a:	9c 01       	movw	r18, r24
 33c:	2f 5f       	subi	r18, 0xFF	; 255
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <_rxBufferIn+0x1>
 344:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <_rxBufferIn>
 348:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 34c:	fc 01       	movw	r30, r24
 34e:	e3 5d       	subi	r30, 0xD3	; 211
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	20 83       	st	Z, r18
	if (_rxBufferIn >= RX_BUFFER_SIZE)// Si la limite du buffer est atteinte rxBufferIn retourne à 0 et les premières donnés (les plus ancienne) sont écrasés.
 354:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_rxBufferIn>
 358:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_rxBufferIn+0x1>
 35c:	80 34       	cpi	r24, 0x40	; 64
 35e:	91 05       	cpc	r25, r1
 360:	20 f0       	brcs	.+8      	; 0x36a <__vector_25+0x58>
		_rxBufferIn = 0;
 362:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_rxBufferIn+0x1>
 366:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <_rxBufferIn>
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_26>:

/**
*@brief Interruption nécessaires à la transmission. Le buffer de transmission est vidé en donnant à UDR1 la valeur de l'octet à envoyer.
*/
ISR(USART1_UDRE_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	8f 93       	push	r24
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	if (!_txCnt)
 390:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_txCnt>
 394:	81 11       	cpse	r24, r1
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <__vector_26+0x24>
		UCSR1B &= ~(1<<UDRIE1);// Permet de sortir de l'interruption lorsqu'on sort du if de transmission c'est à dire lorsqu'il n'y a plus aucun caractère à transmettre.
 398:	e9 ec       	ldi	r30, 0xC9	; 201
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	80 83       	st	Z, r24
 3a2:	17 c0       	rjmp	.+46     	; 0x3d2 <__vector_26+0x52>
	else
	{
		_txCnt--;
 3a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_txCnt>
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_txCnt>
		UDR1 = _txBuffer[_txBufferOut++];
 3ae:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <_txBufferOut>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	8e 0f       	add	r24, r30
 3b6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_txBufferOut>
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	e3 59       	subi	r30, 0x93	; 147
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	80 81       	ld	r24, Z
 3c2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
		if (_txBufferOut >= TX_BUFFER_SIZE)
 3c6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_txBufferOut>
 3ca:	80 34       	cpi	r24, 0x40	; 64
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__vector_26+0x52>
			_txBufferOut = 0;
 3ce:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_txBufferOut>
	}
}
 3d2:	ff 91       	pop	r31
 3d4:	ef 91       	pop	r30
 3d6:	8f 91       	pop	r24
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <usartInit>:

void usartInit(uint32_t baudRate, uint32_t fcpu)
{
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	6b 01       	movw	r12, r22
 3ec:	7c 01       	movw	r14, r24
	if (baudRate >= 115200)
 3ee:	c1 14       	cp	r12, r1
 3f0:	82 ec       	ldi	r24, 0xC2	; 194
 3f2:	d8 06       	cpc	r13, r24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	e8 06       	cpc	r14, r24
 3f8:	f1 04       	cpc	r15, r1
 3fa:	20 f1       	brcs	.+72     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	{
		UCSR1A |= (1<<U2X1);
 3fc:	e8 ec       	ldi	r30, 0xC8	; 200
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	82 60       	ori	r24, 0x02	; 2
 404:	80 83       	st	Z, r24
		UBRR1 = ((fcpu >> 3) / baudRate)-0.5; // Calcul de UDRR1 la vitesse en fonction de baudrate en paramètre de la fonction.
 406:	ca 01       	movw	r24, r20
 408:	b9 01       	movw	r22, r18
 40a:	68 94       	set
 40c:	12 f8       	bld	r1, 2
 40e:	96 95       	lsr	r25
 410:	87 95       	ror	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	16 94       	lsr	r1
 418:	d1 f7       	brne	.-12     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 41a:	a7 01       	movw	r20, r14
 41c:	96 01       	movw	r18, r12
 41e:	0e 94 9f 03 	call	0x73e	; 0x73e <__udivmodsi4>
 422:	ca 01       	movw	r24, r20
 424:	b9 01       	movw	r22, r18
 426:	0e 94 11 03 	call	0x622	; 0x622 <__floatunsisf>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	5f e3       	ldi	r21, 0x3F	; 63
 432:	0e 94 75 02 	call	0x4ea	; 0x4ea <__subsf3>
 436:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fixunssfsi>
 43a:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 43e:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 442:	23 c0       	rjmp	.+70     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
	}
	else
	{
		UCSR1A &= ~(1<<U2X1);
 444:	e8 ec       	ldi	r30, 0xC8	; 200
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	8d 7f       	andi	r24, 0xFD	; 253
 44c:	80 83       	st	Z, r24
		UBRR1 = ((fcpu >> 4) / baudRate)-0.5; // Calcul de UDRR1 la vitesse en fonction de baudrate en paramètre de la fonction.
 44e:	ca 01       	movw	r24, r20
 450:	b9 01       	movw	r22, r18
 452:	68 94       	set
 454:	13 f8       	bld	r1, 3
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	16 94       	lsr	r1
 460:	d1 f7       	brne	.-12     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 462:	a7 01       	movw	r20, r14
 464:	96 01       	movw	r18, r12
 466:	0e 94 9f 03 	call	0x73e	; 0x73e <__udivmodsi4>
 46a:	ca 01       	movw	r24, r20
 46c:	b9 01       	movw	r22, r18
 46e:	0e 94 11 03 	call	0x622	; 0x622 <__floatunsisf>
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	5f e3       	ldi	r21, 0x3F	; 63
 47a:	0e 94 75 02 	call	0x4ea	; 0x4ea <__subsf3>
 47e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fixunssfsi>
 482:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 486:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	}
	UCSR1B |= ((1<<RXEN1) | (1<<TXEN1)); // Active RX et TX.
 48a:	e9 ec       	ldi	r30, 0xC9	; 201
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	88 61       	ori	r24, 0x18	; 24
 492:	80 83       	st	Z, r24
	sei();
 494:	78 94       	sei
	UCSR1B |= (1<<RXCIE1);
 496:	80 81       	ld	r24, Z
 498:	80 68       	ori	r24, 0x80	; 128
 49a:	80 83       	st	Z, r24
	UCSR1B |= (1<<UDRIE1);
 49c:	80 81       	ld	r24, Z
 49e:	80 62       	ori	r24, 0x20	; 32
 4a0:	80 83       	st	Z, r24
}
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	08 95       	ret

000004ac <usartRemRxData>:

uint8_t usartRemRxData()
{
	uint8_t rxData = 0;
	if (_rxCnt)// Si rxCnt est suppérieur à 0 c'est qu'il reste des données dans le buffer de réception.
 4ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_rxCnt>
 4b0:	88 23       	and	r24, r24
 4b2:	b1 f0       	breq	.+44     	; 0x4e0 <usartRemRxData+0x34>
	{
		cli();// Arrêt des interruption le temps de modifier rxCnt afin d'éviter tout conflit.
 4b4:	f8 94       	cli
		_rxCnt--;
 4b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_rxCnt>
 4ba:	81 50       	subi	r24, 0x01	; 1
 4bc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_rxCnt>
		sei();
 4c0:	78 94       	sei
		rxData = _rxBuffer[_rxBufferOut++];// Les donnés précedement placés dans rxBuffer sont placés unes à unes dans rxData afin de vider rxBuffer. Lorsque rxBufferOut est = à rxBufferIn c'est que tout à été affiché.
 4c2:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <_rxBufferOut>
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	9e 0f       	add	r25, r30
 4ca:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_rxBufferOut>
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	e3 5d       	subi	r30, 0xD3	; 211
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	80 81       	ld	r24, Z
		if (_rxBufferOut >= RX_BUFFER_SIZE)
 4d6:	90 34       	cpi	r25, 0x40	; 64
 4d8:	20 f0       	brcs	.+8      	; 0x4e2 <usartRemRxData+0x36>
			_rxBufferOut = 0;
 4da:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <_rxBufferOut>
 4de:	08 95       	ret
	UCSR1B |= (1<<UDRIE1);
}

uint8_t usartRemRxData()
{
	uint8_t rxData = 0;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
		rxData = _rxBuffer[_rxBufferOut++];// Les donnés précedement placés dans rxBuffer sont placés unes à unes dans rxData afin de vider rxBuffer. Lorsque rxBufferOut est = à rxBufferIn c'est que tout à été affiché.
		if (_rxBufferOut >= RX_BUFFER_SIZE)
			_rxBufferOut = 0;
	}
	return rxData;// rxData est la donnée la plus ancienne dans rxBuffer.
}
 4e2:	08 95       	ret

000004e4 <usartRxAvailable>:

uint8_t usartRxAvailable()
{
	return _rxCnt;// rxCnt augmente quand une donnée est placée dans le buffer de réception et diminue lorsque des données en sont retirés.
 4e4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_rxCnt>
}
 4e8:	08 95       	ret

000004ea <__subsf3>:
 4ea:	50 58       	subi	r21, 0x80	; 128

000004ec <__addsf3>:
 4ec:	bb 27       	eor	r27, r27
 4ee:	aa 27       	eor	r26, r26
 4f0:	0e 94 8d 02 	call	0x51a	; 0x51a <__addsf3x>
 4f4:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_round>
 4f8:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fp_pscA>
 4fc:	38 f0       	brcs	.+14     	; 0x50c <__addsf3+0x20>
 4fe:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscB>
 502:	20 f0       	brcs	.+8      	; 0x50c <__addsf3+0x20>
 504:	39 f4       	brne	.+14     	; 0x514 <__addsf3+0x28>
 506:	9f 3f       	cpi	r25, 0xFF	; 255
 508:	19 f4       	brne	.+6      	; 0x510 <__addsf3+0x24>
 50a:	26 f4       	brtc	.+8      	; 0x514 <__addsf3+0x28>
 50c:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_nan>
 510:	0e f4       	brtc	.+2      	; 0x514 <__addsf3+0x28>
 512:	e0 95       	com	r30
 514:	e7 fb       	bst	r30, 7
 516:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_inf>

0000051a <__addsf3x>:
 51a:	e9 2f       	mov	r30, r25
 51c:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fp_split3>
 520:	58 f3       	brcs	.-42     	; 0x4f8 <__addsf3+0xc>
 522:	ba 17       	cp	r27, r26
 524:	62 07       	cpc	r22, r18
 526:	73 07       	cpc	r23, r19
 528:	84 07       	cpc	r24, r20
 52a:	95 07       	cpc	r25, r21
 52c:	20 f0       	brcs	.+8      	; 0x536 <__addsf3x+0x1c>
 52e:	79 f4       	brne	.+30     	; 0x54e <__addsf3x+0x34>
 530:	a6 f5       	brtc	.+104    	; 0x59a <__addsf3x+0x80>
 532:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_zero>
 536:	0e f4       	brtc	.+2      	; 0x53a <__addsf3x+0x20>
 538:	e0 95       	com	r30
 53a:	0b 2e       	mov	r0, r27
 53c:	ba 2f       	mov	r27, r26
 53e:	a0 2d       	mov	r26, r0
 540:	0b 01       	movw	r0, r22
 542:	b9 01       	movw	r22, r18
 544:	90 01       	movw	r18, r0
 546:	0c 01       	movw	r0, r24
 548:	ca 01       	movw	r24, r20
 54a:	a0 01       	movw	r20, r0
 54c:	11 24       	eor	r1, r1
 54e:	ff 27       	eor	r31, r31
 550:	59 1b       	sub	r21, r25
 552:	99 f0       	breq	.+38     	; 0x57a <__addsf3x+0x60>
 554:	59 3f       	cpi	r21, 0xF9	; 249
 556:	50 f4       	brcc	.+20     	; 0x56c <__addsf3x+0x52>
 558:	50 3e       	cpi	r21, 0xE0	; 224
 55a:	68 f1       	brcs	.+90     	; 0x5b6 <__addsf3x+0x9c>
 55c:	1a 16       	cp	r1, r26
 55e:	f0 40       	sbci	r31, 0x00	; 0
 560:	a2 2f       	mov	r26, r18
 562:	23 2f       	mov	r18, r19
 564:	34 2f       	mov	r19, r20
 566:	44 27       	eor	r20, r20
 568:	58 5f       	subi	r21, 0xF8	; 248
 56a:	f3 cf       	rjmp	.-26     	; 0x552 <__addsf3x+0x38>
 56c:	46 95       	lsr	r20
 56e:	37 95       	ror	r19
 570:	27 95       	ror	r18
 572:	a7 95       	ror	r26
 574:	f0 40       	sbci	r31, 0x00	; 0
 576:	53 95       	inc	r21
 578:	c9 f7       	brne	.-14     	; 0x56c <__addsf3x+0x52>
 57a:	7e f4       	brtc	.+30     	; 0x59a <__addsf3x+0x80>
 57c:	1f 16       	cp	r1, r31
 57e:	ba 0b       	sbc	r27, r26
 580:	62 0b       	sbc	r22, r18
 582:	73 0b       	sbc	r23, r19
 584:	84 0b       	sbc	r24, r20
 586:	ba f0       	brmi	.+46     	; 0x5b6 <__addsf3x+0x9c>
 588:	91 50       	subi	r25, 0x01	; 1
 58a:	a1 f0       	breq	.+40     	; 0x5b4 <__addsf3x+0x9a>
 58c:	ff 0f       	add	r31, r31
 58e:	bb 1f       	adc	r27, r27
 590:	66 1f       	adc	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	88 1f       	adc	r24, r24
 596:	c2 f7       	brpl	.-16     	; 0x588 <__addsf3x+0x6e>
 598:	0e c0       	rjmp	.+28     	; 0x5b6 <__addsf3x+0x9c>
 59a:	ba 0f       	add	r27, r26
 59c:	62 1f       	adc	r22, r18
 59e:	73 1f       	adc	r23, r19
 5a0:	84 1f       	adc	r24, r20
 5a2:	48 f4       	brcc	.+18     	; 0x5b6 <__addsf3x+0x9c>
 5a4:	87 95       	ror	r24
 5a6:	77 95       	ror	r23
 5a8:	67 95       	ror	r22
 5aa:	b7 95       	ror	r27
 5ac:	f7 95       	ror	r31
 5ae:	9e 3f       	cpi	r25, 0xFE	; 254
 5b0:	08 f0       	brcs	.+2      	; 0x5b4 <__addsf3x+0x9a>
 5b2:	b0 cf       	rjmp	.-160    	; 0x514 <__addsf3+0x28>
 5b4:	93 95       	inc	r25
 5b6:	88 0f       	add	r24, r24
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <__addsf3x+0xa2>
 5ba:	99 27       	eor	r25, r25
 5bc:	ee 0f       	add	r30, r30
 5be:	97 95       	ror	r25
 5c0:	87 95       	ror	r24
 5c2:	08 95       	ret

000005c4 <__fixunssfsi>:
 5c4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fp_splitA>
 5c8:	88 f0       	brcs	.+34     	; 0x5ec <__fixunssfsi+0x28>
 5ca:	9f 57       	subi	r25, 0x7F	; 127
 5cc:	98 f0       	brcs	.+38     	; 0x5f4 <__fixunssfsi+0x30>
 5ce:	b9 2f       	mov	r27, r25
 5d0:	99 27       	eor	r25, r25
 5d2:	b7 51       	subi	r27, 0x17	; 23
 5d4:	b0 f0       	brcs	.+44     	; 0x602 <__fixunssfsi+0x3e>
 5d6:	e1 f0       	breq	.+56     	; 0x610 <__fixunssfsi+0x4c>
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	1a f0       	brmi	.+6      	; 0x5e8 <__fixunssfsi+0x24>
 5e2:	ba 95       	dec	r27
 5e4:	c9 f7       	brne	.-14     	; 0x5d8 <__fixunssfsi+0x14>
 5e6:	14 c0       	rjmp	.+40     	; 0x610 <__fixunssfsi+0x4c>
 5e8:	b1 30       	cpi	r27, 0x01	; 1
 5ea:	91 f0       	breq	.+36     	; 0x610 <__fixunssfsi+0x4c>
 5ec:	0e 94 98 03 	call	0x730	; 0x730 <__fp_zero>
 5f0:	b1 e0       	ldi	r27, 0x01	; 1
 5f2:	08 95       	ret
 5f4:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_zero>
 5f8:	67 2f       	mov	r22, r23
 5fa:	78 2f       	mov	r23, r24
 5fc:	88 27       	eor	r24, r24
 5fe:	b8 5f       	subi	r27, 0xF8	; 248
 600:	39 f0       	breq	.+14     	; 0x610 <__fixunssfsi+0x4c>
 602:	b9 3f       	cpi	r27, 0xF9	; 249
 604:	cc f3       	brlt	.-14     	; 0x5f8 <__fixunssfsi+0x34>
 606:	86 95       	lsr	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	b3 95       	inc	r27
 60e:	d9 f7       	brne	.-10     	; 0x606 <__fixunssfsi+0x42>
 610:	3e f4       	brtc	.+14     	; 0x620 <__fixunssfsi+0x5c>
 612:	90 95       	com	r25
 614:	80 95       	com	r24
 616:	70 95       	com	r23
 618:	61 95       	neg	r22
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

00000622 <__floatunsisf>:
 622:	e8 94       	clt
 624:	09 c0       	rjmp	.+18     	; 0x638 <__floatsisf+0x12>

00000626 <__floatsisf>:
 626:	97 fb       	bst	r25, 7
 628:	3e f4       	brtc	.+14     	; 0x638 <__floatsisf+0x12>
 62a:	90 95       	com	r25
 62c:	80 95       	com	r24
 62e:	70 95       	com	r23
 630:	61 95       	neg	r22
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	99 23       	and	r25, r25
 63a:	a9 f0       	breq	.+42     	; 0x666 <__floatsisf+0x40>
 63c:	f9 2f       	mov	r31, r25
 63e:	96 e9       	ldi	r25, 0x96	; 150
 640:	bb 27       	eor	r27, r27
 642:	93 95       	inc	r25
 644:	f6 95       	lsr	r31
 646:	87 95       	ror	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b7 95       	ror	r27
 64e:	f1 11       	cpse	r31, r1
 650:	f8 cf       	rjmp	.-16     	; 0x642 <__floatsisf+0x1c>
 652:	fa f4       	brpl	.+62     	; 0x692 <__floatsisf+0x6c>
 654:	bb 0f       	add	r27, r27
 656:	11 f4       	brne	.+4      	; 0x65c <__floatsisf+0x36>
 658:	60 ff       	sbrs	r22, 0
 65a:	1b c0       	rjmp	.+54     	; 0x692 <__floatsisf+0x6c>
 65c:	6f 5f       	subi	r22, 0xFF	; 255
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	16 c0       	rjmp	.+44     	; 0x692 <__floatsisf+0x6c>
 666:	88 23       	and	r24, r24
 668:	11 f0       	breq	.+4      	; 0x66e <__floatsisf+0x48>
 66a:	96 e9       	ldi	r25, 0x96	; 150
 66c:	11 c0       	rjmp	.+34     	; 0x690 <__floatsisf+0x6a>
 66e:	77 23       	and	r23, r23
 670:	21 f0       	breq	.+8      	; 0x67a <__floatsisf+0x54>
 672:	9e e8       	ldi	r25, 0x8E	; 142
 674:	87 2f       	mov	r24, r23
 676:	76 2f       	mov	r23, r22
 678:	05 c0       	rjmp	.+10     	; 0x684 <__floatsisf+0x5e>
 67a:	66 23       	and	r22, r22
 67c:	71 f0       	breq	.+28     	; 0x69a <__floatsisf+0x74>
 67e:	96 e8       	ldi	r25, 0x86	; 134
 680:	86 2f       	mov	r24, r22
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	2a f0       	brmi	.+10     	; 0x692 <__floatsisf+0x6c>
 688:	9a 95       	dec	r25
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	da f7       	brpl	.-10     	; 0x688 <__floatsisf+0x62>
 692:	88 0f       	add	r24, r24
 694:	96 95       	lsr	r25
 696:	87 95       	ror	r24
 698:	97 f9       	bld	r25, 7
 69a:	08 95       	ret

0000069c <__fp_inf>:
 69c:	97 f9       	bld	r25, 7
 69e:	9f 67       	ori	r25, 0x7F	; 127
 6a0:	80 e8       	ldi	r24, 0x80	; 128
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	08 95       	ret

000006a8 <__fp_nan>:
 6a8:	9f ef       	ldi	r25, 0xFF	; 255
 6aa:	80 ec       	ldi	r24, 0xC0	; 192
 6ac:	08 95       	ret

000006ae <__fp_pscA>:
 6ae:	00 24       	eor	r0, r0
 6b0:	0a 94       	dec	r0
 6b2:	16 16       	cp	r1, r22
 6b4:	17 06       	cpc	r1, r23
 6b6:	18 06       	cpc	r1, r24
 6b8:	09 06       	cpc	r0, r25
 6ba:	08 95       	ret

000006bc <__fp_pscB>:
 6bc:	00 24       	eor	r0, r0
 6be:	0a 94       	dec	r0
 6c0:	12 16       	cp	r1, r18
 6c2:	13 06       	cpc	r1, r19
 6c4:	14 06       	cpc	r1, r20
 6c6:	05 06       	cpc	r0, r21
 6c8:	08 95       	ret

000006ca <__fp_round>:
 6ca:	09 2e       	mov	r0, r25
 6cc:	03 94       	inc	r0
 6ce:	00 0c       	add	r0, r0
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <__fp_round+0xc>
 6d2:	88 23       	and	r24, r24
 6d4:	52 f0       	brmi	.+20     	; 0x6ea <__fp_round+0x20>
 6d6:	bb 0f       	add	r27, r27
 6d8:	40 f4       	brcc	.+16     	; 0x6ea <__fp_round+0x20>
 6da:	bf 2b       	or	r27, r31
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <__fp_round+0x18>
 6de:	60 ff       	sbrs	r22, 0
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <__fp_round+0x20>
 6e2:	6f 5f       	subi	r22, 0xFF	; 255
 6e4:	7f 4f       	sbci	r23, 0xFF	; 255
 6e6:	8f 4f       	sbci	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	08 95       	ret

000006ec <__fp_split3>:
 6ec:	57 fd       	sbrc	r21, 7
 6ee:	90 58       	subi	r25, 0x80	; 128
 6f0:	44 0f       	add	r20, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	59 f0       	breq	.+22     	; 0x70c <__fp_splitA+0x10>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	71 f0       	breq	.+28     	; 0x716 <__fp_splitA+0x1a>
 6fa:	47 95       	ror	r20

000006fc <__fp_splitA>:
 6fc:	88 0f       	add	r24, r24
 6fe:	97 fb       	bst	r25, 7
 700:	99 1f       	adc	r25, r25
 702:	61 f0       	breq	.+24     	; 0x71c <__fp_splitA+0x20>
 704:	9f 3f       	cpi	r25, 0xFF	; 255
 706:	79 f0       	breq	.+30     	; 0x726 <__fp_splitA+0x2a>
 708:	87 95       	ror	r24
 70a:	08 95       	ret
 70c:	12 16       	cp	r1, r18
 70e:	13 06       	cpc	r1, r19
 710:	14 06       	cpc	r1, r20
 712:	55 1f       	adc	r21, r21
 714:	f2 cf       	rjmp	.-28     	; 0x6fa <__fp_split3+0xe>
 716:	46 95       	lsr	r20
 718:	f1 df       	rcall	.-30     	; 0x6fc <__fp_splitA>
 71a:	08 c0       	rjmp	.+16     	; 0x72c <__fp_splitA+0x30>
 71c:	16 16       	cp	r1, r22
 71e:	17 06       	cpc	r1, r23
 720:	18 06       	cpc	r1, r24
 722:	99 1f       	adc	r25, r25
 724:	f1 cf       	rjmp	.-30     	; 0x708 <__fp_splitA+0xc>
 726:	86 95       	lsr	r24
 728:	71 05       	cpc	r23, r1
 72a:	61 05       	cpc	r22, r1
 72c:	08 94       	sec
 72e:	08 95       	ret

00000730 <__fp_zero>:
 730:	e8 94       	clt

00000732 <__fp_szero>:
 732:	bb 27       	eor	r27, r27
 734:	66 27       	eor	r22, r22
 736:	77 27       	eor	r23, r23
 738:	cb 01       	movw	r24, r22
 73a:	97 f9       	bld	r25, 7
 73c:	08 95       	ret

0000073e <__udivmodsi4>:
 73e:	a1 e2       	ldi	r26, 0x21	; 33
 740:	1a 2e       	mov	r1, r26
 742:	aa 1b       	sub	r26, r26
 744:	bb 1b       	sub	r27, r27
 746:	fd 01       	movw	r30, r26
 748:	0d c0       	rjmp	.+26     	; 0x764 <__udivmodsi4_ep>

0000074a <__udivmodsi4_loop>:
 74a:	aa 1f       	adc	r26, r26
 74c:	bb 1f       	adc	r27, r27
 74e:	ee 1f       	adc	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	a2 17       	cp	r26, r18
 754:	b3 07       	cpc	r27, r19
 756:	e4 07       	cpc	r30, r20
 758:	f5 07       	cpc	r31, r21
 75a:	20 f0       	brcs	.+8      	; 0x764 <__udivmodsi4_ep>
 75c:	a2 1b       	sub	r26, r18
 75e:	b3 0b       	sbc	r27, r19
 760:	e4 0b       	sbc	r30, r20
 762:	f5 0b       	sbc	r31, r21

00000764 <__udivmodsi4_ep>:
 764:	66 1f       	adc	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	1a 94       	dec	r1
 76e:	69 f7       	brne	.-38     	; 0x74a <__udivmodsi4_loop>
 770:	60 95       	com	r22
 772:	70 95       	com	r23
 774:	80 95       	com	r24
 776:	90 95       	com	r25
 778:	9b 01       	movw	r18, r22
 77a:	ac 01       	movw	r20, r24
 77c:	bd 01       	movw	r22, r26
 77e:	cf 01       	movw	r24, r30
 780:	08 95       	ret

00000782 <sprintf>:
 782:	ae e0       	ldi	r26, 0x0E	; 14
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	e7 ec       	ldi	r30, 0xC7	; 199
 788:	f3 e0       	ldi	r31, 0x03	; 3
 78a:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__prologue_saves__+0x1c>
 78e:	0d 89       	ldd	r16, Y+21	; 0x15
 790:	1e 89       	ldd	r17, Y+22	; 0x16
 792:	86 e0       	ldi	r24, 0x06	; 6
 794:	8c 83       	std	Y+4, r24	; 0x04
 796:	1a 83       	std	Y+2, r17	; 0x02
 798:	09 83       	std	Y+1, r16	; 0x01
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	9f e7       	ldi	r25, 0x7F	; 127
 79e:	9e 83       	std	Y+6, r25	; 0x06
 7a0:	8d 83       	std	Y+5, r24	; 0x05
 7a2:	ae 01       	movw	r20, r28
 7a4:	47 5e       	subi	r20, 0xE7	; 231
 7a6:	5f 4f       	sbci	r21, 0xFF	; 255
 7a8:	6f 89       	ldd	r22, Y+23	; 0x17
 7aa:	78 8d       	ldd	r23, Y+24	; 0x18
 7ac:	ce 01       	movw	r24, r28
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <vfprintf>
 7b4:	ef 81       	ldd	r30, Y+7	; 0x07
 7b6:	f8 85       	ldd	r31, Y+8	; 0x08
 7b8:	e0 0f       	add	r30, r16
 7ba:	f1 1f       	adc	r31, r17
 7bc:	10 82       	st	Z, r1
 7be:	2e 96       	adiw	r28, 0x0e	; 14
 7c0:	e4 e0       	ldi	r30, 0x04	; 4
 7c2:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__epilogue_restores__+0x1c>

000007c6 <vfprintf>:
 7c6:	ab e0       	ldi	r26, 0x0B	; 11
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	e9 ee       	ldi	r30, 0xE9	; 233
 7cc:	f3 e0       	ldi	r31, 0x03	; 3
 7ce:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__prologue_saves__>
 7d2:	6c 01       	movw	r12, r24
 7d4:	7b 01       	movw	r14, r22
 7d6:	8a 01       	movw	r16, r20
 7d8:	fc 01       	movw	r30, r24
 7da:	17 82       	std	Z+7, r1	; 0x07
 7dc:	16 82       	std	Z+6, r1	; 0x06
 7de:	83 81       	ldd	r24, Z+3	; 0x03
 7e0:	81 ff       	sbrs	r24, 1
 7e2:	cc c1       	rjmp	.+920    	; 0xb7c <__stack+0x7d>
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	3c 01       	movw	r6, r24
 7ea:	f6 01       	movw	r30, r12
 7ec:	93 81       	ldd	r25, Z+3	; 0x03
 7ee:	f7 01       	movw	r30, r14
 7f0:	93 fd       	sbrc	r25, 3
 7f2:	85 91       	lpm	r24, Z+
 7f4:	93 ff       	sbrs	r25, 3
 7f6:	81 91       	ld	r24, Z+
 7f8:	7f 01       	movw	r14, r30
 7fa:	88 23       	and	r24, r24
 7fc:	09 f4       	brne	.+2      	; 0x800 <vfprintf+0x3a>
 7fe:	ba c1       	rjmp	.+884    	; 0xb74 <__stack+0x75>
 800:	85 32       	cpi	r24, 0x25	; 37
 802:	39 f4       	brne	.+14     	; 0x812 <vfprintf+0x4c>
 804:	93 fd       	sbrc	r25, 3
 806:	85 91       	lpm	r24, Z+
 808:	93 ff       	sbrs	r25, 3
 80a:	81 91       	ld	r24, Z+
 80c:	7f 01       	movw	r14, r30
 80e:	85 32       	cpi	r24, 0x25	; 37
 810:	29 f4       	brne	.+10     	; 0x81c <vfprintf+0x56>
 812:	b6 01       	movw	r22, r12
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 81a:	e7 cf       	rjmp	.-50     	; 0x7ea <vfprintf+0x24>
 81c:	91 2c       	mov	r9, r1
 81e:	21 2c       	mov	r2, r1
 820:	31 2c       	mov	r3, r1
 822:	ff e1       	ldi	r31, 0x1F	; 31
 824:	f3 15       	cp	r31, r3
 826:	d8 f0       	brcs	.+54     	; 0x85e <vfprintf+0x98>
 828:	8b 32       	cpi	r24, 0x2B	; 43
 82a:	79 f0       	breq	.+30     	; 0x84a <vfprintf+0x84>
 82c:	38 f4       	brcc	.+14     	; 0x83c <vfprintf+0x76>
 82e:	80 32       	cpi	r24, 0x20	; 32
 830:	79 f0       	breq	.+30     	; 0x850 <vfprintf+0x8a>
 832:	83 32       	cpi	r24, 0x23	; 35
 834:	a1 f4       	brne	.+40     	; 0x85e <vfprintf+0x98>
 836:	23 2d       	mov	r18, r3
 838:	20 61       	ori	r18, 0x10	; 16
 83a:	1d c0       	rjmp	.+58     	; 0x876 <vfprintf+0xb0>
 83c:	8d 32       	cpi	r24, 0x2D	; 45
 83e:	61 f0       	breq	.+24     	; 0x858 <vfprintf+0x92>
 840:	80 33       	cpi	r24, 0x30	; 48
 842:	69 f4       	brne	.+26     	; 0x85e <vfprintf+0x98>
 844:	23 2d       	mov	r18, r3
 846:	21 60       	ori	r18, 0x01	; 1
 848:	16 c0       	rjmp	.+44     	; 0x876 <vfprintf+0xb0>
 84a:	83 2d       	mov	r24, r3
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	38 2e       	mov	r3, r24
 850:	e3 2d       	mov	r30, r3
 852:	e4 60       	ori	r30, 0x04	; 4
 854:	3e 2e       	mov	r3, r30
 856:	2a c0       	rjmp	.+84     	; 0x8ac <vfprintf+0xe6>
 858:	f3 2d       	mov	r31, r3
 85a:	f8 60       	ori	r31, 0x08	; 8
 85c:	1d c0       	rjmp	.+58     	; 0x898 <vfprintf+0xd2>
 85e:	37 fc       	sbrc	r3, 7
 860:	2d c0       	rjmp	.+90     	; 0x8bc <vfprintf+0xf6>
 862:	20 ed       	ldi	r18, 0xD0	; 208
 864:	28 0f       	add	r18, r24
 866:	2a 30       	cpi	r18, 0x0A	; 10
 868:	40 f0       	brcs	.+16     	; 0x87a <vfprintf+0xb4>
 86a:	8e 32       	cpi	r24, 0x2E	; 46
 86c:	b9 f4       	brne	.+46     	; 0x89c <vfprintf+0xd6>
 86e:	36 fc       	sbrc	r3, 6
 870:	81 c1       	rjmp	.+770    	; 0xb74 <__stack+0x75>
 872:	23 2d       	mov	r18, r3
 874:	20 64       	ori	r18, 0x40	; 64
 876:	32 2e       	mov	r3, r18
 878:	19 c0       	rjmp	.+50     	; 0x8ac <vfprintf+0xe6>
 87a:	36 fe       	sbrs	r3, 6
 87c:	06 c0       	rjmp	.+12     	; 0x88a <vfprintf+0xc4>
 87e:	8a e0       	ldi	r24, 0x0A	; 10
 880:	98 9e       	mul	r9, r24
 882:	20 0d       	add	r18, r0
 884:	11 24       	eor	r1, r1
 886:	92 2e       	mov	r9, r18
 888:	11 c0       	rjmp	.+34     	; 0x8ac <vfprintf+0xe6>
 88a:	ea e0       	ldi	r30, 0x0A	; 10
 88c:	2e 9e       	mul	r2, r30
 88e:	20 0d       	add	r18, r0
 890:	11 24       	eor	r1, r1
 892:	22 2e       	mov	r2, r18
 894:	f3 2d       	mov	r31, r3
 896:	f0 62       	ori	r31, 0x20	; 32
 898:	3f 2e       	mov	r3, r31
 89a:	08 c0       	rjmp	.+16     	; 0x8ac <vfprintf+0xe6>
 89c:	8c 36       	cpi	r24, 0x6C	; 108
 89e:	21 f4       	brne	.+8      	; 0x8a8 <vfprintf+0xe2>
 8a0:	83 2d       	mov	r24, r3
 8a2:	80 68       	ori	r24, 0x80	; 128
 8a4:	38 2e       	mov	r3, r24
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <vfprintf+0xe6>
 8a8:	88 36       	cpi	r24, 0x68	; 104
 8aa:	41 f4       	brne	.+16     	; 0x8bc <vfprintf+0xf6>
 8ac:	f7 01       	movw	r30, r14
 8ae:	93 fd       	sbrc	r25, 3
 8b0:	85 91       	lpm	r24, Z+
 8b2:	93 ff       	sbrs	r25, 3
 8b4:	81 91       	ld	r24, Z+
 8b6:	7f 01       	movw	r14, r30
 8b8:	81 11       	cpse	r24, r1
 8ba:	b3 cf       	rjmp	.-154    	; 0x822 <vfprintf+0x5c>
 8bc:	98 2f       	mov	r25, r24
 8be:	9f 7d       	andi	r25, 0xDF	; 223
 8c0:	95 54       	subi	r25, 0x45	; 69
 8c2:	93 30       	cpi	r25, 0x03	; 3
 8c4:	28 f4       	brcc	.+10     	; 0x8d0 <vfprintf+0x10a>
 8c6:	0c 5f       	subi	r16, 0xFC	; 252
 8c8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ca:	9f e3       	ldi	r25, 0x3F	; 63
 8cc:	99 83       	std	Y+1, r25	; 0x01
 8ce:	0d c0       	rjmp	.+26     	; 0x8ea <vfprintf+0x124>
 8d0:	83 36       	cpi	r24, 0x63	; 99
 8d2:	31 f0       	breq	.+12     	; 0x8e0 <vfprintf+0x11a>
 8d4:	83 37       	cpi	r24, 0x73	; 115
 8d6:	71 f0       	breq	.+28     	; 0x8f4 <vfprintf+0x12e>
 8d8:	83 35       	cpi	r24, 0x53	; 83
 8da:	09 f0       	breq	.+2      	; 0x8de <vfprintf+0x118>
 8dc:	59 c0       	rjmp	.+178    	; 0x990 <vfprintf+0x1ca>
 8de:	21 c0       	rjmp	.+66     	; 0x922 <vfprintf+0x15c>
 8e0:	f8 01       	movw	r30, r16
 8e2:	80 81       	ld	r24, Z
 8e4:	89 83       	std	Y+1, r24	; 0x01
 8e6:	0e 5f       	subi	r16, 0xFE	; 254
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	88 24       	eor	r8, r8
 8ec:	83 94       	inc	r8
 8ee:	91 2c       	mov	r9, r1
 8f0:	53 01       	movw	r10, r6
 8f2:	13 c0       	rjmp	.+38     	; 0x91a <vfprintf+0x154>
 8f4:	28 01       	movw	r4, r16
 8f6:	f2 e0       	ldi	r31, 0x02	; 2
 8f8:	4f 0e       	add	r4, r31
 8fa:	51 1c       	adc	r5, r1
 8fc:	f8 01       	movw	r30, r16
 8fe:	a0 80       	ld	r10, Z
 900:	b1 80       	ldd	r11, Z+1	; 0x01
 902:	36 fe       	sbrs	r3, 6
 904:	03 c0       	rjmp	.+6      	; 0x90c <vfprintf+0x146>
 906:	69 2d       	mov	r22, r9
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	02 c0       	rjmp	.+4      	; 0x910 <vfprintf+0x14a>
 90c:	6f ef       	ldi	r22, 0xFF	; 255
 90e:	7f ef       	ldi	r23, 0xFF	; 255
 910:	c5 01       	movw	r24, r10
 912:	0e 94 cf 05 	call	0xb9e	; 0xb9e <strnlen>
 916:	4c 01       	movw	r8, r24
 918:	82 01       	movw	r16, r4
 91a:	f3 2d       	mov	r31, r3
 91c:	ff 77       	andi	r31, 0x7F	; 127
 91e:	3f 2e       	mov	r3, r31
 920:	16 c0       	rjmp	.+44     	; 0x94e <vfprintf+0x188>
 922:	28 01       	movw	r4, r16
 924:	22 e0       	ldi	r18, 0x02	; 2
 926:	42 0e       	add	r4, r18
 928:	51 1c       	adc	r5, r1
 92a:	f8 01       	movw	r30, r16
 92c:	a0 80       	ld	r10, Z
 92e:	b1 80       	ldd	r11, Z+1	; 0x01
 930:	36 fe       	sbrs	r3, 6
 932:	03 c0       	rjmp	.+6      	; 0x93a <vfprintf+0x174>
 934:	69 2d       	mov	r22, r9
 936:	70 e0       	ldi	r23, 0x00	; 0
 938:	02 c0       	rjmp	.+4      	; 0x93e <vfprintf+0x178>
 93a:	6f ef       	ldi	r22, 0xFF	; 255
 93c:	7f ef       	ldi	r23, 0xFF	; 255
 93e:	c5 01       	movw	r24, r10
 940:	0e 94 c4 05 	call	0xb88	; 0xb88 <strnlen_P>
 944:	4c 01       	movw	r8, r24
 946:	f3 2d       	mov	r31, r3
 948:	f0 68       	ori	r31, 0x80	; 128
 94a:	3f 2e       	mov	r3, r31
 94c:	82 01       	movw	r16, r4
 94e:	33 fc       	sbrc	r3, 3
 950:	1b c0       	rjmp	.+54     	; 0x988 <vfprintf+0x1c2>
 952:	82 2d       	mov	r24, r2
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	88 16       	cp	r8, r24
 958:	99 06       	cpc	r9, r25
 95a:	b0 f4       	brcc	.+44     	; 0x988 <vfprintf+0x1c2>
 95c:	b6 01       	movw	r22, r12
 95e:	80 e2       	ldi	r24, 0x20	; 32
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 966:	2a 94       	dec	r2
 968:	f4 cf       	rjmp	.-24     	; 0x952 <vfprintf+0x18c>
 96a:	f5 01       	movw	r30, r10
 96c:	37 fc       	sbrc	r3, 7
 96e:	85 91       	lpm	r24, Z+
 970:	37 fe       	sbrs	r3, 7
 972:	81 91       	ld	r24, Z+
 974:	5f 01       	movw	r10, r30
 976:	b6 01       	movw	r22, r12
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 97e:	21 10       	cpse	r2, r1
 980:	2a 94       	dec	r2
 982:	21 e0       	ldi	r18, 0x01	; 1
 984:	82 1a       	sub	r8, r18
 986:	91 08       	sbc	r9, r1
 988:	81 14       	cp	r8, r1
 98a:	91 04       	cpc	r9, r1
 98c:	71 f7       	brne	.-36     	; 0x96a <vfprintf+0x1a4>
 98e:	e8 c0       	rjmp	.+464    	; 0xb60 <__stack+0x61>
 990:	84 36       	cpi	r24, 0x64	; 100
 992:	11 f0       	breq	.+4      	; 0x998 <vfprintf+0x1d2>
 994:	89 36       	cpi	r24, 0x69	; 105
 996:	41 f5       	brne	.+80     	; 0x9e8 <vfprintf+0x222>
 998:	f8 01       	movw	r30, r16
 99a:	37 fe       	sbrs	r3, 7
 99c:	07 c0       	rjmp	.+14     	; 0x9ac <vfprintf+0x1e6>
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	82 81       	ldd	r24, Z+2	; 0x02
 9a4:	93 81       	ldd	r25, Z+3	; 0x03
 9a6:	0c 5f       	subi	r16, 0xFC	; 252
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	08 c0       	rjmp	.+16     	; 0x9bc <vfprintf+0x1f6>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	07 2e       	mov	r0, r23
 9b2:	00 0c       	add	r0, r0
 9b4:	88 0b       	sbc	r24, r24
 9b6:	99 0b       	sbc	r25, r25
 9b8:	0e 5f       	subi	r16, 0xFE	; 254
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
 9bc:	f3 2d       	mov	r31, r3
 9be:	ff 76       	andi	r31, 0x6F	; 111
 9c0:	3f 2e       	mov	r3, r31
 9c2:	97 ff       	sbrs	r25, 7
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <vfprintf+0x212>
 9c6:	90 95       	com	r25
 9c8:	80 95       	com	r24
 9ca:	70 95       	com	r23
 9cc:	61 95       	neg	r22
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	8f 4f       	sbci	r24, 0xFF	; 255
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	f0 68       	ori	r31, 0x80	; 128
 9d6:	3f 2e       	mov	r3, r31
 9d8:	2a e0       	ldi	r18, 0x0A	; 10
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	a3 01       	movw	r20, r6
 9de:	0e 94 16 06 	call	0xc2c	; 0xc2c <__ultoa_invert>
 9e2:	88 2e       	mov	r8, r24
 9e4:	86 18       	sub	r8, r6
 9e6:	45 c0       	rjmp	.+138    	; 0xa72 <__DATA_REGION_LENGTH__+0x72>
 9e8:	85 37       	cpi	r24, 0x75	; 117
 9ea:	31 f4       	brne	.+12     	; 0x9f8 <vfprintf+0x232>
 9ec:	23 2d       	mov	r18, r3
 9ee:	2f 7e       	andi	r18, 0xEF	; 239
 9f0:	b2 2e       	mov	r11, r18
 9f2:	2a e0       	ldi	r18, 0x0A	; 10
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	25 c0       	rjmp	.+74     	; 0xa42 <__DATA_REGION_LENGTH__+0x42>
 9f8:	93 2d       	mov	r25, r3
 9fa:	99 7f       	andi	r25, 0xF9	; 249
 9fc:	b9 2e       	mov	r11, r25
 9fe:	8f 36       	cpi	r24, 0x6F	; 111
 a00:	c1 f0       	breq	.+48     	; 0xa32 <__DATA_REGION_LENGTH__+0x32>
 a02:	18 f4       	brcc	.+6      	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
 a04:	88 35       	cpi	r24, 0x58	; 88
 a06:	79 f0       	breq	.+30     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 a08:	b5 c0       	rjmp	.+362    	; 0xb74 <__stack+0x75>
 a0a:	80 37       	cpi	r24, 0x70	; 112
 a0c:	19 f0       	breq	.+6      	; 0xa14 <__DATA_REGION_LENGTH__+0x14>
 a0e:	88 37       	cpi	r24, 0x78	; 120
 a10:	21 f0       	breq	.+8      	; 0xa1a <__DATA_REGION_LENGTH__+0x1a>
 a12:	b0 c0       	rjmp	.+352    	; 0xb74 <__stack+0x75>
 a14:	e9 2f       	mov	r30, r25
 a16:	e0 61       	ori	r30, 0x10	; 16
 a18:	be 2e       	mov	r11, r30
 a1a:	b4 fe       	sbrs	r11, 4
 a1c:	0d c0       	rjmp	.+26     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a1e:	fb 2d       	mov	r31, r11
 a20:	f4 60       	ori	r31, 0x04	; 4
 a22:	bf 2e       	mov	r11, r31
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a26:	34 fe       	sbrs	r3, 4
 a28:	0a c0       	rjmp	.+20     	; 0xa3e <__DATA_REGION_LENGTH__+0x3e>
 a2a:	29 2f       	mov	r18, r25
 a2c:	26 60       	ori	r18, 0x06	; 6
 a2e:	b2 2e       	mov	r11, r18
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <__DATA_REGION_LENGTH__+0x3e>
 a32:	28 e0       	ldi	r18, 0x08	; 8
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	05 c0       	rjmp	.+10     	; 0xa42 <__DATA_REGION_LENGTH__+0x42>
 a38:	20 e1       	ldi	r18, 0x10	; 16
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__DATA_REGION_LENGTH__+0x42>
 a3e:	20 e1       	ldi	r18, 0x10	; 16
 a40:	32 e0       	ldi	r19, 0x02	; 2
 a42:	f8 01       	movw	r30, r16
 a44:	b7 fe       	sbrs	r11, 7
 a46:	07 c0       	rjmp	.+14     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
 a48:	60 81       	ld	r22, Z
 a4a:	71 81       	ldd	r23, Z+1	; 0x01
 a4c:	82 81       	ldd	r24, Z+2	; 0x02
 a4e:	93 81       	ldd	r25, Z+3	; 0x03
 a50:	0c 5f       	subi	r16, 0xFC	; 252
 a52:	1f 4f       	sbci	r17, 0xFF	; 255
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 a56:	60 81       	ld	r22, Z
 a58:	71 81       	ldd	r23, Z+1	; 0x01
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 5f       	subi	r16, 0xFE	; 254
 a60:	1f 4f       	sbci	r17, 0xFF	; 255
 a62:	a3 01       	movw	r20, r6
 a64:	0e 94 16 06 	call	0xc2c	; 0xc2c <__ultoa_invert>
 a68:	88 2e       	mov	r8, r24
 a6a:	86 18       	sub	r8, r6
 a6c:	fb 2d       	mov	r31, r11
 a6e:	ff 77       	andi	r31, 0x7F	; 127
 a70:	3f 2e       	mov	r3, r31
 a72:	36 fe       	sbrs	r3, 6
 a74:	0d c0       	rjmp	.+26     	; 0xa90 <__DATA_REGION_LENGTH__+0x90>
 a76:	23 2d       	mov	r18, r3
 a78:	2e 7f       	andi	r18, 0xFE	; 254
 a7a:	a2 2e       	mov	r10, r18
 a7c:	89 14       	cp	r8, r9
 a7e:	58 f4       	brcc	.+22     	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
 a80:	34 fe       	sbrs	r3, 4
 a82:	0b c0       	rjmp	.+22     	; 0xa9a <__DATA_REGION_LENGTH__+0x9a>
 a84:	32 fc       	sbrc	r3, 2
 a86:	09 c0       	rjmp	.+18     	; 0xa9a <__DATA_REGION_LENGTH__+0x9a>
 a88:	83 2d       	mov	r24, r3
 a8a:	8e 7e       	andi	r24, 0xEE	; 238
 a8c:	a8 2e       	mov	r10, r24
 a8e:	05 c0       	rjmp	.+10     	; 0xa9a <__DATA_REGION_LENGTH__+0x9a>
 a90:	b8 2c       	mov	r11, r8
 a92:	a3 2c       	mov	r10, r3
 a94:	03 c0       	rjmp	.+6      	; 0xa9c <__DATA_REGION_LENGTH__+0x9c>
 a96:	b8 2c       	mov	r11, r8
 a98:	01 c0       	rjmp	.+2      	; 0xa9c <__DATA_REGION_LENGTH__+0x9c>
 a9a:	b9 2c       	mov	r11, r9
 a9c:	a4 fe       	sbrs	r10, 4
 a9e:	0f c0       	rjmp	.+30     	; 0xabe <__DATA_REGION_LENGTH__+0xbe>
 aa0:	fe 01       	movw	r30, r28
 aa2:	e8 0d       	add	r30, r8
 aa4:	f1 1d       	adc	r31, r1
 aa6:	80 81       	ld	r24, Z
 aa8:	80 33       	cpi	r24, 0x30	; 48
 aaa:	21 f4       	brne	.+8      	; 0xab4 <__DATA_REGION_LENGTH__+0xb4>
 aac:	9a 2d       	mov	r25, r10
 aae:	99 7e       	andi	r25, 0xE9	; 233
 ab0:	a9 2e       	mov	r10, r25
 ab2:	09 c0       	rjmp	.+18     	; 0xac6 <__DATA_REGION_LENGTH__+0xc6>
 ab4:	a2 fe       	sbrs	r10, 2
 ab6:	06 c0       	rjmp	.+12     	; 0xac4 <__DATA_REGION_LENGTH__+0xc4>
 ab8:	b3 94       	inc	r11
 aba:	b3 94       	inc	r11
 abc:	04 c0       	rjmp	.+8      	; 0xac6 <__DATA_REGION_LENGTH__+0xc6>
 abe:	8a 2d       	mov	r24, r10
 ac0:	86 78       	andi	r24, 0x86	; 134
 ac2:	09 f0       	breq	.+2      	; 0xac6 <__DATA_REGION_LENGTH__+0xc6>
 ac4:	b3 94       	inc	r11
 ac6:	a3 fc       	sbrc	r10, 3
 ac8:	11 c0       	rjmp	.+34     	; 0xaec <__DATA_REGION_LENGTH__+0xec>
 aca:	a0 fe       	sbrs	r10, 0
 acc:	06 c0       	rjmp	.+12     	; 0xada <__DATA_REGION_LENGTH__+0xda>
 ace:	b2 14       	cp	r11, r2
 ad0:	88 f4       	brcc	.+34     	; 0xaf4 <__DATA_REGION_LENGTH__+0xf4>
 ad2:	28 0c       	add	r2, r8
 ad4:	92 2c       	mov	r9, r2
 ad6:	9b 18       	sub	r9, r11
 ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <__DATA_REGION_LENGTH__+0xf6>
 ada:	b2 14       	cp	r11, r2
 adc:	60 f4       	brcc	.+24     	; 0xaf6 <__DATA_REGION_LENGTH__+0xf6>
 ade:	b6 01       	movw	r22, r12
 ae0:	80 e2       	ldi	r24, 0x20	; 32
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 ae8:	b3 94       	inc	r11
 aea:	f7 cf       	rjmp	.-18     	; 0xada <__DATA_REGION_LENGTH__+0xda>
 aec:	b2 14       	cp	r11, r2
 aee:	18 f4       	brcc	.+6      	; 0xaf6 <__DATA_REGION_LENGTH__+0xf6>
 af0:	2b 18       	sub	r2, r11
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <__DATA_REGION_LENGTH__+0xf8>
 af4:	98 2c       	mov	r9, r8
 af6:	21 2c       	mov	r2, r1
 af8:	a4 fe       	sbrs	r10, 4
 afa:	10 c0       	rjmp	.+32     	; 0xb1c <__stack+0x1d>
 afc:	b6 01       	movw	r22, r12
 afe:	80 e3       	ldi	r24, 0x30	; 48
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 b06:	a2 fe       	sbrs	r10, 2
 b08:	17 c0       	rjmp	.+46     	; 0xb38 <__stack+0x39>
 b0a:	a1 fc       	sbrc	r10, 1
 b0c:	03 c0       	rjmp	.+6      	; 0xb14 <__stack+0x15>
 b0e:	88 e7       	ldi	r24, 0x78	; 120
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <__stack+0x19>
 b14:	88 e5       	ldi	r24, 0x58	; 88
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	b6 01       	movw	r22, r12
 b1a:	0c c0       	rjmp	.+24     	; 0xb34 <__stack+0x35>
 b1c:	8a 2d       	mov	r24, r10
 b1e:	86 78       	andi	r24, 0x86	; 134
 b20:	59 f0       	breq	.+22     	; 0xb38 <__stack+0x39>
 b22:	a1 fe       	sbrs	r10, 1
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <__stack+0x2b>
 b26:	8b e2       	ldi	r24, 0x2B	; 43
 b28:	01 c0       	rjmp	.+2      	; 0xb2c <__stack+0x2d>
 b2a:	80 e2       	ldi	r24, 0x20	; 32
 b2c:	a7 fc       	sbrc	r10, 7
 b2e:	8d e2       	ldi	r24, 0x2D	; 45
 b30:	b6 01       	movw	r22, r12
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 b38:	89 14       	cp	r8, r9
 b3a:	38 f4       	brcc	.+14     	; 0xb4a <__stack+0x4b>
 b3c:	b6 01       	movw	r22, r12
 b3e:	80 e3       	ldi	r24, 0x30	; 48
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 b46:	9a 94       	dec	r9
 b48:	f7 cf       	rjmp	.-18     	; 0xb38 <__stack+0x39>
 b4a:	8a 94       	dec	r8
 b4c:	f3 01       	movw	r30, r6
 b4e:	e8 0d       	add	r30, r8
 b50:	f1 1d       	adc	r31, r1
 b52:	80 81       	ld	r24, Z
 b54:	b6 01       	movw	r22, r12
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 b5c:	81 10       	cpse	r8, r1
 b5e:	f5 cf       	rjmp	.-22     	; 0xb4a <__stack+0x4b>
 b60:	22 20       	and	r2, r2
 b62:	09 f4       	brne	.+2      	; 0xb66 <__stack+0x67>
 b64:	42 ce       	rjmp	.-892    	; 0x7ea <vfprintf+0x24>
 b66:	b6 01       	movw	r22, r12
 b68:	80 e2       	ldi	r24, 0x20	; 32
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <fputc>
 b70:	2a 94       	dec	r2
 b72:	f6 cf       	rjmp	.-20     	; 0xb60 <__stack+0x61>
 b74:	f6 01       	movw	r30, r12
 b76:	86 81       	ldd	r24, Z+6	; 0x06
 b78:	97 81       	ldd	r25, Z+7	; 0x07
 b7a:	02 c0       	rjmp	.+4      	; 0xb80 <__stack+0x81>
 b7c:	8f ef       	ldi	r24, 0xFF	; 255
 b7e:	9f ef       	ldi	r25, 0xFF	; 255
 b80:	2b 96       	adiw	r28, 0x0b	; 11
 b82:	e2 e1       	ldi	r30, 0x12	; 18
 b84:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__epilogue_restores__>

00000b88 <strnlen_P>:
 b88:	fc 01       	movw	r30, r24
 b8a:	05 90       	lpm	r0, Z+
 b8c:	61 50       	subi	r22, 0x01	; 1
 b8e:	70 40       	sbci	r23, 0x00	; 0
 b90:	01 10       	cpse	r0, r1
 b92:	d8 f7       	brcc	.-10     	; 0xb8a <strnlen_P+0x2>
 b94:	80 95       	com	r24
 b96:	90 95       	com	r25
 b98:	8e 0f       	add	r24, r30
 b9a:	9f 1f       	adc	r25, r31
 b9c:	08 95       	ret

00000b9e <strnlen>:
 b9e:	fc 01       	movw	r30, r24
 ba0:	61 50       	subi	r22, 0x01	; 1
 ba2:	70 40       	sbci	r23, 0x00	; 0
 ba4:	01 90       	ld	r0, Z+
 ba6:	01 10       	cpse	r0, r1
 ba8:	d8 f7       	brcc	.-10     	; 0xba0 <strnlen+0x2>
 baa:	80 95       	com	r24
 bac:	90 95       	com	r25
 bae:	8e 0f       	add	r24, r30
 bb0:	9f 1f       	adc	r25, r31
 bb2:	08 95       	ret

00000bb4 <fputc>:
 bb4:	0f 93       	push	r16
 bb6:	1f 93       	push	r17
 bb8:	cf 93       	push	r28
 bba:	df 93       	push	r29
 bbc:	fb 01       	movw	r30, r22
 bbe:	23 81       	ldd	r18, Z+3	; 0x03
 bc0:	21 fd       	sbrc	r18, 1
 bc2:	03 c0       	rjmp	.+6      	; 0xbca <fputc+0x16>
 bc4:	8f ef       	ldi	r24, 0xFF	; 255
 bc6:	9f ef       	ldi	r25, 0xFF	; 255
 bc8:	2c c0       	rjmp	.+88     	; 0xc22 <fputc+0x6e>
 bca:	22 ff       	sbrs	r18, 2
 bcc:	16 c0       	rjmp	.+44     	; 0xbfa <fputc+0x46>
 bce:	46 81       	ldd	r20, Z+6	; 0x06
 bd0:	57 81       	ldd	r21, Z+7	; 0x07
 bd2:	24 81       	ldd	r18, Z+4	; 0x04
 bd4:	35 81       	ldd	r19, Z+5	; 0x05
 bd6:	42 17       	cp	r20, r18
 bd8:	53 07       	cpc	r21, r19
 bda:	44 f4       	brge	.+16     	; 0xbec <fputc+0x38>
 bdc:	a0 81       	ld	r26, Z
 bde:	b1 81       	ldd	r27, Z+1	; 0x01
 be0:	9d 01       	movw	r18, r26
 be2:	2f 5f       	subi	r18, 0xFF	; 255
 be4:	3f 4f       	sbci	r19, 0xFF	; 255
 be6:	31 83       	std	Z+1, r19	; 0x01
 be8:	20 83       	st	Z, r18
 bea:	8c 93       	st	X, r24
 bec:	26 81       	ldd	r18, Z+6	; 0x06
 bee:	37 81       	ldd	r19, Z+7	; 0x07
 bf0:	2f 5f       	subi	r18, 0xFF	; 255
 bf2:	3f 4f       	sbci	r19, 0xFF	; 255
 bf4:	37 83       	std	Z+7, r19	; 0x07
 bf6:	26 83       	std	Z+6, r18	; 0x06
 bf8:	14 c0       	rjmp	.+40     	; 0xc22 <fputc+0x6e>
 bfa:	8b 01       	movw	r16, r22
 bfc:	ec 01       	movw	r28, r24
 bfe:	fb 01       	movw	r30, r22
 c00:	00 84       	ldd	r0, Z+8	; 0x08
 c02:	f1 85       	ldd	r31, Z+9	; 0x09
 c04:	e0 2d       	mov	r30, r0
 c06:	09 95       	icall
 c08:	89 2b       	or	r24, r25
 c0a:	e1 f6       	brne	.-72     	; 0xbc4 <fputc+0x10>
 c0c:	d8 01       	movw	r26, r16
 c0e:	16 96       	adiw	r26, 0x06	; 6
 c10:	8d 91       	ld	r24, X+
 c12:	9c 91       	ld	r25, X
 c14:	17 97       	sbiw	r26, 0x07	; 7
 c16:	01 96       	adiw	r24, 0x01	; 1
 c18:	17 96       	adiw	r26, 0x07	; 7
 c1a:	9c 93       	st	X, r25
 c1c:	8e 93       	st	-X, r24
 c1e:	16 97       	sbiw	r26, 0x06	; 6
 c20:	ce 01       	movw	r24, r28
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	1f 91       	pop	r17
 c28:	0f 91       	pop	r16
 c2a:	08 95       	ret

00000c2c <__ultoa_invert>:
 c2c:	fa 01       	movw	r30, r20
 c2e:	aa 27       	eor	r26, r26
 c30:	28 30       	cpi	r18, 0x08	; 8
 c32:	51 f1       	breq	.+84     	; 0xc88 <__ultoa_invert+0x5c>
 c34:	20 31       	cpi	r18, 0x10	; 16
 c36:	81 f1       	breq	.+96     	; 0xc98 <__ultoa_invert+0x6c>
 c38:	e8 94       	clt
 c3a:	6f 93       	push	r22
 c3c:	6e 7f       	andi	r22, 0xFE	; 254
 c3e:	6e 5f       	subi	r22, 0xFE	; 254
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	af 4f       	sbci	r26, 0xFF	; 255
 c48:	b1 e0       	ldi	r27, 0x01	; 1
 c4a:	3e d0       	rcall	.+124    	; 0xcc8 <__ultoa_invert+0x9c>
 c4c:	b4 e0       	ldi	r27, 0x04	; 4
 c4e:	3c d0       	rcall	.+120    	; 0xcc8 <__ultoa_invert+0x9c>
 c50:	67 0f       	add	r22, r23
 c52:	78 1f       	adc	r23, r24
 c54:	89 1f       	adc	r24, r25
 c56:	9a 1f       	adc	r25, r26
 c58:	a1 1d       	adc	r26, r1
 c5a:	68 0f       	add	r22, r24
 c5c:	79 1f       	adc	r23, r25
 c5e:	8a 1f       	adc	r24, r26
 c60:	91 1d       	adc	r25, r1
 c62:	a1 1d       	adc	r26, r1
 c64:	6a 0f       	add	r22, r26
 c66:	71 1d       	adc	r23, r1
 c68:	81 1d       	adc	r24, r1
 c6a:	91 1d       	adc	r25, r1
 c6c:	a1 1d       	adc	r26, r1
 c6e:	20 d0       	rcall	.+64     	; 0xcb0 <__ultoa_invert+0x84>
 c70:	09 f4       	brne	.+2      	; 0xc74 <__ultoa_invert+0x48>
 c72:	68 94       	set
 c74:	3f 91       	pop	r19
 c76:	2a e0       	ldi	r18, 0x0A	; 10
 c78:	26 9f       	mul	r18, r22
 c7a:	11 24       	eor	r1, r1
 c7c:	30 19       	sub	r19, r0
 c7e:	30 5d       	subi	r19, 0xD0	; 208
 c80:	31 93       	st	Z+, r19
 c82:	de f6       	brtc	.-74     	; 0xc3a <__ultoa_invert+0xe>
 c84:	cf 01       	movw	r24, r30
 c86:	08 95       	ret
 c88:	46 2f       	mov	r20, r22
 c8a:	47 70       	andi	r20, 0x07	; 7
 c8c:	40 5d       	subi	r20, 0xD0	; 208
 c8e:	41 93       	st	Z+, r20
 c90:	b3 e0       	ldi	r27, 0x03	; 3
 c92:	0f d0       	rcall	.+30     	; 0xcb2 <__ultoa_invert+0x86>
 c94:	c9 f7       	brne	.-14     	; 0xc88 <__ultoa_invert+0x5c>
 c96:	f6 cf       	rjmp	.-20     	; 0xc84 <__ultoa_invert+0x58>
 c98:	46 2f       	mov	r20, r22
 c9a:	4f 70       	andi	r20, 0x0F	; 15
 c9c:	40 5d       	subi	r20, 0xD0	; 208
 c9e:	4a 33       	cpi	r20, 0x3A	; 58
 ca0:	18 f0       	brcs	.+6      	; 0xca8 <__ultoa_invert+0x7c>
 ca2:	49 5d       	subi	r20, 0xD9	; 217
 ca4:	31 fd       	sbrc	r19, 1
 ca6:	40 52       	subi	r20, 0x20	; 32
 ca8:	41 93       	st	Z+, r20
 caa:	02 d0       	rcall	.+4      	; 0xcb0 <__ultoa_invert+0x84>
 cac:	a9 f7       	brne	.-22     	; 0xc98 <__ultoa_invert+0x6c>
 cae:	ea cf       	rjmp	.-44     	; 0xc84 <__ultoa_invert+0x58>
 cb0:	b4 e0       	ldi	r27, 0x04	; 4
 cb2:	a6 95       	lsr	r26
 cb4:	97 95       	ror	r25
 cb6:	87 95       	ror	r24
 cb8:	77 95       	ror	r23
 cba:	67 95       	ror	r22
 cbc:	ba 95       	dec	r27
 cbe:	c9 f7       	brne	.-14     	; 0xcb2 <__ultoa_invert+0x86>
 cc0:	00 97       	sbiw	r24, 0x00	; 0
 cc2:	61 05       	cpc	r22, r1
 cc4:	71 05       	cpc	r23, r1
 cc6:	08 95       	ret
 cc8:	9b 01       	movw	r18, r22
 cca:	ac 01       	movw	r20, r24
 ccc:	0a 2e       	mov	r0, r26
 cce:	06 94       	lsr	r0
 cd0:	57 95       	ror	r21
 cd2:	47 95       	ror	r20
 cd4:	37 95       	ror	r19
 cd6:	27 95       	ror	r18
 cd8:	ba 95       	dec	r27
 cda:	c9 f7       	brne	.-14     	; 0xcce <__ultoa_invert+0xa2>
 cdc:	62 0f       	add	r22, r18
 cde:	73 1f       	adc	r23, r19
 ce0:	84 1f       	adc	r24, r20
 ce2:	95 1f       	adc	r25, r21
 ce4:	a0 1d       	adc	r26, r0
 ce6:	08 95       	ret

00000ce8 <__prologue_saves__>:
 ce8:	2f 92       	push	r2
 cea:	3f 92       	push	r3
 cec:	4f 92       	push	r4
 cee:	5f 92       	push	r5
 cf0:	6f 92       	push	r6
 cf2:	7f 92       	push	r7
 cf4:	8f 92       	push	r8
 cf6:	9f 92       	push	r9
 cf8:	af 92       	push	r10
 cfa:	bf 92       	push	r11
 cfc:	cf 92       	push	r12
 cfe:	df 92       	push	r13
 d00:	ef 92       	push	r14
 d02:	ff 92       	push	r15
 d04:	0f 93       	push	r16
 d06:	1f 93       	push	r17
 d08:	cf 93       	push	r28
 d0a:	df 93       	push	r29
 d0c:	cd b7       	in	r28, 0x3d	; 61
 d0e:	de b7       	in	r29, 0x3e	; 62
 d10:	ca 1b       	sub	r28, r26
 d12:	db 0b       	sbc	r29, r27
 d14:	0f b6       	in	r0, 0x3f	; 63
 d16:	f8 94       	cli
 d18:	de bf       	out	0x3e, r29	; 62
 d1a:	0f be       	out	0x3f, r0	; 63
 d1c:	cd bf       	out	0x3d, r28	; 61
 d1e:	09 94       	ijmp

00000d20 <__epilogue_restores__>:
 d20:	2a 88       	ldd	r2, Y+18	; 0x12
 d22:	39 88       	ldd	r3, Y+17	; 0x11
 d24:	48 88       	ldd	r4, Y+16	; 0x10
 d26:	5f 84       	ldd	r5, Y+15	; 0x0f
 d28:	6e 84       	ldd	r6, Y+14	; 0x0e
 d2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 d2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 d2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 d30:	aa 84       	ldd	r10, Y+10	; 0x0a
 d32:	b9 84       	ldd	r11, Y+9	; 0x09
 d34:	c8 84       	ldd	r12, Y+8	; 0x08
 d36:	df 80       	ldd	r13, Y+7	; 0x07
 d38:	ee 80       	ldd	r14, Y+6	; 0x06
 d3a:	fd 80       	ldd	r15, Y+5	; 0x05
 d3c:	0c 81       	ldd	r16, Y+4	; 0x04
 d3e:	1b 81       	ldd	r17, Y+3	; 0x03
 d40:	aa 81       	ldd	r26, Y+2	; 0x02
 d42:	b9 81       	ldd	r27, Y+1	; 0x01
 d44:	ce 0f       	add	r28, r30
 d46:	d1 1d       	adc	r29, r1
 d48:	0f b6       	in	r0, 0x3f	; 63
 d4a:	f8 94       	cli
 d4c:	de bf       	out	0x3e, r29	; 62
 d4e:	0f be       	out	0x3f, r0	; 63
 d50:	cd bf       	out	0x3d, r28	; 61
 d52:	ed 01       	movw	r28, r26
 d54:	08 95       	ret

00000d56 <_exit>:
 d56:	f8 94       	cli

00000d58 <__stop_program>:
 d58:	ff cf       	rjmp	.-2      	; 0xd58 <__stop_program>
