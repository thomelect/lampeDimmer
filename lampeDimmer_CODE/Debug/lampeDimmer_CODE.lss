
lampeDimmer_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000f36  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  00800108  00800108  00000fd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001235  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0b  00000000  00000000  00002385  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ab  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000770  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e2  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000046a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_25>
  68:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_26>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e3       	ldi	r30, 0x36	; 54
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a7 3b       	cpi	r26, 0xB7	; 183
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
  e2:	0c 94 99 07 	jmp	0xf32	; 0xf32 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
	//ADCSRA = ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	//ADCSRB = ADHSM ACME MUX5 – ADTS3 ADTS2 ADTS1 ADTS0
	//DIDR0 = ADC7D ADC6D ADC5D ADC4D - - ADC1D ADC0D
	//DIDR2 = - - ADC13D ADC12D ADC11D ADC10D ADC9D ADC8D
	
	ADMUX = (1<<REFS0); //Référence sur AVcc avec un condensateur sur la broche AREF.
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enable / ADC diviseur = 128 (le plus lent possible).
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = (1<<ADHSM);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = (1<<ADC0D); //entrée numérique désactivée pour le ADC0.
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 102:	08 95       	ret

00000104 <adcRead>:
}

uint16_t adcRead(void)
{
	ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //On attend que la lecture du ADC soir terminée.
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <adcRead+0xa>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 11c:	08 95       	ret

0000011e <adcRead8>:

uint8_t adcRead8(void)
{
	return (adcRead() >> 2);
 11e:	0e 94 82 00 	call	0x104	; 0x104 <adcRead>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	08 95       	ret

0000012c <__vector_21>:

/**
*@brief Interruption de la comparaison sur OCR0A (timer0) qui met msFlag à 1 lorsque msCnt atteint TIMER_CNT_CYCLE qui est définie dans le define. msCnt est incrémenté à chaques 1ms.
*/
ISR(TIMER0_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	msCntAdc++;
 13a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <msCntAdc>
 13e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <msCntAdc+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <msCntAdc+0x1>
 148:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msCntAdc>
	msCntFade++;
 14c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msCntFade>
 150:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msCntFade+0x1>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <msCntFade+0x1>
 15a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <msCntFade>
	if (msCntAdc >= TIMER_CNT_CYCLE_ADC)
 15e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <msCntAdc>
 162:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <msCntAdc+0x1>
 166:	49 97       	sbiw	r24, 0x19	; 25
 168:	60 f0       	brcs	.+24     	; 0x182 <__vector_21+0x56>
	{
		msCntAdc -= TIMER_CNT_CYCLE_ADC;
 16a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <msCntAdc>
 16e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <msCntAdc+0x1>
 172:	49 97       	sbiw	r24, 0x19	; 25
 174:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <msCntAdc+0x1>
 178:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msCntAdc>
		msFlagAdc = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <msFlagAdc>
	}
	if (msCntFade >= TIMER_CNT_CYCLE_FADE)
 182:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msCntFade>
 186:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msCntFade+0x1>
 18a:	c2 97       	sbiw	r24, 0x32	; 50
 18c:	60 f0       	brcs	.+24     	; 0x1a6 <__vector_21+0x7a>
	{
		msCntFade -= TIMER_CNT_CYCLE_FADE;
 18e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msCntFade>
 192:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msCntFade+0x1>
 196:	c2 97       	sbiw	r24, 0x32	; 50
 198:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <msCntFade+0x1>
 19c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <msCntFade>
		msFlagFade = 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <msFlagFade>
	}
}
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <execRxCommand>:

void execRxCommand()
{
	switch (rxCommande)
 1b4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rxCommande>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	39 f0       	breq	.+14     	; 0x1ca <execRxCommand+0x16>
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <execRxCommand+0x10>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	61 f0       	breq	.+24     	; 0x1da <execRxCommand+0x26>
 1c2:	08 95       	ret
	{
		case GET_ETAT: //État non utilisé
			txCommande = 0;
 1c4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <txCommande>
			break;
 1c8:	08 95       	ret
		case SET_VAL: //Réception depuis l'interface de la valeur de la sortie.
			//if (SWITCH()) //Si l'interrupteur du potentiomètre est à la position "ON"...
				valueOut = rxData[0];
 1ca:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <rxData>
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 1d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
			break;
 1d8:	08 95       	ret
		case SET_SLEEP_MODE:
				veilleMode = rxData[0];
 1da:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <rxData>
 1de:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <veilleMode>
 1e2:	08 95       	ret

000001e4 <outputVeille>:
	SWITCH_INIT();
}

void outputVeille(uint8_t value)
{
	switch (value)
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	49 f0       	breq	.+18     	; 0x1fa <outputVeille+0x16>
 1e8:	18 f0       	brcs	.+6      	; 0x1f0 <outputVeille+0xc>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	69 f0       	breq	.+26     	; 0x208 <outputVeille+0x24>
 1ee:	08 95       	ret
	{
		case 0:
			valueOut = 0;
 1f0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <valueOut+0x1>
 1f4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <valueOut>
			break;
 1f8:	08 95       	ret
		case 1:
			valueOut = 255;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 202:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
			break;
 206:	08 95       	ret
		case 2:
			if (valueOut <= 1) //Lorsque oc4aValue à atteint son minimum.
 208:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <valueOut>
 20c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <valueOut+0x1>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 05       	cpc	r25, r1
 214:	30 f4       	brcc	.+12     	; 0x222 <outputVeille+0x3e>
			{
				increment = INCREMENT_STEP;
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 21e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			}
			if (valueOut >= 255) //Lorsque oc4aValue à atteint son maximum.
 222:	8f 3f       	cpi	r24, 0xFF	; 255
 224:	91 05       	cpc	r25, r1
 226:	30 f0       	brcs	.+12     	; 0x234 <outputVeille+0x50>
			{
				increment = -INCREMENT_STEP;
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	3f ef       	ldi	r19, 0xFF	; 255
 22c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 230:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			}
			if (msFlagFade)
 234:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <msFlagFade>
 238:	22 23       	and	r18, r18
 23a:	61 f0       	breq	.+24     	; 0x254 <outputVeille+0x70>
			{
				msFlagFade = 0;
 23c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <msFlagFade>
				valueOut += increment;
 240:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 244:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 248:	82 0f       	add	r24, r18
 24a:	93 1f       	adc	r25, r19
 24c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 250:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
 254:	08 95       	ret

00000256 <parseRxData>:
* @param data la donnée à traiter
*/
void parseRxData(uint8_t data)
{
	//switch case des différents paramètres de la trame de réception
	switch (rxState)
 256:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <rxState>
 25a:	92 30       	cpi	r25, 0x02	; 2
 25c:	e1 f0       	breq	.+56     	; 0x296 <parseRxData+0x40>
 25e:	18 f4       	brcc	.+6      	; 0x266 <parseRxData+0x10>
 260:	91 30       	cpi	r25, 0x01	; 1
 262:	71 f0       	breq	.+28     	; 0x280 <parseRxData+0x2a>
 264:	04 c0       	rjmp	.+8      	; 0x26e <parseRxData+0x18>
 266:	93 30       	cpi	r25, 0x03	; 3
 268:	21 f1       	breq	.+72     	; 0x2b2 <parseRxData+0x5c>
 26a:	94 30       	cpi	r25, 0x04	; 4
 26c:	a1 f1       	breq	.+104    	; 0x2d6 <parseRxData+0x80>
	{
		//confirmation que la trame débute par '<'
		default :
			if(data == '<')
 26e:	8c 33       	cpi	r24, 0x3C	; 60
 270:	09 f0       	breq	.+2      	; 0x274 <parseRxData+0x1e>
 272:	41 c0       	rjmp	.+130    	; 0x2f6 <parseRxData+0xa0>
			{
				rxState = RXSIZE;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
				rxDataCnt = 0;
 27a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rxDataCnt>
 27e:	08 95       	ret
			}
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXSIZE:
			rxDataSize = data;
 280:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rxDataSize>
			if(rxDataSize >= _MAX_RXDATASIZE_)
 284:	80 31       	cpi	r24, 0x10	; 16
 286:	18 f0       	brcs	.+6      	; 0x28e <parseRxData+0x38>
				rxState = WAIT;
 288:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rxState>
 28c:	08 95       	ret
			else
				rxState = RXCOMMANDE;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 294:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//Traitement de la commande.
		case RXCOMMANDE:
			rxCommande = data;
 296:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rxCommande>
			if(rxDataSize)
 29a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rxDataSize>
 29e:	88 23       	and	r24, r24
 2a0:	21 f0       	breq	.+8      	; 0x2aa <parseRxData+0x54>
				rxState = RXDATA;
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 2a8:	08 95       	ret
			else
				rxState = VALIDATE;
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 2b0:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//Traitement de la donnée.
		case RXDATA:
			rxData[rxDataCnt++] = data;
 2b2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <rxDataCnt>
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	9e 0f       	add	r25, r30
 2ba:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <rxDataCnt>
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e1 5e       	subi	r30, 0xE1	; 225
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	80 83       	st	Z, r24
			if(rxDataCnt == rxDataSize)
 2c6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rxDataSize>
 2ca:	98 13       	cpse	r25, r24
 2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <parseRxData+0xa0>
				rxState = VALIDATE;
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 2d4:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//confirmation que la trame se termine par '>'
		case VALIDATE :
			rxState = WAIT;
 2d6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rxState>
			if(data == '>')
 2da:	8e 33       	cpi	r24, 0x3E	; 62
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <parseRxData+0x8e>
				execRxCommand();//si oui la fonction execRxCommand() est appelée
 2de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <execRxCommand>
 2e2:	08 95       	ret
			else
				rxErrorCommCnt++;// sinon le nombre d'erreur augmente
 2e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2e8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 2f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2f6:	08 95       	ret

000002f8 <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	uint8_t top = 250; //Valeur de OCR0A.
	TCCR0A = 0b00000010; //Mode CTC.
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Prescaler de 64.
 2fc:	93 e0       	ldi	r25, 0x03	; 3
 2fe:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0b00000010; //Output compare match A interrupt enable.
 300:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = top-1; //62.5ns * 64 * 250 = 1ms.
 304:	89 ef       	ldi	r24, 0xF9	; 249
 306:	87 bd       	out	0x27, r24	; 39
	sei();
 308:	78 94       	sei
 30a:	08 95       	ret

0000030c <timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4A = 0b10000010; //PWM output OC4A.
 30c:	82 e8       	ldi	r24, 0x82	; 130
 30e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	TCCR4B = 0b00000100; //Prescaler de 4.
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	OCR4C = 255-1; //62.5ns * 4 * 255 = 127.5us.
 318:	8e ef       	ldi	r24, 0xFE	; 254
 31a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
	OUTPUT_VALUE(0); //Valeur de la sortie.
 31e:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>
 322:	08 95       	ret

00000324 <miscInit>:
	*/
}

void miscInit(void)
{
	adcInit(); //Appel de la fonction d'initialisation du ADC.
 324:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
	timer0Init(); //Initialisation de timer 0.
 328:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <timer0Init>
	timer4Init(); //Initialisation de timer 4.
 32c:	0e 94 86 01 	call	0x30c	; 0x30c <timer4Init>
	usartInit(1000000, F_CPU); //Initialisation du USART à 1Mbps.
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	34 e2       	ldi	r19, 0x24	; 36
 334:	44 ef       	ldi	r20, 0xF4	; 244
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	60 e4       	ldi	r22, 0x40	; 64
 33a:	72 e4       	ldi	r23, 0x42	; 66
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 8b 02 	call	0x516	; 0x516 <usartInit>
	
	OUTPUT_INIT();
 344:	3f 9a       	sbi	0x07, 7	; 7
	SWITCH_INIT();
 346:	2b 9a       	sbi	0x05, 3	; 5
 348:	08 95       	ret

0000034a <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 34a:	0e 94 92 01 	call	0x324	; 0x324 <miscInit>
					}
					valueOut /= 100;
					if (valueOut >= 255) //Si valueOut dépasse 255..
						valueOut = 255; //valueOut est limité à 255.
				}
				sprintf(msg, "%d\n\r", valueOut);
 34e:	0f 2e       	mov	r0, r31
 350:	f2 e0       	ldi	r31, 0x02	; 2
 352:	cf 2e       	mov	r12, r31
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	df 2e       	mov	r13, r31
 358:	f0 2d       	mov	r31, r0
 35a:	0f 2e       	mov	r0, r31
 35c:	ff e2       	ldi	r31, 0x2F	; 47
 35e:	ef 2e       	mov	r14, r31
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	ff 2e       	mov	r15, r31
 364:	f0 2d       	mov	r31, r0
						
						valueOut += adcRead8();
					}
					valueOut /= 100;
					if (valueOut >= 255) //Si valueOut dépasse 255..
						valueOut = 255; //valueOut est limité à 255.
 366:	aa 24       	eor	r10, r10
 368:	aa 94       	dec	r10
 36a:	b1 2c       	mov	r11, r1
				usartSendString(msg);
			}
		}
		else  //Si l'interrupteur du potentiomètre est à la position "OFF"...
			outputVeille(veilleMode);
		OUTPUT_VALUE(valueOut);
 36c:	0c e0       	ldi	r16, 0x0C	; 12
 36e:	11 e0       	ldi	r17, 0x01	; 1
 370:	cf ec       	ldi	r28, 0xCF	; 207
 372:	d0 e0       	ldi	r29, 0x00	; 0
{
	miscInit();
	
	while (1)
	{
				if (usartRxAvailable()) //Si un caractère est disponible...
 374:	0e 94 0c 03 	call	0x618	; 0x618 <usartRxAvailable>
 378:	88 23       	and	r24, r24
 37a:	21 f0       	breq	.+8      	; 0x384 <main+0x3a>
				parseRxData(usartRemRxData()); //appel de la fonction parseRxData() avec en paramètre la valeur retournée par usartRemRxData().
 37c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <usartRemRxData>
 380:	0e 94 2b 01 	call	0x256	; 0x256 <parseRxData>
		if (SWITCH()) //Si l'interrupteur du potentiomètre est à la position "ON"...
 384:	1b 99       	sbic	0x03, 3	; 3
 386:	57 c0       	rjmp	.+174    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
// 			if (usartRxAvailable()) //Si un caractère est disponible...
// 				parseRxData(usartRemRxData()); //appel de la fonction parseRxData() avec en paramètre la valeur retournée par usartRemRxData().
			if (msFlagAdc)
 388:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <msFlagAdc>
 38c:	88 23       	and	r24, r24
 38e:	09 f4       	brne	.+2      	; 0x392 <main+0x48>
 390:	56 c0       	rjmp	.+172    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				msFlagAdc = 0;
 392:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <msFlagAdc>
				if (valueAdc != adcRead8())
 396:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <valueAdc>
 3a0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <valueAdc+0x1>
 3a4:	82 17       	cp	r24, r18
 3a6:	93 07       	cpc	r25, r19
 3a8:	81 f1       	breq	.+96     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				{
					valueAdc = adcRead8();
 3aa:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <valueAdc+0x1>
 3b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <valueAdc>
 3b8:	0f 2e       	mov	r0, r31
 3ba:	f4 e6       	ldi	r31, 0x64	; 100
 3bc:	9f 2e       	mov	r9, r31
 3be:	f0 2d       	mov	r31, r0
					for (uint8_t i = 0; i < 100; i++) //Une valeur moyenne sur un echantillon de 100 mesures est calculé afin d'éviter d'être entre deux valeurs.
					{
						
						valueOut += adcRead8();
 3c0:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 3c4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <valueOut>
 3c8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <valueOut+0x1>
 3cc:	28 0f       	add	r18, r24
 3ce:	31 1d       	adc	r19, r1
 3d0:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <valueOut+0x1>
 3d4:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <valueOut>
 3d8:	9a 94       	dec	r9
			{
				msFlagAdc = 0;
				if (valueAdc != adcRead8())
				{
					valueAdc = adcRead8();
					for (uint8_t i = 0; i < 100; i++) //Une valeur moyenne sur un echantillon de 100 mesures est calculé afin d'éviter d'être entre deux valeurs.
 3da:	91 10       	cpse	r9, r1
 3dc:	f1 cf       	rjmp	.-30     	; 0x3c0 <main+0x76>
					{
						
						valueOut += adcRead8();
					}
					valueOut /= 100;
 3de:	36 95       	lsr	r19
 3e0:	27 95       	ror	r18
 3e2:	36 95       	lsr	r19
 3e4:	27 95       	ror	r18
 3e6:	ab e7       	ldi	r26, 0x7B	; 123
 3e8:	b4 e1       	ldi	r27, 0x14	; 20
 3ea:	0e 94 a0 04 	call	0x940	; 0x940 <__umulhisi3>
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
					if (valueOut >= 255) //Si valueOut dépasse 255..
 3f2:	8f 3f       	cpi	r24, 0xFF	; 255
 3f4:	91 05       	cpc	r25, r1
 3f6:	28 f4       	brcc	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
					for (uint8_t i = 0; i < 100; i++) //Une valeur moyenne sur un echantillon de 100 mesures est calculé afin d'éviter d'être entre deux valeurs.
					{
						
						valueOut += adcRead8();
					}
					valueOut /= 100;
 3f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 3fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
 400:	04 c0       	rjmp	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
					if (valueOut >= 255) //Si valueOut dépasse 255..
						valueOut = 255; //valueOut est limité à 255.
 402:	b0 92 0d 01 	sts	0x010D, r11	; 0x80010d <valueOut+0x1>
 406:	a0 92 0c 01 	sts	0x010C, r10	; 0x80010c <valueOut>
				}
				sprintf(msg, "%d\n\r", valueOut);
 40a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <valueOut+0x1>
 40e:	8f 93       	push	r24
 410:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <valueOut>
 414:	8f 93       	push	r24
 416:	df 92       	push	r13
 418:	cf 92       	push	r12
 41a:	ff 92       	push	r15
 41c:	ef 92       	push	r14
 41e:	0e 94 af 04 	call	0x95e	; 0x95e <sprintf>
				usartSendString(msg);
 422:	c7 01       	movw	r24, r14
 424:	0e 94 37 03 	call	0x66e	; 0x66e <usartSendString>
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	04 c0       	rjmp	.+8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			}
		}
		else  //Si l'interrupteur du potentiomètre est à la position "OFF"...
			outputVeille(veilleMode);
 436:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <veilleMode>
 43a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <outputVeille>
		OUTPUT_VALUE(valueOut);
 43e:	f8 01       	movw	r30, r16
 440:	80 81       	ld	r24, Z
 442:	88 83       	st	Y, r24
	}
 444:	97 cf       	rjmp	.-210    	; 0x374 <main+0x2a>

00000446 <__vector_25>:
	{
		if(usartSendByte(source[i]))
			return i;
	}
	return size;
}
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
 45c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_rxCnt>
 466:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_rxBufferIn>
 46a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_rxBufferIn+0x1>
 46e:	9c 01       	movw	r18, r24
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
 474:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <_rxBufferIn+0x1>
 478:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <_rxBufferIn>
 47c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 480:	fc 01       	movw	r30, r24
 482:	e9 5c       	subi	r30, 0xC9	; 201
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	20 83       	st	Z, r18
 488:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_rxBufferIn>
 48c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_rxBufferIn+0x1>
 490:	80 34       	cpi	r24, 0x40	; 64
 492:	91 05       	cpc	r25, r1
 494:	20 f0       	brcs	.+8      	; 0x49e <__vector_25+0x58>
 496:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_rxBufferIn+0x1>
 49a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <_rxBufferIn>
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_26>:
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	8f 93       	push	r24
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
 4c4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_txCnt>
 4c8:	81 11       	cpse	r24, r1
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <__vector_26+0x24>
 4cc:	e9 ec       	ldi	r30, 0xC9	; 201
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	8f 7d       	andi	r24, 0xDF	; 223
 4d4:	80 83       	st	Z, r24
 4d6:	17 c0       	rjmp	.+46     	; 0x506 <__vector_26+0x52>
 4d8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_txCnt>
 4dc:	81 50       	subi	r24, 0x01	; 1
 4de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_txCnt>
 4e2:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <_txBufferOut>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	8e 0f       	add	r24, r30
 4ea:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_txBufferOut>
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	e9 58       	subi	r30, 0x89	; 137
 4f2:	fe 4f       	sbci	r31, 0xFE	; 254
 4f4:	80 81       	ld	r24, Z
 4f6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 4fa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_txBufferOut>
 4fe:	80 34       	cpi	r24, 0x40	; 64
 500:	10 f0       	brcs	.+4      	; 0x506 <__vector_26+0x52>
 502:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_txBufferOut>
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	8f 91       	pop	r24
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <usartInit>:
 516:	cf 92       	push	r12
 518:	df 92       	push	r13
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	6b 01       	movw	r12, r22
 520:	7c 01       	movw	r14, r24
 522:	c1 14       	cp	r12, r1
 524:	82 ec       	ldi	r24, 0xC2	; 194
 526:	d8 06       	cpc	r13, r24
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	e8 06       	cpc	r14, r24
 52c:	f1 04       	cpc	r15, r1
 52e:	20 f1       	brcs	.+72     	; 0x578 <usartInit+0x62>
 530:	e8 ec       	ldi	r30, 0xC8	; 200
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	82 60       	ori	r24, 0x02	; 2
 538:	80 83       	st	Z, r24
 53a:	ca 01       	movw	r24, r20
 53c:	b9 01       	movw	r22, r18
 53e:	68 94       	set
 540:	12 f8       	bld	r1, 2
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	16 94       	lsr	r1
 54c:	d1 f7       	brne	.-12     	; 0x542 <usartInit+0x2c>
 54e:	a7 01       	movw	r20, r14
 550:	96 01       	movw	r18, r12
 552:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__udivmodsi4>
 556:	ca 01       	movw	r24, r20
 558:	b9 01       	movw	r22, r18
 55a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	5f e3       	ldi	r21, 0x3F	; 63
 566:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__subsf3>
 56a:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 56e:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 572:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 576:	23 c0       	rjmp	.+70     	; 0x5be <usartInit+0xa8>
 578:	e8 ec       	ldi	r30, 0xC8	; 200
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	8d 7f       	andi	r24, 0xFD	; 253
 580:	80 83       	st	Z, r24
 582:	ca 01       	movw	r24, r20
 584:	b9 01       	movw	r22, r18
 586:	68 94       	set
 588:	13 f8       	bld	r1, 3
 58a:	96 95       	lsr	r25
 58c:	87 95       	ror	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	16 94       	lsr	r1
 594:	d1 f7       	brne	.-12     	; 0x58a <usartInit+0x74>
 596:	a7 01       	movw	r20, r14
 598:	96 01       	movw	r18, r12
 59a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__udivmodsi4>
 59e:	ca 01       	movw	r24, r20
 5a0:	b9 01       	movw	r22, r18
 5a2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	5f e3       	ldi	r21, 0x3F	; 63
 5ae:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__subsf3>
 5b2:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 5b6:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 5ba:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 5be:	e9 ec       	ldi	r30, 0xC9	; 201
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	88 61       	ori	r24, 0x18	; 24
 5c6:	80 83       	st	Z, r24
 5c8:	78 94       	sei
 5ca:	80 81       	ld	r24, Z
 5cc:	80 68       	ori	r24, 0x80	; 128
 5ce:	80 83       	st	Z, r24
 5d0:	80 81       	ld	r24, Z
 5d2:	80 62       	ori	r24, 0x20	; 32
 5d4:	80 83       	st	Z, r24
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	cf 90       	pop	r12
 5de:	08 95       	ret

000005e0 <usartRemRxData>:
 5e0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 5e4:	88 23       	and	r24, r24
 5e6:	b1 f0       	breq	.+44     	; 0x614 <usartRemRxData+0x34>
 5e8:	f8 94       	cli
 5ea:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 5ee:	81 50       	subi	r24, 0x01	; 1
 5f0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_rxCnt>
 5f4:	78 94       	sei
 5f6:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <_rxBufferOut>
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	9e 0f       	add	r25, r30
 5fe:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_rxBufferOut>
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	e9 5c       	subi	r30, 0xC9	; 201
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	80 81       	ld	r24, Z
 60a:	90 34       	cpi	r25, 0x40	; 64
 60c:	20 f0       	brcs	.+8      	; 0x616 <usartRemRxData+0x36>
 60e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_rxBufferOut>
 612:	08 95       	ret
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	08 95       	ret

00000618 <usartRxAvailable>:
 618:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 61c:	08 95       	ret

0000061e <usartSendByte>:
 61e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_txCnt>
 622:	90 34       	cpi	r25, 0x40	; 64
 624:	10 f5       	brcc	.+68     	; 0x66a <usartSendByte+0x4c>
 626:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_txCnt>
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_txCnt>
 630:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <_txBufferIn>
 634:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <_txBufferIn+0x1>
 638:	a9 01       	movw	r20, r18
 63a:	4f 5f       	subi	r20, 0xFF	; 255
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
 63e:	50 93 18 01 	sts	0x0118, r21	; 0x800118 <_txBufferIn+0x1>
 642:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <_txBufferIn>
 646:	f9 01       	movw	r30, r18
 648:	e9 58       	subi	r30, 0x89	; 137
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	80 83       	st	Z, r24
 64e:	40 34       	cpi	r20, 0x40	; 64
 650:	51 05       	cpc	r21, r1
 652:	20 f0       	brcs	.+8      	; 0x65c <usartSendByte+0x3e>
 654:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_txBufferIn+0x1>
 658:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_txBufferIn>
 65c:	e9 ec       	ldi	r30, 0xC9	; 201
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	80 62       	ori	r24, 0x20	; 32
 664:	80 83       	st	Z, r24
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret

0000066e <usartSendString>:

uint8_t usartSendString(const char * str)
{
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	fc 01       	movw	r30, r24
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 676:	80 81       	ld	r24, Z
 678:	88 23       	and	r24, r24
 67a:	79 f0       	breq	.+30     	; 0x69a <usartSendString+0x2c>
 67c:	8f 01       	movw	r16, r30
 67e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
 680:	0e 94 0f 03 	call	0x61e	; 0x61e <usartSendByte>
 684:	81 11       	cpse	r24, r1
 686:	0b c0       	rjmp	.+22     	; 0x69e <usartSendString+0x30>
			return i;
		nbChar ++;
 688:	cf 5f       	subi	r28, 0xFF	; 255
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 68a:	f8 01       	movw	r30, r16
 68c:	ec 0f       	add	r30, r28
 68e:	f1 1d       	adc	r31, r1
 690:	80 81       	ld	r24, Z
 692:	81 11       	cpse	r24, r1
 694:	f5 cf       	rjmp	.-22     	; 0x680 <usartSendString+0x12>
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
			return i;
		nbChar ++;
 696:	8c 2f       	mov	r24, r28
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <usartSendString+0x32>
	return size;
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <usartSendString+0x32>
 69e:	8c 2f       	mov	r24, r28
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
			return i;
		nbChar ++;
	}
	return nbChar;
 6a0:	cf 91       	pop	r28
 6a2:	1f 91       	pop	r17
 6a4:	0f 91       	pop	r16
 6a6:	08 95       	ret

000006a8 <__subsf3>:
 6a8:	50 58       	subi	r21, 0x80	; 128

000006aa <__addsf3>:
 6aa:	bb 27       	eor	r27, r27
 6ac:	aa 27       	eor	r26, r26
 6ae:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__addsf3x>
 6b2:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_round>
 6b6:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscA>
 6ba:	38 f0       	brcs	.+14     	; 0x6ca <__addsf3+0x20>
 6bc:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscB>
 6c0:	20 f0       	brcs	.+8      	; 0x6ca <__addsf3+0x20>
 6c2:	39 f4       	brne	.+14     	; 0x6d2 <__addsf3+0x28>
 6c4:	9f 3f       	cpi	r25, 0xFF	; 255
 6c6:	19 f4       	brne	.+6      	; 0x6ce <__addsf3+0x24>
 6c8:	26 f4       	brtc	.+8      	; 0x6d2 <__addsf3+0x28>
 6ca:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_nan>
 6ce:	0e f4       	brtc	.+2      	; 0x6d2 <__addsf3+0x28>
 6d0:	e0 95       	com	r30
 6d2:	e7 fb       	bst	r30, 7
 6d4:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>

000006d8 <__addsf3x>:
 6d8:	e9 2f       	mov	r30, r25
 6da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_split3>
 6de:	58 f3       	brcs	.-42     	; 0x6b6 <__addsf3+0xc>
 6e0:	ba 17       	cp	r27, r26
 6e2:	62 07       	cpc	r22, r18
 6e4:	73 07       	cpc	r23, r19
 6e6:	84 07       	cpc	r24, r20
 6e8:	95 07       	cpc	r25, r21
 6ea:	20 f0       	brcs	.+8      	; 0x6f4 <__addsf3x+0x1c>
 6ec:	79 f4       	brne	.+30     	; 0x70c <__addsf3x+0x34>
 6ee:	a6 f5       	brtc	.+104    	; 0x758 <__addsf3x+0x80>
 6f0:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_zero>
 6f4:	0e f4       	brtc	.+2      	; 0x6f8 <__addsf3x+0x20>
 6f6:	e0 95       	com	r30
 6f8:	0b 2e       	mov	r0, r27
 6fa:	ba 2f       	mov	r27, r26
 6fc:	a0 2d       	mov	r26, r0
 6fe:	0b 01       	movw	r0, r22
 700:	b9 01       	movw	r22, r18
 702:	90 01       	movw	r18, r0
 704:	0c 01       	movw	r0, r24
 706:	ca 01       	movw	r24, r20
 708:	a0 01       	movw	r20, r0
 70a:	11 24       	eor	r1, r1
 70c:	ff 27       	eor	r31, r31
 70e:	59 1b       	sub	r21, r25
 710:	99 f0       	breq	.+38     	; 0x738 <__addsf3x+0x60>
 712:	59 3f       	cpi	r21, 0xF9	; 249
 714:	50 f4       	brcc	.+20     	; 0x72a <__addsf3x+0x52>
 716:	50 3e       	cpi	r21, 0xE0	; 224
 718:	68 f1       	brcs	.+90     	; 0x774 <__addsf3x+0x9c>
 71a:	1a 16       	cp	r1, r26
 71c:	f0 40       	sbci	r31, 0x00	; 0
 71e:	a2 2f       	mov	r26, r18
 720:	23 2f       	mov	r18, r19
 722:	34 2f       	mov	r19, r20
 724:	44 27       	eor	r20, r20
 726:	58 5f       	subi	r21, 0xF8	; 248
 728:	f3 cf       	rjmp	.-26     	; 0x710 <__addsf3x+0x38>
 72a:	46 95       	lsr	r20
 72c:	37 95       	ror	r19
 72e:	27 95       	ror	r18
 730:	a7 95       	ror	r26
 732:	f0 40       	sbci	r31, 0x00	; 0
 734:	53 95       	inc	r21
 736:	c9 f7       	brne	.-14     	; 0x72a <__addsf3x+0x52>
 738:	7e f4       	brtc	.+30     	; 0x758 <__addsf3x+0x80>
 73a:	1f 16       	cp	r1, r31
 73c:	ba 0b       	sbc	r27, r26
 73e:	62 0b       	sbc	r22, r18
 740:	73 0b       	sbc	r23, r19
 742:	84 0b       	sbc	r24, r20
 744:	ba f0       	brmi	.+46     	; 0x774 <__addsf3x+0x9c>
 746:	91 50       	subi	r25, 0x01	; 1
 748:	a1 f0       	breq	.+40     	; 0x772 <__addsf3x+0x9a>
 74a:	ff 0f       	add	r31, r31
 74c:	bb 1f       	adc	r27, r27
 74e:	66 1f       	adc	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	c2 f7       	brpl	.-16     	; 0x746 <__addsf3x+0x6e>
 756:	0e c0       	rjmp	.+28     	; 0x774 <__addsf3x+0x9c>
 758:	ba 0f       	add	r27, r26
 75a:	62 1f       	adc	r22, r18
 75c:	73 1f       	adc	r23, r19
 75e:	84 1f       	adc	r24, r20
 760:	48 f4       	brcc	.+18     	; 0x774 <__addsf3x+0x9c>
 762:	87 95       	ror	r24
 764:	77 95       	ror	r23
 766:	67 95       	ror	r22
 768:	b7 95       	ror	r27
 76a:	f7 95       	ror	r31
 76c:	9e 3f       	cpi	r25, 0xFE	; 254
 76e:	08 f0       	brcs	.+2      	; 0x772 <__addsf3x+0x9a>
 770:	b0 cf       	rjmp	.-160    	; 0x6d2 <__addsf3+0x28>
 772:	93 95       	inc	r25
 774:	88 0f       	add	r24, r24
 776:	08 f0       	brcs	.+2      	; 0x77a <__addsf3x+0xa2>
 778:	99 27       	eor	r25, r25
 77a:	ee 0f       	add	r30, r30
 77c:	97 95       	ror	r25
 77e:	87 95       	ror	r24
 780:	08 95       	ret

00000782 <__fixunssfsi>:
 782:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fp_splitA>
 786:	88 f0       	brcs	.+34     	; 0x7aa <__fixunssfsi+0x28>
 788:	9f 57       	subi	r25, 0x7F	; 127
 78a:	98 f0       	brcs	.+38     	; 0x7b2 <__fixunssfsi+0x30>
 78c:	b9 2f       	mov	r27, r25
 78e:	99 27       	eor	r25, r25
 790:	b7 51       	subi	r27, 0x17	; 23
 792:	b0 f0       	brcs	.+44     	; 0x7c0 <__fixunssfsi+0x3e>
 794:	e1 f0       	breq	.+56     	; 0x7ce <__fixunssfsi+0x4c>
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	1a f0       	brmi	.+6      	; 0x7a6 <__fixunssfsi+0x24>
 7a0:	ba 95       	dec	r27
 7a2:	c9 f7       	brne	.-14     	; 0x796 <__fixunssfsi+0x14>
 7a4:	14 c0       	rjmp	.+40     	; 0x7ce <__fixunssfsi+0x4c>
 7a6:	b1 30       	cpi	r27, 0x01	; 1
 7a8:	91 f0       	breq	.+36     	; 0x7ce <__fixunssfsi+0x4c>
 7aa:	0e 94 77 04 	call	0x8ee	; 0x8ee <__fp_zero>
 7ae:	b1 e0       	ldi	r27, 0x01	; 1
 7b0:	08 95       	ret
 7b2:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_zero>
 7b6:	67 2f       	mov	r22, r23
 7b8:	78 2f       	mov	r23, r24
 7ba:	88 27       	eor	r24, r24
 7bc:	b8 5f       	subi	r27, 0xF8	; 248
 7be:	39 f0       	breq	.+14     	; 0x7ce <__fixunssfsi+0x4c>
 7c0:	b9 3f       	cpi	r27, 0xF9	; 249
 7c2:	cc f3       	brlt	.-14     	; 0x7b6 <__fixunssfsi+0x34>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b3 95       	inc	r27
 7cc:	d9 f7       	brne	.-10     	; 0x7c4 <__fixunssfsi+0x42>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__fixunssfsi+0x5c>
 7d0:	90 95       	com	r25
 7d2:	80 95       	com	r24
 7d4:	70 95       	com	r23
 7d6:	61 95       	neg	r22
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	08 95       	ret

000007e0 <__floatunsisf>:
 7e0:	e8 94       	clt
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <__floatsisf+0x12>

000007e4 <__floatsisf>:
 7e4:	97 fb       	bst	r25, 7
 7e6:	3e f4       	brtc	.+14     	; 0x7f6 <__floatsisf+0x12>
 7e8:	90 95       	com	r25
 7ea:	80 95       	com	r24
 7ec:	70 95       	com	r23
 7ee:	61 95       	neg	r22
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	99 23       	and	r25, r25
 7f8:	a9 f0       	breq	.+42     	; 0x824 <__floatsisf+0x40>
 7fa:	f9 2f       	mov	r31, r25
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	bb 27       	eor	r27, r27
 800:	93 95       	inc	r25
 802:	f6 95       	lsr	r31
 804:	87 95       	ror	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b7 95       	ror	r27
 80c:	f1 11       	cpse	r31, r1
 80e:	f8 cf       	rjmp	.-16     	; 0x800 <__floatsisf+0x1c>
 810:	fa f4       	brpl	.+62     	; 0x850 <__floatsisf+0x6c>
 812:	bb 0f       	add	r27, r27
 814:	11 f4       	brne	.+4      	; 0x81a <__floatsisf+0x36>
 816:	60 ff       	sbrs	r22, 0
 818:	1b c0       	rjmp	.+54     	; 0x850 <__floatsisf+0x6c>
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	16 c0       	rjmp	.+44     	; 0x850 <__floatsisf+0x6c>
 824:	88 23       	and	r24, r24
 826:	11 f0       	breq	.+4      	; 0x82c <__floatsisf+0x48>
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	11 c0       	rjmp	.+34     	; 0x84e <__floatsisf+0x6a>
 82c:	77 23       	and	r23, r23
 82e:	21 f0       	breq	.+8      	; 0x838 <__floatsisf+0x54>
 830:	9e e8       	ldi	r25, 0x8E	; 142
 832:	87 2f       	mov	r24, r23
 834:	76 2f       	mov	r23, r22
 836:	05 c0       	rjmp	.+10     	; 0x842 <__floatsisf+0x5e>
 838:	66 23       	and	r22, r22
 83a:	71 f0       	breq	.+28     	; 0x858 <__floatsisf+0x74>
 83c:	96 e8       	ldi	r25, 0x86	; 134
 83e:	86 2f       	mov	r24, r22
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	2a f0       	brmi	.+10     	; 0x850 <__floatsisf+0x6c>
 846:	9a 95       	dec	r25
 848:	66 0f       	add	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	da f7       	brpl	.-10     	; 0x846 <__floatsisf+0x62>
 850:	88 0f       	add	r24, r24
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	97 f9       	bld	r25, 7
 858:	08 95       	ret

0000085a <__fp_inf>:
 85a:	97 f9       	bld	r25, 7
 85c:	9f 67       	ori	r25, 0x7F	; 127
 85e:	80 e8       	ldi	r24, 0x80	; 128
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	08 95       	ret

00000866 <__fp_nan>:
 866:	9f ef       	ldi	r25, 0xFF	; 255
 868:	80 ec       	ldi	r24, 0xC0	; 192
 86a:	08 95       	ret

0000086c <__fp_pscA>:
 86c:	00 24       	eor	r0, r0
 86e:	0a 94       	dec	r0
 870:	16 16       	cp	r1, r22
 872:	17 06       	cpc	r1, r23
 874:	18 06       	cpc	r1, r24
 876:	09 06       	cpc	r0, r25
 878:	08 95       	ret

0000087a <__fp_pscB>:
 87a:	00 24       	eor	r0, r0
 87c:	0a 94       	dec	r0
 87e:	12 16       	cp	r1, r18
 880:	13 06       	cpc	r1, r19
 882:	14 06       	cpc	r1, r20
 884:	05 06       	cpc	r0, r21
 886:	08 95       	ret

00000888 <__fp_round>:
 888:	09 2e       	mov	r0, r25
 88a:	03 94       	inc	r0
 88c:	00 0c       	add	r0, r0
 88e:	11 f4       	brne	.+4      	; 0x894 <__fp_round+0xc>
 890:	88 23       	and	r24, r24
 892:	52 f0       	brmi	.+20     	; 0x8a8 <__fp_round+0x20>
 894:	bb 0f       	add	r27, r27
 896:	40 f4       	brcc	.+16     	; 0x8a8 <__fp_round+0x20>
 898:	bf 2b       	or	r27, r31
 89a:	11 f4       	brne	.+4      	; 0x8a0 <__fp_round+0x18>
 89c:	60 ff       	sbrs	r22, 0
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__fp_round+0x20>
 8a0:	6f 5f       	subi	r22, 0xFF	; 255
 8a2:	7f 4f       	sbci	r23, 0xFF	; 255
 8a4:	8f 4f       	sbci	r24, 0xFF	; 255
 8a6:	9f 4f       	sbci	r25, 0xFF	; 255
 8a8:	08 95       	ret

000008aa <__fp_split3>:
 8aa:	57 fd       	sbrc	r21, 7
 8ac:	90 58       	subi	r25, 0x80	; 128
 8ae:	44 0f       	add	r20, r20
 8b0:	55 1f       	adc	r21, r21
 8b2:	59 f0       	breq	.+22     	; 0x8ca <__fp_splitA+0x10>
 8b4:	5f 3f       	cpi	r21, 0xFF	; 255
 8b6:	71 f0       	breq	.+28     	; 0x8d4 <__fp_splitA+0x1a>
 8b8:	47 95       	ror	r20

000008ba <__fp_splitA>:
 8ba:	88 0f       	add	r24, r24
 8bc:	97 fb       	bst	r25, 7
 8be:	99 1f       	adc	r25, r25
 8c0:	61 f0       	breq	.+24     	; 0x8da <__fp_splitA+0x20>
 8c2:	9f 3f       	cpi	r25, 0xFF	; 255
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <__fp_splitA+0x2a>
 8c6:	87 95       	ror	r24
 8c8:	08 95       	ret
 8ca:	12 16       	cp	r1, r18
 8cc:	13 06       	cpc	r1, r19
 8ce:	14 06       	cpc	r1, r20
 8d0:	55 1f       	adc	r21, r21
 8d2:	f2 cf       	rjmp	.-28     	; 0x8b8 <__fp_split3+0xe>
 8d4:	46 95       	lsr	r20
 8d6:	f1 df       	rcall	.-30     	; 0x8ba <__fp_splitA>
 8d8:	08 c0       	rjmp	.+16     	; 0x8ea <__fp_splitA+0x30>
 8da:	16 16       	cp	r1, r22
 8dc:	17 06       	cpc	r1, r23
 8de:	18 06       	cpc	r1, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	f1 cf       	rjmp	.-30     	; 0x8c6 <__fp_splitA+0xc>
 8e4:	86 95       	lsr	r24
 8e6:	71 05       	cpc	r23, r1
 8e8:	61 05       	cpc	r22, r1
 8ea:	08 94       	sec
 8ec:	08 95       	ret

000008ee <__fp_zero>:
 8ee:	e8 94       	clt

000008f0 <__fp_szero>:
 8f0:	bb 27       	eor	r27, r27
 8f2:	66 27       	eor	r22, r22
 8f4:	77 27       	eor	r23, r23
 8f6:	cb 01       	movw	r24, r22
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret

000008fc <__udivmodsi4>:
 8fc:	a1 e2       	ldi	r26, 0x21	; 33
 8fe:	1a 2e       	mov	r1, r26
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	fd 01       	movw	r30, r26
 906:	0d c0       	rjmp	.+26     	; 0x922 <__udivmodsi4_ep>

00000908 <__udivmodsi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	ee 1f       	adc	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	a2 17       	cp	r26, r18
 912:	b3 07       	cpc	r27, r19
 914:	e4 07       	cpc	r30, r20
 916:	f5 07       	cpc	r31, r21
 918:	20 f0       	brcs	.+8      	; 0x922 <__udivmodsi4_ep>
 91a:	a2 1b       	sub	r26, r18
 91c:	b3 0b       	sbc	r27, r19
 91e:	e4 0b       	sbc	r30, r20
 920:	f5 0b       	sbc	r31, r21

00000922 <__udivmodsi4_ep>:
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	1a 94       	dec	r1
 92c:	69 f7       	brne	.-38     	; 0x908 <__udivmodsi4_loop>
 92e:	60 95       	com	r22
 930:	70 95       	com	r23
 932:	80 95       	com	r24
 934:	90 95       	com	r25
 936:	9b 01       	movw	r18, r22
 938:	ac 01       	movw	r20, r24
 93a:	bd 01       	movw	r22, r26
 93c:	cf 01       	movw	r24, r30
 93e:	08 95       	ret

00000940 <__umulhisi3>:
 940:	a2 9f       	mul	r26, r18
 942:	b0 01       	movw	r22, r0
 944:	b3 9f       	mul	r27, r19
 946:	c0 01       	movw	r24, r0
 948:	a3 9f       	mul	r26, r19
 94a:	70 0d       	add	r23, r0
 94c:	81 1d       	adc	r24, r1
 94e:	11 24       	eor	r1, r1
 950:	91 1d       	adc	r25, r1
 952:	b2 9f       	mul	r27, r18
 954:	70 0d       	add	r23, r0
 956:	81 1d       	adc	r24, r1
 958:	11 24       	eor	r1, r1
 95a:	91 1d       	adc	r25, r1
 95c:	08 95       	ret

0000095e <sprintf>:
 95e:	ae e0       	ldi	r26, 0x0E	; 14
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	e5 eb       	ldi	r30, 0xB5	; 181
 964:	f4 e0       	ldi	r31, 0x04	; 4
 966:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__prologue_saves__+0x1c>
 96a:	0d 89       	ldd	r16, Y+21	; 0x15
 96c:	1e 89       	ldd	r17, Y+22	; 0x16
 96e:	86 e0       	ldi	r24, 0x06	; 6
 970:	8c 83       	std	Y+4, r24	; 0x04
 972:	1a 83       	std	Y+2, r17	; 0x02
 974:	09 83       	std	Y+1, r16	; 0x01
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	9f e7       	ldi	r25, 0x7F	; 127
 97a:	9e 83       	std	Y+6, r25	; 0x06
 97c:	8d 83       	std	Y+5, r24	; 0x05
 97e:	ae 01       	movw	r20, r28
 980:	47 5e       	subi	r20, 0xE7	; 231
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	6f 89       	ldd	r22, Y+23	; 0x17
 986:	78 8d       	ldd	r23, Y+24	; 0x18
 988:	ce 01       	movw	r24, r28
 98a:	01 96       	adiw	r24, 0x01	; 1
 98c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vfprintf>
 990:	ef 81       	ldd	r30, Y+7	; 0x07
 992:	f8 85       	ldd	r31, Y+8	; 0x08
 994:	e0 0f       	add	r30, r16
 996:	f1 1f       	adc	r31, r17
 998:	10 82       	st	Z, r1
 99a:	2e 96       	adiw	r28, 0x0e	; 14
 99c:	e4 e0       	ldi	r30, 0x04	; 4
 99e:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__epilogue_restores__+0x1c>

000009a2 <vfprintf>:
 9a2:	ab e0       	ldi	r26, 0x0B	; 11
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	e7 ed       	ldi	r30, 0xD7	; 215
 9a8:	f4 e0       	ldi	r31, 0x04	; 4
 9aa:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__prologue_saves__>
 9ae:	6c 01       	movw	r12, r24
 9b0:	7b 01       	movw	r14, r22
 9b2:	8a 01       	movw	r16, r20
 9b4:	fc 01       	movw	r30, r24
 9b6:	17 82       	std	Z+7, r1	; 0x07
 9b8:	16 82       	std	Z+6, r1	; 0x06
 9ba:	83 81       	ldd	r24, Z+3	; 0x03
 9bc:	81 ff       	sbrs	r24, 1
 9be:	cc c1       	rjmp	.+920    	; 0xd58 <__stack+0x259>
 9c0:	ce 01       	movw	r24, r28
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	3c 01       	movw	r6, r24
 9c6:	f6 01       	movw	r30, r12
 9c8:	93 81       	ldd	r25, Z+3	; 0x03
 9ca:	f7 01       	movw	r30, r14
 9cc:	93 fd       	sbrc	r25, 3
 9ce:	85 91       	lpm	r24, Z+
 9d0:	93 ff       	sbrs	r25, 3
 9d2:	81 91       	ld	r24, Z+
 9d4:	7f 01       	movw	r14, r30
 9d6:	88 23       	and	r24, r24
 9d8:	09 f4       	brne	.+2      	; 0x9dc <vfprintf+0x3a>
 9da:	ba c1       	rjmp	.+884    	; 0xd50 <__stack+0x251>
 9dc:	85 32       	cpi	r24, 0x25	; 37
 9de:	39 f4       	brne	.+14     	; 0x9ee <vfprintf+0x4c>
 9e0:	93 fd       	sbrc	r25, 3
 9e2:	85 91       	lpm	r24, Z+
 9e4:	93 ff       	sbrs	r25, 3
 9e6:	81 91       	ld	r24, Z+
 9e8:	7f 01       	movw	r14, r30
 9ea:	85 32       	cpi	r24, 0x25	; 37
 9ec:	29 f4       	brne	.+10     	; 0x9f8 <vfprintf+0x56>
 9ee:	b6 01       	movw	r22, r12
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 9f6:	e7 cf       	rjmp	.-50     	; 0x9c6 <vfprintf+0x24>
 9f8:	91 2c       	mov	r9, r1
 9fa:	21 2c       	mov	r2, r1
 9fc:	31 2c       	mov	r3, r1
 9fe:	ff e1       	ldi	r31, 0x1F	; 31
 a00:	f3 15       	cp	r31, r3
 a02:	d8 f0       	brcs	.+54     	; 0xa3a <__DATA_REGION_LENGTH__+0x3a>
 a04:	8b 32       	cpi	r24, 0x2B	; 43
 a06:	79 f0       	breq	.+30     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 a08:	38 f4       	brcc	.+14     	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
 a0a:	80 32       	cpi	r24, 0x20	; 32
 a0c:	79 f0       	breq	.+30     	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 a0e:	83 32       	cpi	r24, 0x23	; 35
 a10:	a1 f4       	brne	.+40     	; 0xa3a <__DATA_REGION_LENGTH__+0x3a>
 a12:	23 2d       	mov	r18, r3
 a14:	20 61       	ori	r18, 0x10	; 16
 a16:	1d c0       	rjmp	.+58     	; 0xa52 <__DATA_REGION_LENGTH__+0x52>
 a18:	8d 32       	cpi	r24, 0x2D	; 45
 a1a:	61 f0       	breq	.+24     	; 0xa34 <__DATA_REGION_LENGTH__+0x34>
 a1c:	80 33       	cpi	r24, 0x30	; 48
 a1e:	69 f4       	brne	.+26     	; 0xa3a <__DATA_REGION_LENGTH__+0x3a>
 a20:	23 2d       	mov	r18, r3
 a22:	21 60       	ori	r18, 0x01	; 1
 a24:	16 c0       	rjmp	.+44     	; 0xa52 <__DATA_REGION_LENGTH__+0x52>
 a26:	83 2d       	mov	r24, r3
 a28:	82 60       	ori	r24, 0x02	; 2
 a2a:	38 2e       	mov	r3, r24
 a2c:	e3 2d       	mov	r30, r3
 a2e:	e4 60       	ori	r30, 0x04	; 4
 a30:	3e 2e       	mov	r3, r30
 a32:	2a c0       	rjmp	.+84     	; 0xa88 <__DATA_REGION_LENGTH__+0x88>
 a34:	f3 2d       	mov	r31, r3
 a36:	f8 60       	ori	r31, 0x08	; 8
 a38:	1d c0       	rjmp	.+58     	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
 a3a:	37 fc       	sbrc	r3, 7
 a3c:	2d c0       	rjmp	.+90     	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
 a3e:	20 ed       	ldi	r18, 0xD0	; 208
 a40:	28 0f       	add	r18, r24
 a42:	2a 30       	cpi	r18, 0x0A	; 10
 a44:	40 f0       	brcs	.+16     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
 a46:	8e 32       	cpi	r24, 0x2E	; 46
 a48:	b9 f4       	brne	.+46     	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a4a:	36 fc       	sbrc	r3, 6
 a4c:	81 c1       	rjmp	.+770    	; 0xd50 <__stack+0x251>
 a4e:	23 2d       	mov	r18, r3
 a50:	20 64       	ori	r18, 0x40	; 64
 a52:	32 2e       	mov	r3, r18
 a54:	19 c0       	rjmp	.+50     	; 0xa88 <__DATA_REGION_LENGTH__+0x88>
 a56:	36 fe       	sbrs	r3, 6
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <__DATA_REGION_LENGTH__+0x66>
 a5a:	8a e0       	ldi	r24, 0x0A	; 10
 a5c:	98 9e       	mul	r9, r24
 a5e:	20 0d       	add	r18, r0
 a60:	11 24       	eor	r1, r1
 a62:	92 2e       	mov	r9, r18
 a64:	11 c0       	rjmp	.+34     	; 0xa88 <__DATA_REGION_LENGTH__+0x88>
 a66:	ea e0       	ldi	r30, 0x0A	; 10
 a68:	2e 9e       	mul	r2, r30
 a6a:	20 0d       	add	r18, r0
 a6c:	11 24       	eor	r1, r1
 a6e:	22 2e       	mov	r2, r18
 a70:	f3 2d       	mov	r31, r3
 a72:	f0 62       	ori	r31, 0x20	; 32
 a74:	3f 2e       	mov	r3, r31
 a76:	08 c0       	rjmp	.+16     	; 0xa88 <__DATA_REGION_LENGTH__+0x88>
 a78:	8c 36       	cpi	r24, 0x6C	; 108
 a7a:	21 f4       	brne	.+8      	; 0xa84 <__DATA_REGION_LENGTH__+0x84>
 a7c:	83 2d       	mov	r24, r3
 a7e:	80 68       	ori	r24, 0x80	; 128
 a80:	38 2e       	mov	r3, r24
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <__DATA_REGION_LENGTH__+0x88>
 a84:	88 36       	cpi	r24, 0x68	; 104
 a86:	41 f4       	brne	.+16     	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
 a88:	f7 01       	movw	r30, r14
 a8a:	93 fd       	sbrc	r25, 3
 a8c:	85 91       	lpm	r24, Z+
 a8e:	93 ff       	sbrs	r25, 3
 a90:	81 91       	ld	r24, Z+
 a92:	7f 01       	movw	r14, r30
 a94:	81 11       	cpse	r24, r1
 a96:	b3 cf       	rjmp	.-154    	; 0x9fe <vfprintf+0x5c>
 a98:	98 2f       	mov	r25, r24
 a9a:	9f 7d       	andi	r25, 0xDF	; 223
 a9c:	95 54       	subi	r25, 0x45	; 69
 a9e:	93 30       	cpi	r25, 0x03	; 3
 aa0:	28 f4       	brcc	.+10     	; 0xaac <__DATA_REGION_LENGTH__+0xac>
 aa2:	0c 5f       	subi	r16, 0xFC	; 252
 aa4:	1f 4f       	sbci	r17, 0xFF	; 255
 aa6:	9f e3       	ldi	r25, 0x3F	; 63
 aa8:	99 83       	std	Y+1, r25	; 0x01
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <__DATA_REGION_LENGTH__+0xc6>
 aac:	83 36       	cpi	r24, 0x63	; 99
 aae:	31 f0       	breq	.+12     	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
 ab0:	83 37       	cpi	r24, 0x73	; 115
 ab2:	71 f0       	breq	.+28     	; 0xad0 <__DATA_REGION_LENGTH__+0xd0>
 ab4:	83 35       	cpi	r24, 0x53	; 83
 ab6:	09 f0       	breq	.+2      	; 0xaba <__DATA_REGION_LENGTH__+0xba>
 ab8:	59 c0       	rjmp	.+178    	; 0xb6c <__stack+0x6d>
 aba:	21 c0       	rjmp	.+66     	; 0xafe <__DATA_REGION_LENGTH__+0xfe>
 abc:	f8 01       	movw	r30, r16
 abe:	80 81       	ld	r24, Z
 ac0:	89 83       	std	Y+1, r24	; 0x01
 ac2:	0e 5f       	subi	r16, 0xFE	; 254
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	88 24       	eor	r8, r8
 ac8:	83 94       	inc	r8
 aca:	91 2c       	mov	r9, r1
 acc:	53 01       	movw	r10, r6
 ace:	13 c0       	rjmp	.+38     	; 0xaf6 <__DATA_REGION_LENGTH__+0xf6>
 ad0:	28 01       	movw	r4, r16
 ad2:	f2 e0       	ldi	r31, 0x02	; 2
 ad4:	4f 0e       	add	r4, r31
 ad6:	51 1c       	adc	r5, r1
 ad8:	f8 01       	movw	r30, r16
 ada:	a0 80       	ld	r10, Z
 adc:	b1 80       	ldd	r11, Z+1	; 0x01
 ade:	36 fe       	sbrs	r3, 6
 ae0:	03 c0       	rjmp	.+6      	; 0xae8 <__DATA_REGION_LENGTH__+0xe8>
 ae2:	69 2d       	mov	r22, r9
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <__DATA_REGION_LENGTH__+0xec>
 ae8:	6f ef       	ldi	r22, 0xFF	; 255
 aea:	7f ef       	ldi	r23, 0xFF	; 255
 aec:	c5 01       	movw	r24, r10
 aee:	0e 94 bd 06 	call	0xd7a	; 0xd7a <strnlen>
 af2:	4c 01       	movw	r8, r24
 af4:	82 01       	movw	r16, r4
 af6:	f3 2d       	mov	r31, r3
 af8:	ff 77       	andi	r31, 0x7F	; 127
 afa:	3f 2e       	mov	r3, r31
 afc:	16 c0       	rjmp	.+44     	; 0xb2a <__stack+0x2b>
 afe:	28 01       	movw	r4, r16
 b00:	22 e0       	ldi	r18, 0x02	; 2
 b02:	42 0e       	add	r4, r18
 b04:	51 1c       	adc	r5, r1
 b06:	f8 01       	movw	r30, r16
 b08:	a0 80       	ld	r10, Z
 b0a:	b1 80       	ldd	r11, Z+1	; 0x01
 b0c:	36 fe       	sbrs	r3, 6
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <__stack+0x17>
 b10:	69 2d       	mov	r22, r9
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x1b>
 b16:	6f ef       	ldi	r22, 0xFF	; 255
 b18:	7f ef       	ldi	r23, 0xFF	; 255
 b1a:	c5 01       	movw	r24, r10
 b1c:	0e 94 b2 06 	call	0xd64	; 0xd64 <strnlen_P>
 b20:	4c 01       	movw	r8, r24
 b22:	f3 2d       	mov	r31, r3
 b24:	f0 68       	ori	r31, 0x80	; 128
 b26:	3f 2e       	mov	r3, r31
 b28:	82 01       	movw	r16, r4
 b2a:	33 fc       	sbrc	r3, 3
 b2c:	1b c0       	rjmp	.+54     	; 0xb64 <__stack+0x65>
 b2e:	82 2d       	mov	r24, r2
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	88 16       	cp	r8, r24
 b34:	99 06       	cpc	r9, r25
 b36:	b0 f4       	brcc	.+44     	; 0xb64 <__stack+0x65>
 b38:	b6 01       	movw	r22, r12
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 b42:	2a 94       	dec	r2
 b44:	f4 cf       	rjmp	.-24     	; 0xb2e <__stack+0x2f>
 b46:	f5 01       	movw	r30, r10
 b48:	37 fc       	sbrc	r3, 7
 b4a:	85 91       	lpm	r24, Z+
 b4c:	37 fe       	sbrs	r3, 7
 b4e:	81 91       	ld	r24, Z+
 b50:	5f 01       	movw	r10, r30
 b52:	b6 01       	movw	r22, r12
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 b5a:	21 10       	cpse	r2, r1
 b5c:	2a 94       	dec	r2
 b5e:	21 e0       	ldi	r18, 0x01	; 1
 b60:	82 1a       	sub	r8, r18
 b62:	91 08       	sbc	r9, r1
 b64:	81 14       	cp	r8, r1
 b66:	91 04       	cpc	r9, r1
 b68:	71 f7       	brne	.-36     	; 0xb46 <__stack+0x47>
 b6a:	e8 c0       	rjmp	.+464    	; 0xd3c <__stack+0x23d>
 b6c:	84 36       	cpi	r24, 0x64	; 100
 b6e:	11 f0       	breq	.+4      	; 0xb74 <__stack+0x75>
 b70:	89 36       	cpi	r24, 0x69	; 105
 b72:	41 f5       	brne	.+80     	; 0xbc4 <__stack+0xc5>
 b74:	f8 01       	movw	r30, r16
 b76:	37 fe       	sbrs	r3, 7
 b78:	07 c0       	rjmp	.+14     	; 0xb88 <__stack+0x89>
 b7a:	60 81       	ld	r22, Z
 b7c:	71 81       	ldd	r23, Z+1	; 0x01
 b7e:	82 81       	ldd	r24, Z+2	; 0x02
 b80:	93 81       	ldd	r25, Z+3	; 0x03
 b82:	0c 5f       	subi	r16, 0xFC	; 252
 b84:	1f 4f       	sbci	r17, 0xFF	; 255
 b86:	08 c0       	rjmp	.+16     	; 0xb98 <__stack+0x99>
 b88:	60 81       	ld	r22, Z
 b8a:	71 81       	ldd	r23, Z+1	; 0x01
 b8c:	07 2e       	mov	r0, r23
 b8e:	00 0c       	add	r0, r0
 b90:	88 0b       	sbc	r24, r24
 b92:	99 0b       	sbc	r25, r25
 b94:	0e 5f       	subi	r16, 0xFE	; 254
 b96:	1f 4f       	sbci	r17, 0xFF	; 255
 b98:	f3 2d       	mov	r31, r3
 b9a:	ff 76       	andi	r31, 0x6F	; 111
 b9c:	3f 2e       	mov	r3, r31
 b9e:	97 ff       	sbrs	r25, 7
 ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <__stack+0xb5>
 ba2:	90 95       	com	r25
 ba4:	80 95       	com	r24
 ba6:	70 95       	com	r23
 ba8:	61 95       	neg	r22
 baa:	7f 4f       	sbci	r23, 0xFF	; 255
 bac:	8f 4f       	sbci	r24, 0xFF	; 255
 bae:	9f 4f       	sbci	r25, 0xFF	; 255
 bb0:	f0 68       	ori	r31, 0x80	; 128
 bb2:	3f 2e       	mov	r3, r31
 bb4:	2a e0       	ldi	r18, 0x0A	; 10
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	a3 01       	movw	r20, r6
 bba:	0e 94 04 07 	call	0xe08	; 0xe08 <__ultoa_invert>
 bbe:	88 2e       	mov	r8, r24
 bc0:	86 18       	sub	r8, r6
 bc2:	45 c0       	rjmp	.+138    	; 0xc4e <__stack+0x14f>
 bc4:	85 37       	cpi	r24, 0x75	; 117
 bc6:	31 f4       	brne	.+12     	; 0xbd4 <__stack+0xd5>
 bc8:	23 2d       	mov	r18, r3
 bca:	2f 7e       	andi	r18, 0xEF	; 239
 bcc:	b2 2e       	mov	r11, r18
 bce:	2a e0       	ldi	r18, 0x0A	; 10
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	25 c0       	rjmp	.+74     	; 0xc1e <__stack+0x11f>
 bd4:	93 2d       	mov	r25, r3
 bd6:	99 7f       	andi	r25, 0xF9	; 249
 bd8:	b9 2e       	mov	r11, r25
 bda:	8f 36       	cpi	r24, 0x6F	; 111
 bdc:	c1 f0       	breq	.+48     	; 0xc0e <__stack+0x10f>
 bde:	18 f4       	brcc	.+6      	; 0xbe6 <__stack+0xe7>
 be0:	88 35       	cpi	r24, 0x58	; 88
 be2:	79 f0       	breq	.+30     	; 0xc02 <__stack+0x103>
 be4:	b5 c0       	rjmp	.+362    	; 0xd50 <__stack+0x251>
 be6:	80 37       	cpi	r24, 0x70	; 112
 be8:	19 f0       	breq	.+6      	; 0xbf0 <__stack+0xf1>
 bea:	88 37       	cpi	r24, 0x78	; 120
 bec:	21 f0       	breq	.+8      	; 0xbf6 <__stack+0xf7>
 bee:	b0 c0       	rjmp	.+352    	; 0xd50 <__stack+0x251>
 bf0:	e9 2f       	mov	r30, r25
 bf2:	e0 61       	ori	r30, 0x10	; 16
 bf4:	be 2e       	mov	r11, r30
 bf6:	b4 fe       	sbrs	r11, 4
 bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__stack+0x115>
 bfa:	fb 2d       	mov	r31, r11
 bfc:	f4 60       	ori	r31, 0x04	; 4
 bfe:	bf 2e       	mov	r11, r31
 c00:	09 c0       	rjmp	.+18     	; 0xc14 <__stack+0x115>
 c02:	34 fe       	sbrs	r3, 4
 c04:	0a c0       	rjmp	.+20     	; 0xc1a <__stack+0x11b>
 c06:	29 2f       	mov	r18, r25
 c08:	26 60       	ori	r18, 0x06	; 6
 c0a:	b2 2e       	mov	r11, r18
 c0c:	06 c0       	rjmp	.+12     	; 0xc1a <__stack+0x11b>
 c0e:	28 e0       	ldi	r18, 0x08	; 8
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	05 c0       	rjmp	.+10     	; 0xc1e <__stack+0x11f>
 c14:	20 e1       	ldi	r18, 0x10	; 16
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <__stack+0x11f>
 c1a:	20 e1       	ldi	r18, 0x10	; 16
 c1c:	32 e0       	ldi	r19, 0x02	; 2
 c1e:	f8 01       	movw	r30, r16
 c20:	b7 fe       	sbrs	r11, 7
 c22:	07 c0       	rjmp	.+14     	; 0xc32 <__stack+0x133>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	82 81       	ldd	r24, Z+2	; 0x02
 c2a:	93 81       	ldd	r25, Z+3	; 0x03
 c2c:	0c 5f       	subi	r16, 0xFC	; 252
 c2e:	1f 4f       	sbci	r17, 0xFF	; 255
 c30:	06 c0       	rjmp	.+12     	; 0xc3e <__stack+0x13f>
 c32:	60 81       	ld	r22, Z
 c34:	71 81       	ldd	r23, Z+1	; 0x01
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e 5f       	subi	r16, 0xFE	; 254
 c3c:	1f 4f       	sbci	r17, 0xFF	; 255
 c3e:	a3 01       	movw	r20, r6
 c40:	0e 94 04 07 	call	0xe08	; 0xe08 <__ultoa_invert>
 c44:	88 2e       	mov	r8, r24
 c46:	86 18       	sub	r8, r6
 c48:	fb 2d       	mov	r31, r11
 c4a:	ff 77       	andi	r31, 0x7F	; 127
 c4c:	3f 2e       	mov	r3, r31
 c4e:	36 fe       	sbrs	r3, 6
 c50:	0d c0       	rjmp	.+26     	; 0xc6c <__stack+0x16d>
 c52:	23 2d       	mov	r18, r3
 c54:	2e 7f       	andi	r18, 0xFE	; 254
 c56:	a2 2e       	mov	r10, r18
 c58:	89 14       	cp	r8, r9
 c5a:	58 f4       	brcc	.+22     	; 0xc72 <__stack+0x173>
 c5c:	34 fe       	sbrs	r3, 4
 c5e:	0b c0       	rjmp	.+22     	; 0xc76 <__stack+0x177>
 c60:	32 fc       	sbrc	r3, 2
 c62:	09 c0       	rjmp	.+18     	; 0xc76 <__stack+0x177>
 c64:	83 2d       	mov	r24, r3
 c66:	8e 7e       	andi	r24, 0xEE	; 238
 c68:	a8 2e       	mov	r10, r24
 c6a:	05 c0       	rjmp	.+10     	; 0xc76 <__stack+0x177>
 c6c:	b8 2c       	mov	r11, r8
 c6e:	a3 2c       	mov	r10, r3
 c70:	03 c0       	rjmp	.+6      	; 0xc78 <__stack+0x179>
 c72:	b8 2c       	mov	r11, r8
 c74:	01 c0       	rjmp	.+2      	; 0xc78 <__stack+0x179>
 c76:	b9 2c       	mov	r11, r9
 c78:	a4 fe       	sbrs	r10, 4
 c7a:	0f c0       	rjmp	.+30     	; 0xc9a <__stack+0x19b>
 c7c:	fe 01       	movw	r30, r28
 c7e:	e8 0d       	add	r30, r8
 c80:	f1 1d       	adc	r31, r1
 c82:	80 81       	ld	r24, Z
 c84:	80 33       	cpi	r24, 0x30	; 48
 c86:	21 f4       	brne	.+8      	; 0xc90 <__stack+0x191>
 c88:	9a 2d       	mov	r25, r10
 c8a:	99 7e       	andi	r25, 0xE9	; 233
 c8c:	a9 2e       	mov	r10, r25
 c8e:	09 c0       	rjmp	.+18     	; 0xca2 <__stack+0x1a3>
 c90:	a2 fe       	sbrs	r10, 2
 c92:	06 c0       	rjmp	.+12     	; 0xca0 <__stack+0x1a1>
 c94:	b3 94       	inc	r11
 c96:	b3 94       	inc	r11
 c98:	04 c0       	rjmp	.+8      	; 0xca2 <__stack+0x1a3>
 c9a:	8a 2d       	mov	r24, r10
 c9c:	86 78       	andi	r24, 0x86	; 134
 c9e:	09 f0       	breq	.+2      	; 0xca2 <__stack+0x1a3>
 ca0:	b3 94       	inc	r11
 ca2:	a3 fc       	sbrc	r10, 3
 ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <__stack+0x1c9>
 ca6:	a0 fe       	sbrs	r10, 0
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <__stack+0x1b7>
 caa:	b2 14       	cp	r11, r2
 cac:	88 f4       	brcc	.+34     	; 0xcd0 <__stack+0x1d1>
 cae:	28 0c       	add	r2, r8
 cb0:	92 2c       	mov	r9, r2
 cb2:	9b 18       	sub	r9, r11
 cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <__stack+0x1d3>
 cb6:	b2 14       	cp	r11, r2
 cb8:	60 f4       	brcc	.+24     	; 0xcd2 <__stack+0x1d3>
 cba:	b6 01       	movw	r22, r12
 cbc:	80 e2       	ldi	r24, 0x20	; 32
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 cc4:	b3 94       	inc	r11
 cc6:	f7 cf       	rjmp	.-18     	; 0xcb6 <__stack+0x1b7>
 cc8:	b2 14       	cp	r11, r2
 cca:	18 f4       	brcc	.+6      	; 0xcd2 <__stack+0x1d3>
 ccc:	2b 18       	sub	r2, r11
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <__stack+0x1d5>
 cd0:	98 2c       	mov	r9, r8
 cd2:	21 2c       	mov	r2, r1
 cd4:	a4 fe       	sbrs	r10, 4
 cd6:	10 c0       	rjmp	.+32     	; 0xcf8 <__stack+0x1f9>
 cd8:	b6 01       	movw	r22, r12
 cda:	80 e3       	ldi	r24, 0x30	; 48
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 ce2:	a2 fe       	sbrs	r10, 2
 ce4:	17 c0       	rjmp	.+46     	; 0xd14 <__stack+0x215>
 ce6:	a1 fc       	sbrc	r10, 1
 ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <__stack+0x1f1>
 cea:	88 e7       	ldi	r24, 0x78	; 120
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <__stack+0x1f5>
 cf0:	88 e5       	ldi	r24, 0x58	; 88
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	b6 01       	movw	r22, r12
 cf6:	0c c0       	rjmp	.+24     	; 0xd10 <__stack+0x211>
 cf8:	8a 2d       	mov	r24, r10
 cfa:	86 78       	andi	r24, 0x86	; 134
 cfc:	59 f0       	breq	.+22     	; 0xd14 <__stack+0x215>
 cfe:	a1 fe       	sbrs	r10, 1
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <__stack+0x207>
 d02:	8b e2       	ldi	r24, 0x2B	; 43
 d04:	01 c0       	rjmp	.+2      	; 0xd08 <__stack+0x209>
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	a7 fc       	sbrc	r10, 7
 d0a:	8d e2       	ldi	r24, 0x2D	; 45
 d0c:	b6 01       	movw	r22, r12
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 d14:	89 14       	cp	r8, r9
 d16:	38 f4       	brcc	.+14     	; 0xd26 <__stack+0x227>
 d18:	b6 01       	movw	r22, r12
 d1a:	80 e3       	ldi	r24, 0x30	; 48
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 d22:	9a 94       	dec	r9
 d24:	f7 cf       	rjmp	.-18     	; 0xd14 <__stack+0x215>
 d26:	8a 94       	dec	r8
 d28:	f3 01       	movw	r30, r6
 d2a:	e8 0d       	add	r30, r8
 d2c:	f1 1d       	adc	r31, r1
 d2e:	80 81       	ld	r24, Z
 d30:	b6 01       	movw	r22, r12
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 d38:	81 10       	cpse	r8, r1
 d3a:	f5 cf       	rjmp	.-22     	; 0xd26 <__stack+0x227>
 d3c:	22 20       	and	r2, r2
 d3e:	09 f4       	brne	.+2      	; 0xd42 <__stack+0x243>
 d40:	42 ce       	rjmp	.-892    	; 0x9c6 <vfprintf+0x24>
 d42:	b6 01       	movw	r22, r12
 d44:	80 e2       	ldi	r24, 0x20	; 32
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	0e 94 c8 06 	call	0xd90	; 0xd90 <fputc>
 d4c:	2a 94       	dec	r2
 d4e:	f6 cf       	rjmp	.-20     	; 0xd3c <__stack+0x23d>
 d50:	f6 01       	movw	r30, r12
 d52:	86 81       	ldd	r24, Z+6	; 0x06
 d54:	97 81       	ldd	r25, Z+7	; 0x07
 d56:	02 c0       	rjmp	.+4      	; 0xd5c <__stack+0x25d>
 d58:	8f ef       	ldi	r24, 0xFF	; 255
 d5a:	9f ef       	ldi	r25, 0xFF	; 255
 d5c:	2b 96       	adiw	r28, 0x0b	; 11
 d5e:	e2 e1       	ldi	r30, 0x12	; 18
 d60:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__epilogue_restores__>

00000d64 <strnlen_P>:
 d64:	fc 01       	movw	r30, r24
 d66:	05 90       	lpm	r0, Z+
 d68:	61 50       	subi	r22, 0x01	; 1
 d6a:	70 40       	sbci	r23, 0x00	; 0
 d6c:	01 10       	cpse	r0, r1
 d6e:	d8 f7       	brcc	.-10     	; 0xd66 <strnlen_P+0x2>
 d70:	80 95       	com	r24
 d72:	90 95       	com	r25
 d74:	8e 0f       	add	r24, r30
 d76:	9f 1f       	adc	r25, r31
 d78:	08 95       	ret

00000d7a <strnlen>:
 d7a:	fc 01       	movw	r30, r24
 d7c:	61 50       	subi	r22, 0x01	; 1
 d7e:	70 40       	sbci	r23, 0x00	; 0
 d80:	01 90       	ld	r0, Z+
 d82:	01 10       	cpse	r0, r1
 d84:	d8 f7       	brcc	.-10     	; 0xd7c <strnlen+0x2>
 d86:	80 95       	com	r24
 d88:	90 95       	com	r25
 d8a:	8e 0f       	add	r24, r30
 d8c:	9f 1f       	adc	r25, r31
 d8e:	08 95       	ret

00000d90 <fputc>:
 d90:	0f 93       	push	r16
 d92:	1f 93       	push	r17
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	fb 01       	movw	r30, r22
 d9a:	23 81       	ldd	r18, Z+3	; 0x03
 d9c:	21 fd       	sbrc	r18, 1
 d9e:	03 c0       	rjmp	.+6      	; 0xda6 <fputc+0x16>
 da0:	8f ef       	ldi	r24, 0xFF	; 255
 da2:	9f ef       	ldi	r25, 0xFF	; 255
 da4:	2c c0       	rjmp	.+88     	; 0xdfe <fputc+0x6e>
 da6:	22 ff       	sbrs	r18, 2
 da8:	16 c0       	rjmp	.+44     	; 0xdd6 <fputc+0x46>
 daa:	46 81       	ldd	r20, Z+6	; 0x06
 dac:	57 81       	ldd	r21, Z+7	; 0x07
 dae:	24 81       	ldd	r18, Z+4	; 0x04
 db0:	35 81       	ldd	r19, Z+5	; 0x05
 db2:	42 17       	cp	r20, r18
 db4:	53 07       	cpc	r21, r19
 db6:	44 f4       	brge	.+16     	; 0xdc8 <fputc+0x38>
 db8:	a0 81       	ld	r26, Z
 dba:	b1 81       	ldd	r27, Z+1	; 0x01
 dbc:	9d 01       	movw	r18, r26
 dbe:	2f 5f       	subi	r18, 0xFF	; 255
 dc0:	3f 4f       	sbci	r19, 0xFF	; 255
 dc2:	31 83       	std	Z+1, r19	; 0x01
 dc4:	20 83       	st	Z, r18
 dc6:	8c 93       	st	X, r24
 dc8:	26 81       	ldd	r18, Z+6	; 0x06
 dca:	37 81       	ldd	r19, Z+7	; 0x07
 dcc:	2f 5f       	subi	r18, 0xFF	; 255
 dce:	3f 4f       	sbci	r19, 0xFF	; 255
 dd0:	37 83       	std	Z+7, r19	; 0x07
 dd2:	26 83       	std	Z+6, r18	; 0x06
 dd4:	14 c0       	rjmp	.+40     	; 0xdfe <fputc+0x6e>
 dd6:	8b 01       	movw	r16, r22
 dd8:	ec 01       	movw	r28, r24
 dda:	fb 01       	movw	r30, r22
 ddc:	00 84       	ldd	r0, Z+8	; 0x08
 dde:	f1 85       	ldd	r31, Z+9	; 0x09
 de0:	e0 2d       	mov	r30, r0
 de2:	09 95       	icall
 de4:	89 2b       	or	r24, r25
 de6:	e1 f6       	brne	.-72     	; 0xda0 <fputc+0x10>
 de8:	d8 01       	movw	r26, r16
 dea:	16 96       	adiw	r26, 0x06	; 6
 dec:	8d 91       	ld	r24, X+
 dee:	9c 91       	ld	r25, X
 df0:	17 97       	sbiw	r26, 0x07	; 7
 df2:	01 96       	adiw	r24, 0x01	; 1
 df4:	17 96       	adiw	r26, 0x07	; 7
 df6:	9c 93       	st	X, r25
 df8:	8e 93       	st	-X, r24
 dfa:	16 97       	sbiw	r26, 0x06	; 6
 dfc:	ce 01       	movw	r24, r28
 dfe:	df 91       	pop	r29
 e00:	cf 91       	pop	r28
 e02:	1f 91       	pop	r17
 e04:	0f 91       	pop	r16
 e06:	08 95       	ret

00000e08 <__ultoa_invert>:
 e08:	fa 01       	movw	r30, r20
 e0a:	aa 27       	eor	r26, r26
 e0c:	28 30       	cpi	r18, 0x08	; 8
 e0e:	51 f1       	breq	.+84     	; 0xe64 <__ultoa_invert+0x5c>
 e10:	20 31       	cpi	r18, 0x10	; 16
 e12:	81 f1       	breq	.+96     	; 0xe74 <__ultoa_invert+0x6c>
 e14:	e8 94       	clt
 e16:	6f 93       	push	r22
 e18:	6e 7f       	andi	r22, 0xFE	; 254
 e1a:	6e 5f       	subi	r22, 0xFE	; 254
 e1c:	7f 4f       	sbci	r23, 0xFF	; 255
 e1e:	8f 4f       	sbci	r24, 0xFF	; 255
 e20:	9f 4f       	sbci	r25, 0xFF	; 255
 e22:	af 4f       	sbci	r26, 0xFF	; 255
 e24:	b1 e0       	ldi	r27, 0x01	; 1
 e26:	3e d0       	rcall	.+124    	; 0xea4 <__ultoa_invert+0x9c>
 e28:	b4 e0       	ldi	r27, 0x04	; 4
 e2a:	3c d0       	rcall	.+120    	; 0xea4 <__ultoa_invert+0x9c>
 e2c:	67 0f       	add	r22, r23
 e2e:	78 1f       	adc	r23, r24
 e30:	89 1f       	adc	r24, r25
 e32:	9a 1f       	adc	r25, r26
 e34:	a1 1d       	adc	r26, r1
 e36:	68 0f       	add	r22, r24
 e38:	79 1f       	adc	r23, r25
 e3a:	8a 1f       	adc	r24, r26
 e3c:	91 1d       	adc	r25, r1
 e3e:	a1 1d       	adc	r26, r1
 e40:	6a 0f       	add	r22, r26
 e42:	71 1d       	adc	r23, r1
 e44:	81 1d       	adc	r24, r1
 e46:	91 1d       	adc	r25, r1
 e48:	a1 1d       	adc	r26, r1
 e4a:	20 d0       	rcall	.+64     	; 0xe8c <__ultoa_invert+0x84>
 e4c:	09 f4       	brne	.+2      	; 0xe50 <__ultoa_invert+0x48>
 e4e:	68 94       	set
 e50:	3f 91       	pop	r19
 e52:	2a e0       	ldi	r18, 0x0A	; 10
 e54:	26 9f       	mul	r18, r22
 e56:	11 24       	eor	r1, r1
 e58:	30 19       	sub	r19, r0
 e5a:	30 5d       	subi	r19, 0xD0	; 208
 e5c:	31 93       	st	Z+, r19
 e5e:	de f6       	brtc	.-74     	; 0xe16 <__ultoa_invert+0xe>
 e60:	cf 01       	movw	r24, r30
 e62:	08 95       	ret
 e64:	46 2f       	mov	r20, r22
 e66:	47 70       	andi	r20, 0x07	; 7
 e68:	40 5d       	subi	r20, 0xD0	; 208
 e6a:	41 93       	st	Z+, r20
 e6c:	b3 e0       	ldi	r27, 0x03	; 3
 e6e:	0f d0       	rcall	.+30     	; 0xe8e <__ultoa_invert+0x86>
 e70:	c9 f7       	brne	.-14     	; 0xe64 <__ultoa_invert+0x5c>
 e72:	f6 cf       	rjmp	.-20     	; 0xe60 <__ultoa_invert+0x58>
 e74:	46 2f       	mov	r20, r22
 e76:	4f 70       	andi	r20, 0x0F	; 15
 e78:	40 5d       	subi	r20, 0xD0	; 208
 e7a:	4a 33       	cpi	r20, 0x3A	; 58
 e7c:	18 f0       	brcs	.+6      	; 0xe84 <__ultoa_invert+0x7c>
 e7e:	49 5d       	subi	r20, 0xD9	; 217
 e80:	31 fd       	sbrc	r19, 1
 e82:	40 52       	subi	r20, 0x20	; 32
 e84:	41 93       	st	Z+, r20
 e86:	02 d0       	rcall	.+4      	; 0xe8c <__ultoa_invert+0x84>
 e88:	a9 f7       	brne	.-22     	; 0xe74 <__ultoa_invert+0x6c>
 e8a:	ea cf       	rjmp	.-44     	; 0xe60 <__ultoa_invert+0x58>
 e8c:	b4 e0       	ldi	r27, 0x04	; 4
 e8e:	a6 95       	lsr	r26
 e90:	97 95       	ror	r25
 e92:	87 95       	ror	r24
 e94:	77 95       	ror	r23
 e96:	67 95       	ror	r22
 e98:	ba 95       	dec	r27
 e9a:	c9 f7       	brne	.-14     	; 0xe8e <__ultoa_invert+0x86>
 e9c:	00 97       	sbiw	r24, 0x00	; 0
 e9e:	61 05       	cpc	r22, r1
 ea0:	71 05       	cpc	r23, r1
 ea2:	08 95       	ret
 ea4:	9b 01       	movw	r18, r22
 ea6:	ac 01       	movw	r20, r24
 ea8:	0a 2e       	mov	r0, r26
 eaa:	06 94       	lsr	r0
 eac:	57 95       	ror	r21
 eae:	47 95       	ror	r20
 eb0:	37 95       	ror	r19
 eb2:	27 95       	ror	r18
 eb4:	ba 95       	dec	r27
 eb6:	c9 f7       	brne	.-14     	; 0xeaa <__ultoa_invert+0xa2>
 eb8:	62 0f       	add	r22, r18
 eba:	73 1f       	adc	r23, r19
 ebc:	84 1f       	adc	r24, r20
 ebe:	95 1f       	adc	r25, r21
 ec0:	a0 1d       	adc	r26, r0
 ec2:	08 95       	ret

00000ec4 <__prologue_saves__>:
 ec4:	2f 92       	push	r2
 ec6:	3f 92       	push	r3
 ec8:	4f 92       	push	r4
 eca:	5f 92       	push	r5
 ecc:	6f 92       	push	r6
 ece:	7f 92       	push	r7
 ed0:	8f 92       	push	r8
 ed2:	9f 92       	push	r9
 ed4:	af 92       	push	r10
 ed6:	bf 92       	push	r11
 ed8:	cf 92       	push	r12
 eda:	df 92       	push	r13
 edc:	ef 92       	push	r14
 ede:	ff 92       	push	r15
 ee0:	0f 93       	push	r16
 ee2:	1f 93       	push	r17
 ee4:	cf 93       	push	r28
 ee6:	df 93       	push	r29
 ee8:	cd b7       	in	r28, 0x3d	; 61
 eea:	de b7       	in	r29, 0x3e	; 62
 eec:	ca 1b       	sub	r28, r26
 eee:	db 0b       	sbc	r29, r27
 ef0:	0f b6       	in	r0, 0x3f	; 63
 ef2:	f8 94       	cli
 ef4:	de bf       	out	0x3e, r29	; 62
 ef6:	0f be       	out	0x3f, r0	; 63
 ef8:	cd bf       	out	0x3d, r28	; 61
 efa:	09 94       	ijmp

00000efc <__epilogue_restores__>:
 efc:	2a 88       	ldd	r2, Y+18	; 0x12
 efe:	39 88       	ldd	r3, Y+17	; 0x11
 f00:	48 88       	ldd	r4, Y+16	; 0x10
 f02:	5f 84       	ldd	r5, Y+15	; 0x0f
 f04:	6e 84       	ldd	r6, Y+14	; 0x0e
 f06:	7d 84       	ldd	r7, Y+13	; 0x0d
 f08:	8c 84       	ldd	r8, Y+12	; 0x0c
 f0a:	9b 84       	ldd	r9, Y+11	; 0x0b
 f0c:	aa 84       	ldd	r10, Y+10	; 0x0a
 f0e:	b9 84       	ldd	r11, Y+9	; 0x09
 f10:	c8 84       	ldd	r12, Y+8	; 0x08
 f12:	df 80       	ldd	r13, Y+7	; 0x07
 f14:	ee 80       	ldd	r14, Y+6	; 0x06
 f16:	fd 80       	ldd	r15, Y+5	; 0x05
 f18:	0c 81       	ldd	r16, Y+4	; 0x04
 f1a:	1b 81       	ldd	r17, Y+3	; 0x03
 f1c:	aa 81       	ldd	r26, Y+2	; 0x02
 f1e:	b9 81       	ldd	r27, Y+1	; 0x01
 f20:	ce 0f       	add	r28, r30
 f22:	d1 1d       	adc	r29, r1
 f24:	0f b6       	in	r0, 0x3f	; 63
 f26:	f8 94       	cli
 f28:	de bf       	out	0x3e, r29	; 62
 f2a:	0f be       	out	0x3f, r0	; 63
 f2c:	cd bf       	out	0x3d, r28	; 61
 f2e:	ed 01       	movw	r28, r26
 f30:	08 95       	ret

00000f32 <_exit>:
 f32:	f8 94       	cli

00000f34 <__stop_program>:
 f34:	ff cf       	rjmp	.-2      	; 0xf34 <__stop_program>
