
lampeDimmer_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000f7a  0000100e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  00800108  00800108  00001016  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001235  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0b  00000000  00000000  000023c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bb  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00003790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000770  00000000  00000000  000039a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ef  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_25>
  68:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_26>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a7 3b       	cpi	r26, 0xB7	; 183
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 b0 01 	call	0x360	; 0x360 <main>
  e2:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
	//ADCSRA = ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	//ADCSRB = ADHSM ACME MUX5 – ADTS3 ADTS2 ADTS1 ADTS0
	//DIDR0 = ADC7D ADC6D ADC5D ADC4D - - ADC1D ADC0D
	//DIDR2 = - - ADC13D ADC12D ADC11D ADC10D ADC9D ADC8D
	
	ADMUX = (1<<REFS0); //Référence sur AVcc avec un condensateur sur la broche AREF.
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enable / ADC diviseur = 128 (le plus lent possible).
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = (1<<ADHSM);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = (1<<ADC0D); //entrée numérique désactivée pour le ADC0.
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 102:	08 95       	ret

00000104 <adcRead>:
}

uint16_t adcRead(void)
{
	ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //On attend que la lecture du ADC soir terminée.
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <adcRead+0xa>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 11c:	08 95       	ret

0000011e <adcRead8>:

uint8_t adcRead8(void)
{
	return (adcRead() >> 2);
 11e:	0e 94 82 00 	call	0x104	; 0x104 <adcRead>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	08 95       	ret

0000012c <__vector_21>:

/**
*@brief Interruption de la comparaison sur OCR0A (timer0) qui met msFlag à 1 lorsque msCnt atteint TIMER_CNT_CYCLE qui est définie dans le define. msCnt est incrémenté à chaques 1ms.
*/
ISR(TIMER0_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	msCntAdc++;
 13a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <msCntAdc>
 13e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <msCntAdc+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <msCntAdc+0x1>
 148:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msCntAdc>
	msCntFade++;
 14c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msCntFade>
 150:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msCntFade+0x1>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <msCntFade+0x1>
 15a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <msCntFade>
	if (msCntAdc >= TIMER_CNT_CYCLE_ADC)
 15e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <msCntAdc>
 162:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <msCntAdc+0x1>
 166:	49 97       	sbiw	r24, 0x19	; 25
 168:	60 f0       	brcs	.+24     	; 0x182 <__vector_21+0x56>
	{
		msCntAdc -= TIMER_CNT_CYCLE_ADC;
 16a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <msCntAdc>
 16e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <msCntAdc+0x1>
 172:	49 97       	sbiw	r24, 0x19	; 25
 174:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <msCntAdc+0x1>
 178:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msCntAdc>
		msFlagAdc = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <msFlagAdc>
	}
	if (msCntFade >= TIMER_CNT_CYCLE_FADE)
 182:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msCntFade>
 186:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msCntFade+0x1>
 18a:	c2 97       	sbiw	r24, 0x32	; 50
 18c:	60 f0       	brcs	.+24     	; 0x1a6 <__vector_21+0x7a>
	{
		msCntFade -= TIMER_CNT_CYCLE_FADE;
 18e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msCntFade>
 192:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msCntFade+0x1>
 196:	c2 97       	sbiw	r24, 0x32	; 50
 198:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <msCntFade+0x1>
 19c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <msCntFade>
		msFlagFade = 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <msFlagFade>
	}
}
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <execRxCommand>:

void execRxCommand()
{
	switch (rxCommande)
 1b4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rxCommande>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	39 f0       	breq	.+14     	; 0x1ca <execRxCommand+0x16>
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <execRxCommand+0x10>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	71 f0       	breq	.+28     	; 0x1de <execRxCommand+0x2a>
 1c2:	08 95       	ret
	{
		case GET_ETAT: //État non utilisé
			txCommande = 0;
 1c4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <txCommande>
			break;
 1c8:	08 95       	ret
		case SET_VAL: //Réception depuis l'interface de la valeur de la sortie.
			if (SWITCH()) //Si l'interrupteur du potentiomètre est à la position "ON"...
 1ca:	1b 99       	sbic	0x03, 3	; 3
 1cc:	0c c0       	rjmp	.+24     	; 0x1e6 <execRxCommand+0x32>
				valueOut = rxData[0];
 1ce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <rxData>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 1d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
 1dc:	08 95       	ret
			break;
		case SET_SLEEP_MODE:
				veilleMode = rxData[0];
 1de:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <rxData>
 1e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <veilleMode>
 1e6:	08 95       	ret

000001e8 <outputVeille>:
	SWITCH_INIT();
}

void outputVeille(uint8_t value)
{
	switch (value)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	59 f0       	breq	.+22     	; 0x202 <outputVeille+0x1a>
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <outputVeille+0x10>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	79 f0       	breq	.+30     	; 0x210 <outputVeille+0x28>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	a1 f1       	breq	.+104    	; 0x25e <outputVeille+0x76>
 1f6:	08 95       	ret
	{
		case 0:
			valueOut = 0;
 1f8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <valueOut+0x1>
 1fc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <valueOut>
			break;
 200:	08 95       	ret
		case 1:
			valueOut = 255;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 20a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
			break;
 20e:	08 95       	ret
		case 2:
			if (valueOut <= 1) //Lorsque oc4aValue à atteint son minimum.
 210:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <valueOut>
 214:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <valueOut+0x1>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	91 05       	cpc	r25, r1
 21c:	30 f4       	brcc	.+12     	; 0x22a <outputVeille+0x42>
			{
				increment = INCREMENT_STEP;
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 226:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			if (valueOut >= 255) //Lorsque oc4aValue à atteint son maximum.
 22a:	8f 3f       	cpi	r24, 0xFF	; 255
 22c:	91 05       	cpc	r25, r1
 22e:	30 f0       	brcs	.+12     	; 0x23c <outputVeille+0x54>
			{
				increment = -INCREMENT_STEP;
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	3f ef       	ldi	r19, 0xFF	; 255
 234:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			if (msFlagFade)
 23c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <msFlagFade>
 240:	22 23       	and	r18, r18
 242:	99 f0       	breq	.+38     	; 0x26a <outputVeille+0x82>
			{
				msFlagFade = 0;
 244:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <msFlagFade>
				valueOut += increment;
 248:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 250:	82 0f       	add	r24, r18
 252:	93 1f       	adc	r25, r19
 254:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 258:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
 25c:	08 95       	ret
			}
			break;
		case 3:
			valueOut = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 266:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
 26a:	08 95       	ret

0000026c <parseRxData>:
* @param data la donnée à traiter
*/
void parseRxData(uint8_t data)
{
	//switch case des différents paramètres de la trame de réception
	switch (rxState)
 26c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <rxState>
 270:	92 30       	cpi	r25, 0x02	; 2
 272:	e1 f0       	breq	.+56     	; 0x2ac <parseRxData+0x40>
 274:	18 f4       	brcc	.+6      	; 0x27c <parseRxData+0x10>
 276:	91 30       	cpi	r25, 0x01	; 1
 278:	71 f0       	breq	.+28     	; 0x296 <parseRxData+0x2a>
 27a:	04 c0       	rjmp	.+8      	; 0x284 <parseRxData+0x18>
 27c:	93 30       	cpi	r25, 0x03	; 3
 27e:	21 f1       	breq	.+72     	; 0x2c8 <parseRxData+0x5c>
 280:	94 30       	cpi	r25, 0x04	; 4
 282:	a1 f1       	breq	.+104    	; 0x2ec <parseRxData+0x80>
	{
		//confirmation que la trame débute par '<'
		default :
			if(data == '<')
 284:	8c 33       	cpi	r24, 0x3C	; 60
 286:	09 f0       	breq	.+2      	; 0x28a <parseRxData+0x1e>
 288:	41 c0       	rjmp	.+130    	; 0x30c <parseRxData+0xa0>
			{
				rxState = RXSIZE;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
				rxDataCnt = 0;
 290:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rxDataCnt>
 294:	08 95       	ret
			}
			break;
		//////////////////////////////////////////////////////////////////////////
		case RXSIZE:
			rxDataSize = data;
 296:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rxDataSize>
			if(rxDataSize >= _MAX_RXDATASIZE_)
 29a:	80 31       	cpi	r24, 0x10	; 16
 29c:	18 f0       	brcs	.+6      	; 0x2a4 <parseRxData+0x38>
				rxState = WAIT;
 29e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rxState>
 2a2:	08 95       	ret
			else
				rxState = RXCOMMANDE;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 2aa:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//Traitement de la commande.
		case RXCOMMANDE:
			rxCommande = data;
 2ac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rxCommande>
			if(rxDataSize)
 2b0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rxDataSize>
 2b4:	88 23       	and	r24, r24
 2b6:	21 f0       	breq	.+8      	; 0x2c0 <parseRxData+0x54>
				rxState = RXDATA;
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 2be:	08 95       	ret
			else
				rxState = VALIDATE;
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 2c6:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//Traitement de la donnée.
		case RXDATA:
			rxData[rxDataCnt++] = data;
 2c8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <rxDataCnt>
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	9e 0f       	add	r25, r30
 2d0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <rxDataCnt>
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	e1 5e       	subi	r30, 0xE1	; 225
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	80 83       	st	Z, r24
			if(rxDataCnt == rxDataSize)
 2dc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rxDataSize>
 2e0:	98 13       	cpse	r25, r24
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <parseRxData+0xa0>
				rxState = VALIDATE;
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rxState>
 2ea:	08 95       	ret
			break;
		//////////////////////////////////////////////////////////////////////////
		//confirmation que la trame se termine par '>'
		case VALIDATE :
			rxState = WAIT;
 2ec:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rxState>
			if(data == '>')
 2f0:	8e 33       	cpi	r24, 0x3E	; 62
 2f2:	19 f4       	brne	.+6      	; 0x2fa <parseRxData+0x8e>
				execRxCommand();//si oui la fonction execRxCommand() est appelée
 2f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <execRxCommand>
 2f8:	08 95       	ret
			else
				rxErrorCommCnt++;// sinon le nombre d'erreur augmente
 2fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 308:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 30c:	08 95       	ret

0000030e <timer0Init>:
{
	//TCCR0A : COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
	//TCCR0B : FOC0A FOC0B – – WGM02 CS02 CS01 CS00
	//TIMSK0 : – – – – – OCIE0B OCIE0A TOIE0
	uint8_t top = 250; //Valeur de OCR0A.
	TCCR0A = 0b00000010; //Mode CTC.
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Prescaler de 64.
 312:	93 e0       	ldi	r25, 0x03	; 3
 314:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0b00000010; //Output compare match A interrupt enable.
 316:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = top-1; //62.5ns * 64 * 250 = 1ms.
 31a:	89 ef       	ldi	r24, 0xF9	; 249
 31c:	87 bd       	out	0x27, r24	; 39
	sei();
 31e:	78 94       	sei
 320:	08 95       	ret

00000322 <timer4Init>:
	//TCCR4A: COM4A1 COM4A0 COM4B1 COM4B0 FOC4A FOC4B PWM4A PWM4B
	//TCCR4B: PWM4X PSR4 DTPS41 DTPS40 CS43 CS42 CS41 CS40
	//TCCR4C: COM4A1S COM4A0S COM4B1S COMAB0S COM4D1 COM4D0 FOC4D PWM4D
	//TCCR4D: FPIE4 FPEN4 FPNC4 FPES4 FPAC4 FPF4 WGM41 WGM40
	//TCCR4E: TLOCK4 ENHC4 OC4OE5 OC4OE4 OC4OE3 OC4OE2 OC4OE1 OC4OE0
	TCCR4A = 0b10000010; //PWM output OC4A.
 322:	82 e8       	ldi	r24, 0x82	; 130
 324:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	TCCR4B = 0b00000100; //Prescaler de 4.
 328:	84 e0       	ldi	r24, 0x04	; 4
 32a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	OCR4C = 255-1; //62.5ns * 4 * 255 = 127.5us.
 32e:	8e ef       	ldi	r24, 0xFE	; 254
 330:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
	OUTPUT_VALUE(0); //Valeur de la sortie.
 334:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>
 338:	08 95       	ret

0000033a <miscInit>:
	*/
}

void miscInit(void)
{
	adcInit(); //Appel de la fonction d'initialisation du ADC.
 33a:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
	timer0Init(); //Initialisation de timer 0.
 33e:	0e 94 87 01 	call	0x30e	; 0x30e <timer0Init>
	timer4Init(); //Initialisation de timer 4.
 342:	0e 94 91 01 	call	0x322	; 0x322 <timer4Init>
	usartInit(1000000, F_CPU); //Initialisation du USART à 1Mbps.
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	34 e2       	ldi	r19, 0x24	; 36
 34a:	44 ef       	ldi	r20, 0xF4	; 244
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	60 e4       	ldi	r22, 0x40	; 64
 350:	72 e4       	ldi	r23, 0x42	; 66
 352:	8f e0       	ldi	r24, 0x0F	; 15
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 ad 02 	call	0x55a	; 0x55a <usartInit>
	
	OUTPUT_INIT();
 35a:	3f 9a       	sbi	0x07, 7	; 7
	SWITCH_INIT();
 35c:	2b 9a       	sbi	0x05, 3	; 5
 35e:	08 95       	ret

00000360 <main>:
*/
void timer4Init(void);

int main(void)
{
	miscInit();
 360:	0e 94 9d 01 	call	0x33a	; 0x33a <miscInit>
					valueAdc /= 100;
					valueOut /= 100;
					if (valueOut >= 255) //Si valueOut dépasse 255..
						valueOut = 255; //valueOut est limité à 255.
				}
				sprintf(msg, "%d\n\r", valueOut);
 364:	0f 2e       	mov	r0, r31
 366:	f2 e0       	ldi	r31, 0x02	; 2
 368:	cf 2e       	mov	r12, r31
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	df 2e       	mov	r13, r31
 36e:	f0 2d       	mov	r31, r0
 370:	0f 2e       	mov	r0, r31
 372:	ff e2       	ldi	r31, 0x2F	; 47
 374:	ef 2e       	mov	r14, r31
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	ff 2e       	mov	r15, r31
 37a:	f0 2d       	mov	r31, r0
						valueOut += adcRead8();
					}
					valueAdc /= 100;
					valueOut /= 100;
					if (valueOut >= 255) //Si valueOut dépasse 255..
						valueOut = 255; //valueOut est limité à 255.
 37c:	aa 24       	eor	r10, r10
 37e:	aa 94       	dec	r10
 380:	b1 2c       	mov	r11, r1
				usartSendString(msg);
			}
		}
		else  //Si l'interrupteur du potentiomètre est à la position "OFF"...
			outputVeille(veilleMode);
		OUTPUT_VALUE(valueOut);
 382:	0c e0       	ldi	r16, 0x0C	; 12
 384:	11 e0       	ldi	r17, 0x01	; 1
 386:	cf ec       	ldi	r28, 0xCF	; 207
 388:	d0 e0       	ldi	r29, 0x00	; 0
{
	miscInit();
	
	while (1)
	{
				if (usartRxAvailable()) //Si un caractère est disponible...
 38a:	0e 94 2e 03 	call	0x65c	; 0x65c <usartRxAvailable>
 38e:	88 23       	and	r24, r24
 390:	21 f0       	breq	.+8      	; 0x39a <main+0x3a>
				parseRxData(usartRemRxData()); //appel de la fonction parseRxData() avec en paramètre la valeur retournée par usartRemRxData().
 392:	0e 94 12 03 	call	0x624	; 0x624 <usartRemRxData>
 396:	0e 94 36 01 	call	0x26c	; 0x26c <parseRxData>
		if (SWITCH()) //Si l'interrupteur du potentiomètre est à la position "ON"...
 39a:	1b 99       	sbic	0x03, 3	; 3
 39c:	6e c0       	rjmp	.+220    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		{
			if (msFlagAdc)
 39e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <msFlagAdc>
 3a2:	88 23       	and	r24, r24
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <main+0x48>
 3a6:	6d c0       	rjmp	.+218    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			{
				msFlagAdc = 0;
 3a8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <msFlagAdc>
				if (valueAdc != adcRead8())
 3ac:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <valueAdc>
 3b6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <valueAdc+0x1>
 3ba:	82 17       	cp	r24, r18
 3bc:	93 07       	cpc	r25, r19
 3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x62>
 3c0:	46 c0       	rjmp	.+140    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f4 e6       	ldi	r31, 0x64	; 100
 3c6:	9f 2e       	mov	r9, r31
 3c8:	f0 2d       	mov	r31, r0
				{
					for (uint8_t i = 0; i < 100; i++) //Une valeur moyenne sur un echantillon de 100 mesures est calculé afin d'éviter d'être entre deux valeurs.
					{
						valueAdc += adcRead8();
 3ca:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 3ce:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <valueAdc>
 3d2:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <valueAdc+0x1>
 3d6:	28 0f       	add	r18, r24
 3d8:	31 1d       	adc	r19, r1
 3da:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <valueAdc+0x1>
 3de:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <valueAdc>
						valueOut += adcRead8();
 3e2:	0e 94 8f 00 	call	0x11e	; 0x11e <adcRead8>
 3e6:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <valueOut>
 3ea:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <valueOut+0x1>
 3ee:	48 0f       	add	r20, r24
 3f0:	51 1d       	adc	r21, r1
 3f2:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <valueOut+0x1>
 3f6:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <valueOut>
 3fa:	9a 94       	dec	r9
			if (msFlagAdc)
			{
				msFlagAdc = 0;
				if (valueAdc != adcRead8())
				{
					for (uint8_t i = 0; i < 100; i++) //Une valeur moyenne sur un echantillon de 100 mesures est calculé afin d'éviter d'être entre deux valeurs.
 3fc:	91 10       	cpse	r9, r1
 3fe:	e5 cf       	rjmp	.-54     	; 0x3ca <main+0x6a>
					{
						valueAdc += adcRead8();
						valueOut += adcRead8();
					}
					valueAdc /= 100;
 400:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <valueAdc>
 404:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <valueAdc+0x1>
 408:	36 95       	lsr	r19
 40a:	27 95       	ror	r18
 40c:	36 95       	lsr	r19
 40e:	27 95       	ror	r18
 410:	ab e7       	ldi	r26, 0x7B	; 123
 412:	b4 e1       	ldi	r27, 0x14	; 20
 414:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <valueAdc+0x1>
 420:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <valueAdc>
					valueOut /= 100;
 424:	9a 01       	movw	r18, r20
 426:	36 95       	lsr	r19
 428:	27 95       	ror	r18
 42a:	36 95       	lsr	r19
 42c:	27 95       	ror	r18
 42e:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 432:	96 95       	lsr	r25
 434:	87 95       	ror	r24
					if (valueOut >= 255) //Si valueOut dépasse 255..
 436:	8f 3f       	cpi	r24, 0xFF	; 255
 438:	91 05       	cpc	r25, r1
 43a:	28 f4       	brcc	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					{
						valueAdc += adcRead8();
						valueOut += adcRead8();
					}
					valueAdc /= 100;
					valueOut /= 100;
 43c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <valueOut+0x1>
 440:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valueOut>
 444:	04 c0       	rjmp	.+8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
					if (valueOut >= 255) //Si valueOut dépasse 255..
						valueOut = 255; //valueOut est limité à 255.
 446:	b0 92 0d 01 	sts	0x010D, r11	; 0x80010d <valueOut+0x1>
 44a:	a0 92 0c 01 	sts	0x010C, r10	; 0x80010c <valueOut>
				}
				sprintf(msg, "%d\n\r", valueOut);
 44e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <valueOut+0x1>
 452:	8f 93       	push	r24
 454:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <valueOut>
 458:	8f 93       	push	r24
 45a:	df 92       	push	r13
 45c:	cf 92       	push	r12
 45e:	ff 92       	push	r15
 460:	ef 92       	push	r14
 462:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <sprintf>
				usartSendString(msg);
 466:	c7 01       	movw	r24, r14
 468:	0e 94 59 03 	call	0x6b2	; 0x6b2 <usartSendString>
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	04 c0       	rjmp	.+8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			}
		}
		else  //Si l'interrupteur du potentiomètre est à la position "OFF"...
			outputVeille(veilleMode);
 47a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <veilleMode>
 47e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <outputVeille>
		OUTPUT_VALUE(valueOut);
 482:	f8 01       	movw	r30, r16
 484:	80 81       	ld	r24, Z
 486:	88 83       	st	Y, r24
	}
 488:	80 cf       	rjmp	.-256    	; 0x38a <main+0x2a>

0000048a <__vector_25>:
	{
		if(usartSendByte(source[i]))
			return i;
	}
	return size;
}
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
 4a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_rxCnt>
 4aa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_rxBufferIn>
 4ae:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_rxBufferIn+0x1>
 4b2:	9c 01       	movw	r18, r24
 4b4:	2f 5f       	subi	r18, 0xFF	; 255
 4b6:	3f 4f       	sbci	r19, 0xFF	; 255
 4b8:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <_rxBufferIn+0x1>
 4bc:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <_rxBufferIn>
 4c0:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 4c4:	fc 01       	movw	r30, r24
 4c6:	e9 5c       	subi	r30, 0xC9	; 201
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	20 83       	st	Z, r18
 4cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_rxBufferIn>
 4d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_rxBufferIn+0x1>
 4d4:	80 34       	cpi	r24, 0x40	; 64
 4d6:	91 05       	cpc	r25, r1
 4d8:	20 f0       	brcs	.+8      	; 0x4e2 <__vector_25+0x58>
 4da:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_rxBufferIn+0x1>
 4de:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <_rxBufferIn>
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_26>:
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	8f 93       	push	r24
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
 508:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_txCnt>
 50c:	81 11       	cpse	r24, r1
 50e:	06 c0       	rjmp	.+12     	; 0x51c <__vector_26+0x24>
 510:	e9 ec       	ldi	r30, 0xC9	; 201
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	8f 7d       	andi	r24, 0xDF	; 223
 518:	80 83       	st	Z, r24
 51a:	17 c0       	rjmp	.+46     	; 0x54a <__vector_26+0x52>
 51c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_txCnt>
 520:	81 50       	subi	r24, 0x01	; 1
 522:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_txCnt>
 526:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <_txBufferOut>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	8e 0f       	add	r24, r30
 52e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_txBufferOut>
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	e9 58       	subi	r30, 0x89	; 137
 536:	fe 4f       	sbci	r31, 0xFE	; 254
 538:	80 81       	ld	r24, Z
 53a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 53e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_txBufferOut>
 542:	80 34       	cpi	r24, 0x40	; 64
 544:	10 f0       	brcs	.+4      	; 0x54a <__vector_26+0x52>
 546:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_txBufferOut>
 54a:	ff 91       	pop	r31
 54c:	ef 91       	pop	r30
 54e:	8f 91       	pop	r24
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <usartInit>:
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	6b 01       	movw	r12, r22
 564:	7c 01       	movw	r14, r24
 566:	c1 14       	cp	r12, r1
 568:	82 ec       	ldi	r24, 0xC2	; 194
 56a:	d8 06       	cpc	r13, r24
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	e8 06       	cpc	r14, r24
 570:	f1 04       	cpc	r15, r1
 572:	20 f1       	brcs	.+72     	; 0x5bc <usartInit+0x62>
 574:	e8 ec       	ldi	r30, 0xC8	; 200
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	80 83       	st	Z, r24
 57e:	ca 01       	movw	r24, r20
 580:	b9 01       	movw	r22, r18
 582:	68 94       	set
 584:	12 f8       	bld	r1, 2
 586:	96 95       	lsr	r25
 588:	87 95       	ror	r24
 58a:	77 95       	ror	r23
 58c:	67 95       	ror	r22
 58e:	16 94       	lsr	r1
 590:	d1 f7       	brne	.-12     	; 0x586 <usartInit+0x2c>
 592:	a7 01       	movw	r20, r14
 594:	96 01       	movw	r18, r12
 596:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodsi4>
 59a:	ca 01       	movw	r24, r20
 59c:	b9 01       	movw	r22, r18
 59e:	0e 94 12 04 	call	0x824	; 0x824 <__floatunsisf>
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	5f e3       	ldi	r21, 0x3F	; 63
 5aa:	0e 94 76 03 	call	0x6ec	; 0x6ec <__subsf3>
 5ae:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fixunssfsi>
 5b2:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 5b6:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 5ba:	23 c0       	rjmp	.+70     	; 0x602 <usartInit+0xa8>
 5bc:	e8 ec       	ldi	r30, 0xC8	; 200
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	8d 7f       	andi	r24, 0xFD	; 253
 5c4:	80 83       	st	Z, r24
 5c6:	ca 01       	movw	r24, r20
 5c8:	b9 01       	movw	r22, r18
 5ca:	68 94       	set
 5cc:	13 f8       	bld	r1, 3
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	16 94       	lsr	r1
 5d8:	d1 f7       	brne	.-12     	; 0x5ce <usartInit+0x74>
 5da:	a7 01       	movw	r20, r14
 5dc:	96 01       	movw	r18, r12
 5de:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodsi4>
 5e2:	ca 01       	movw	r24, r20
 5e4:	b9 01       	movw	r22, r18
 5e6:	0e 94 12 04 	call	0x824	; 0x824 <__floatunsisf>
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	5f e3       	ldi	r21, 0x3F	; 63
 5f2:	0e 94 76 03 	call	0x6ec	; 0x6ec <__subsf3>
 5f6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fixunssfsi>
 5fa:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 5fe:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 602:	e9 ec       	ldi	r30, 0xC9	; 201
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	88 61       	ori	r24, 0x18	; 24
 60a:	80 83       	st	Z, r24
 60c:	78 94       	sei
 60e:	80 81       	ld	r24, Z
 610:	80 68       	ori	r24, 0x80	; 128
 612:	80 83       	st	Z, r24
 614:	80 81       	ld	r24, Z
 616:	80 62       	ori	r24, 0x20	; 32
 618:	80 83       	st	Z, r24
 61a:	ff 90       	pop	r15
 61c:	ef 90       	pop	r14
 61e:	df 90       	pop	r13
 620:	cf 90       	pop	r12
 622:	08 95       	ret

00000624 <usartRemRxData>:
 624:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 628:	88 23       	and	r24, r24
 62a:	b1 f0       	breq	.+44     	; 0x658 <usartRemRxData+0x34>
 62c:	f8 94       	cli
 62e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 632:	81 50       	subi	r24, 0x01	; 1
 634:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_rxCnt>
 638:	78 94       	sei
 63a:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <_rxBufferOut>
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	9e 0f       	add	r25, r30
 642:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_rxBufferOut>
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	e9 5c       	subi	r30, 0xC9	; 201
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	80 81       	ld	r24, Z
 64e:	90 34       	cpi	r25, 0x40	; 64
 650:	20 f0       	brcs	.+8      	; 0x65a <usartRemRxData+0x36>
 652:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_rxBufferOut>
 656:	08 95       	ret
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	08 95       	ret

0000065c <usartRxAvailable>:
 65c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_rxCnt>
 660:	08 95       	ret

00000662 <usartSendByte>:
 662:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_txCnt>
 666:	90 34       	cpi	r25, 0x40	; 64
 668:	10 f5       	brcc	.+68     	; 0x6ae <usartSendByte+0x4c>
 66a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_txCnt>
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_txCnt>
 674:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <_txBufferIn>
 678:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <_txBufferIn+0x1>
 67c:	a9 01       	movw	r20, r18
 67e:	4f 5f       	subi	r20, 0xFF	; 255
 680:	5f 4f       	sbci	r21, 0xFF	; 255
 682:	50 93 18 01 	sts	0x0118, r21	; 0x800118 <_txBufferIn+0x1>
 686:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <_txBufferIn>
 68a:	f9 01       	movw	r30, r18
 68c:	e9 58       	subi	r30, 0x89	; 137
 68e:	fe 4f       	sbci	r31, 0xFE	; 254
 690:	80 83       	st	Z, r24
 692:	40 34       	cpi	r20, 0x40	; 64
 694:	51 05       	cpc	r21, r1
 696:	20 f0       	brcs	.+8      	; 0x6a0 <usartSendByte+0x3e>
 698:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_txBufferIn+0x1>
 69c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_txBufferIn>
 6a0:	e9 ec       	ldi	r30, 0xC9	; 201
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	80 62       	ori	r24, 0x20	; 32
 6a8:	80 83       	st	Z, r24
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	08 95       	ret
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	08 95       	ret

000006b2 <usartSendString>:

uint8_t usartSendString(const char * str)
{
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	fc 01       	movw	r30, r24
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 6ba:	80 81       	ld	r24, Z
 6bc:	88 23       	and	r24, r24
 6be:	79 f0       	breq	.+30     	; 0x6de <usartSendString+0x2c>
 6c0:	8f 01       	movw	r16, r30
 6c2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
 6c4:	0e 94 31 03 	call	0x662	; 0x662 <usartSendByte>
 6c8:	81 11       	cpse	r24, r1
 6ca:	0b c0       	rjmp	.+22     	; 0x6e2 <usartSendString+0x30>
			return i;
		nbChar ++;
 6cc:	cf 5f       	subi	r28, 0xFF	; 255
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
	for (uint8_t i = 0; str[i]; i++)
 6ce:	f8 01       	movw	r30, r16
 6d0:	ec 0f       	add	r30, r28
 6d2:	f1 1d       	adc	r31, r1
 6d4:	80 81       	ld	r24, Z
 6d6:	81 11       	cpse	r24, r1
 6d8:	f5 cf       	rjmp	.-22     	; 0x6c4 <usartSendString+0x12>
	{
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
			return i;
		nbChar ++;
 6da:	8c 2f       	mov	r24, r28
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <usartSendString+0x32>
	return size;
}

uint8_t usartSendString(const char * str)
{
	uint8_t nbChar = 0;
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <usartSendString+0x32>
 6e2:	8c 2f       	mov	r24, r28
		if(usartSendByte(str[i]))// Appel de la fonction usartSendByte afin d'envoyer un à un les caractères qui composent la string reçu.
			return i;
		nbChar ++;
	}
	return nbChar;
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	08 95       	ret

000006ec <__subsf3>:
 6ec:	50 58       	subi	r21, 0x80	; 128

000006ee <__addsf3>:
 6ee:	bb 27       	eor	r27, r27
 6f0:	aa 27       	eor	r26, r26
 6f2:	0e 94 8e 03 	call	0x71c	; 0x71c <__addsf3x>
 6f6:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_round>
 6fa:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_pscA>
 6fe:	38 f0       	brcs	.+14     	; 0x70e <__addsf3+0x20>
 700:	0e 94 5f 04 	call	0x8be	; 0x8be <__fp_pscB>
 704:	20 f0       	brcs	.+8      	; 0x70e <__addsf3+0x20>
 706:	39 f4       	brne	.+14     	; 0x716 <__addsf3+0x28>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	19 f4       	brne	.+6      	; 0x712 <__addsf3+0x24>
 70c:	26 f4       	brtc	.+8      	; 0x716 <__addsf3+0x28>
 70e:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_nan>
 712:	0e f4       	brtc	.+2      	; 0x716 <__addsf3+0x28>
 714:	e0 95       	com	r30
 716:	e7 fb       	bst	r30, 7
 718:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_inf>

0000071c <__addsf3x>:
 71c:	e9 2f       	mov	r30, r25
 71e:	0e 94 77 04 	call	0x8ee	; 0x8ee <__fp_split3>
 722:	58 f3       	brcs	.-42     	; 0x6fa <__addsf3+0xc>
 724:	ba 17       	cp	r27, r26
 726:	62 07       	cpc	r22, r18
 728:	73 07       	cpc	r23, r19
 72a:	84 07       	cpc	r24, r20
 72c:	95 07       	cpc	r25, r21
 72e:	20 f0       	brcs	.+8      	; 0x738 <__addsf3x+0x1c>
 730:	79 f4       	brne	.+30     	; 0x750 <__addsf3x+0x34>
 732:	a6 f5       	brtc	.+104    	; 0x79c <__addsf3x+0x80>
 734:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_zero>
 738:	0e f4       	brtc	.+2      	; 0x73c <__addsf3x+0x20>
 73a:	e0 95       	com	r30
 73c:	0b 2e       	mov	r0, r27
 73e:	ba 2f       	mov	r27, r26
 740:	a0 2d       	mov	r26, r0
 742:	0b 01       	movw	r0, r22
 744:	b9 01       	movw	r22, r18
 746:	90 01       	movw	r18, r0
 748:	0c 01       	movw	r0, r24
 74a:	ca 01       	movw	r24, r20
 74c:	a0 01       	movw	r20, r0
 74e:	11 24       	eor	r1, r1
 750:	ff 27       	eor	r31, r31
 752:	59 1b       	sub	r21, r25
 754:	99 f0       	breq	.+38     	; 0x77c <__addsf3x+0x60>
 756:	59 3f       	cpi	r21, 0xF9	; 249
 758:	50 f4       	brcc	.+20     	; 0x76e <__addsf3x+0x52>
 75a:	50 3e       	cpi	r21, 0xE0	; 224
 75c:	68 f1       	brcs	.+90     	; 0x7b8 <__addsf3x+0x9c>
 75e:	1a 16       	cp	r1, r26
 760:	f0 40       	sbci	r31, 0x00	; 0
 762:	a2 2f       	mov	r26, r18
 764:	23 2f       	mov	r18, r19
 766:	34 2f       	mov	r19, r20
 768:	44 27       	eor	r20, r20
 76a:	58 5f       	subi	r21, 0xF8	; 248
 76c:	f3 cf       	rjmp	.-26     	; 0x754 <__addsf3x+0x38>
 76e:	46 95       	lsr	r20
 770:	37 95       	ror	r19
 772:	27 95       	ror	r18
 774:	a7 95       	ror	r26
 776:	f0 40       	sbci	r31, 0x00	; 0
 778:	53 95       	inc	r21
 77a:	c9 f7       	brne	.-14     	; 0x76e <__addsf3x+0x52>
 77c:	7e f4       	brtc	.+30     	; 0x79c <__addsf3x+0x80>
 77e:	1f 16       	cp	r1, r31
 780:	ba 0b       	sbc	r27, r26
 782:	62 0b       	sbc	r22, r18
 784:	73 0b       	sbc	r23, r19
 786:	84 0b       	sbc	r24, r20
 788:	ba f0       	brmi	.+46     	; 0x7b8 <__addsf3x+0x9c>
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	a1 f0       	breq	.+40     	; 0x7b6 <__addsf3x+0x9a>
 78e:	ff 0f       	add	r31, r31
 790:	bb 1f       	adc	r27, r27
 792:	66 1f       	adc	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	c2 f7       	brpl	.-16     	; 0x78a <__addsf3x+0x6e>
 79a:	0e c0       	rjmp	.+28     	; 0x7b8 <__addsf3x+0x9c>
 79c:	ba 0f       	add	r27, r26
 79e:	62 1f       	adc	r22, r18
 7a0:	73 1f       	adc	r23, r19
 7a2:	84 1f       	adc	r24, r20
 7a4:	48 f4       	brcc	.+18     	; 0x7b8 <__addsf3x+0x9c>
 7a6:	87 95       	ror	r24
 7a8:	77 95       	ror	r23
 7aa:	67 95       	ror	r22
 7ac:	b7 95       	ror	r27
 7ae:	f7 95       	ror	r31
 7b0:	9e 3f       	cpi	r25, 0xFE	; 254
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__addsf3x+0x9a>
 7b4:	b0 cf       	rjmp	.-160    	; 0x716 <__addsf3+0x28>
 7b6:	93 95       	inc	r25
 7b8:	88 0f       	add	r24, r24
 7ba:	08 f0       	brcs	.+2      	; 0x7be <__addsf3x+0xa2>
 7bc:	99 27       	eor	r25, r25
 7be:	ee 0f       	add	r30, r30
 7c0:	97 95       	ror	r25
 7c2:	87 95       	ror	r24
 7c4:	08 95       	ret

000007c6 <__fixunssfsi>:
 7c6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_splitA>
 7ca:	88 f0       	brcs	.+34     	; 0x7ee <__fixunssfsi+0x28>
 7cc:	9f 57       	subi	r25, 0x7F	; 127
 7ce:	98 f0       	brcs	.+38     	; 0x7f6 <__fixunssfsi+0x30>
 7d0:	b9 2f       	mov	r27, r25
 7d2:	99 27       	eor	r25, r25
 7d4:	b7 51       	subi	r27, 0x17	; 23
 7d6:	b0 f0       	brcs	.+44     	; 0x804 <__fixunssfsi+0x3e>
 7d8:	e1 f0       	breq	.+56     	; 0x812 <__fixunssfsi+0x4c>
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	1a f0       	brmi	.+6      	; 0x7ea <__fixunssfsi+0x24>
 7e4:	ba 95       	dec	r27
 7e6:	c9 f7       	brne	.-14     	; 0x7da <__fixunssfsi+0x14>
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <__fixunssfsi+0x4c>
 7ea:	b1 30       	cpi	r27, 0x01	; 1
 7ec:	91 f0       	breq	.+36     	; 0x812 <__fixunssfsi+0x4c>
 7ee:	0e 94 99 04 	call	0x932	; 0x932 <__fp_zero>
 7f2:	b1 e0       	ldi	r27, 0x01	; 1
 7f4:	08 95       	ret
 7f6:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_zero>
 7fa:	67 2f       	mov	r22, r23
 7fc:	78 2f       	mov	r23, r24
 7fe:	88 27       	eor	r24, r24
 800:	b8 5f       	subi	r27, 0xF8	; 248
 802:	39 f0       	breq	.+14     	; 0x812 <__fixunssfsi+0x4c>
 804:	b9 3f       	cpi	r27, 0xF9	; 249
 806:	cc f3       	brlt	.-14     	; 0x7fa <__fixunssfsi+0x34>
 808:	86 95       	lsr	r24
 80a:	77 95       	ror	r23
 80c:	67 95       	ror	r22
 80e:	b3 95       	inc	r27
 810:	d9 f7       	brne	.-10     	; 0x808 <__fixunssfsi+0x42>
 812:	3e f4       	brtc	.+14     	; 0x822 <__fixunssfsi+0x5c>
 814:	90 95       	com	r25
 816:	80 95       	com	r24
 818:	70 95       	com	r23
 81a:	61 95       	neg	r22
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	08 95       	ret

00000824 <__floatunsisf>:
 824:	e8 94       	clt
 826:	09 c0       	rjmp	.+18     	; 0x83a <__floatsisf+0x12>

00000828 <__floatsisf>:
 828:	97 fb       	bst	r25, 7
 82a:	3e f4       	brtc	.+14     	; 0x83a <__floatsisf+0x12>
 82c:	90 95       	com	r25
 82e:	80 95       	com	r24
 830:	70 95       	com	r23
 832:	61 95       	neg	r22
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	99 23       	and	r25, r25
 83c:	a9 f0       	breq	.+42     	; 0x868 <__floatsisf+0x40>
 83e:	f9 2f       	mov	r31, r25
 840:	96 e9       	ldi	r25, 0x96	; 150
 842:	bb 27       	eor	r27, r27
 844:	93 95       	inc	r25
 846:	f6 95       	lsr	r31
 848:	87 95       	ror	r24
 84a:	77 95       	ror	r23
 84c:	67 95       	ror	r22
 84e:	b7 95       	ror	r27
 850:	f1 11       	cpse	r31, r1
 852:	f8 cf       	rjmp	.-16     	; 0x844 <__floatsisf+0x1c>
 854:	fa f4       	brpl	.+62     	; 0x894 <__floatsisf+0x6c>
 856:	bb 0f       	add	r27, r27
 858:	11 f4       	brne	.+4      	; 0x85e <__floatsisf+0x36>
 85a:	60 ff       	sbrs	r22, 0
 85c:	1b c0       	rjmp	.+54     	; 0x894 <__floatsisf+0x6c>
 85e:	6f 5f       	subi	r22, 0xFF	; 255
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	16 c0       	rjmp	.+44     	; 0x894 <__floatsisf+0x6c>
 868:	88 23       	and	r24, r24
 86a:	11 f0       	breq	.+4      	; 0x870 <__floatsisf+0x48>
 86c:	96 e9       	ldi	r25, 0x96	; 150
 86e:	11 c0       	rjmp	.+34     	; 0x892 <__floatsisf+0x6a>
 870:	77 23       	and	r23, r23
 872:	21 f0       	breq	.+8      	; 0x87c <__floatsisf+0x54>
 874:	9e e8       	ldi	r25, 0x8E	; 142
 876:	87 2f       	mov	r24, r23
 878:	76 2f       	mov	r23, r22
 87a:	05 c0       	rjmp	.+10     	; 0x886 <__floatsisf+0x5e>
 87c:	66 23       	and	r22, r22
 87e:	71 f0       	breq	.+28     	; 0x89c <__floatsisf+0x74>
 880:	96 e8       	ldi	r25, 0x86	; 134
 882:	86 2f       	mov	r24, r22
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	2a f0       	brmi	.+10     	; 0x894 <__floatsisf+0x6c>
 88a:	9a 95       	dec	r25
 88c:	66 0f       	add	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	88 1f       	adc	r24, r24
 892:	da f7       	brpl	.-10     	; 0x88a <__floatsisf+0x62>
 894:	88 0f       	add	r24, r24
 896:	96 95       	lsr	r25
 898:	87 95       	ror	r24
 89a:	97 f9       	bld	r25, 7
 89c:	08 95       	ret

0000089e <__fp_inf>:
 89e:	97 f9       	bld	r25, 7
 8a0:	9f 67       	ori	r25, 0x7F	; 127
 8a2:	80 e8       	ldi	r24, 0x80	; 128
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	08 95       	ret

000008aa <__fp_nan>:
 8aa:	9f ef       	ldi	r25, 0xFF	; 255
 8ac:	80 ec       	ldi	r24, 0xC0	; 192
 8ae:	08 95       	ret

000008b0 <__fp_pscA>:
 8b0:	00 24       	eor	r0, r0
 8b2:	0a 94       	dec	r0
 8b4:	16 16       	cp	r1, r22
 8b6:	17 06       	cpc	r1, r23
 8b8:	18 06       	cpc	r1, r24
 8ba:	09 06       	cpc	r0, r25
 8bc:	08 95       	ret

000008be <__fp_pscB>:
 8be:	00 24       	eor	r0, r0
 8c0:	0a 94       	dec	r0
 8c2:	12 16       	cp	r1, r18
 8c4:	13 06       	cpc	r1, r19
 8c6:	14 06       	cpc	r1, r20
 8c8:	05 06       	cpc	r0, r21
 8ca:	08 95       	ret

000008cc <__fp_round>:
 8cc:	09 2e       	mov	r0, r25
 8ce:	03 94       	inc	r0
 8d0:	00 0c       	add	r0, r0
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <__fp_round+0xc>
 8d4:	88 23       	and	r24, r24
 8d6:	52 f0       	brmi	.+20     	; 0x8ec <__fp_round+0x20>
 8d8:	bb 0f       	add	r27, r27
 8da:	40 f4       	brcc	.+16     	; 0x8ec <__fp_round+0x20>
 8dc:	bf 2b       	or	r27, r31
 8de:	11 f4       	brne	.+4      	; 0x8e4 <__fp_round+0x18>
 8e0:	60 ff       	sbrs	r22, 0
 8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__fp_round+0x20>
 8e4:	6f 5f       	subi	r22, 0xFF	; 255
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	08 95       	ret

000008ee <__fp_split3>:
 8ee:	57 fd       	sbrc	r21, 7
 8f0:	90 58       	subi	r25, 0x80	; 128
 8f2:	44 0f       	add	r20, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	59 f0       	breq	.+22     	; 0x90e <__fp_splitA+0x10>
 8f8:	5f 3f       	cpi	r21, 0xFF	; 255
 8fa:	71 f0       	breq	.+28     	; 0x918 <__fp_splitA+0x1a>
 8fc:	47 95       	ror	r20

000008fe <__fp_splitA>:
 8fe:	88 0f       	add	r24, r24
 900:	97 fb       	bst	r25, 7
 902:	99 1f       	adc	r25, r25
 904:	61 f0       	breq	.+24     	; 0x91e <__fp_splitA+0x20>
 906:	9f 3f       	cpi	r25, 0xFF	; 255
 908:	79 f0       	breq	.+30     	; 0x928 <__fp_splitA+0x2a>
 90a:	87 95       	ror	r24
 90c:	08 95       	ret
 90e:	12 16       	cp	r1, r18
 910:	13 06       	cpc	r1, r19
 912:	14 06       	cpc	r1, r20
 914:	55 1f       	adc	r21, r21
 916:	f2 cf       	rjmp	.-28     	; 0x8fc <__fp_split3+0xe>
 918:	46 95       	lsr	r20
 91a:	f1 df       	rcall	.-30     	; 0x8fe <__fp_splitA>
 91c:	08 c0       	rjmp	.+16     	; 0x92e <__fp_splitA+0x30>
 91e:	16 16       	cp	r1, r22
 920:	17 06       	cpc	r1, r23
 922:	18 06       	cpc	r1, r24
 924:	99 1f       	adc	r25, r25
 926:	f1 cf       	rjmp	.-30     	; 0x90a <__fp_splitA+0xc>
 928:	86 95       	lsr	r24
 92a:	71 05       	cpc	r23, r1
 92c:	61 05       	cpc	r22, r1
 92e:	08 94       	sec
 930:	08 95       	ret

00000932 <__fp_zero>:
 932:	e8 94       	clt

00000934 <__fp_szero>:
 934:	bb 27       	eor	r27, r27
 936:	66 27       	eor	r22, r22
 938:	77 27       	eor	r23, r23
 93a:	cb 01       	movw	r24, r22
 93c:	97 f9       	bld	r25, 7
 93e:	08 95       	ret

00000940 <__udivmodsi4>:
 940:	a1 e2       	ldi	r26, 0x21	; 33
 942:	1a 2e       	mov	r1, r26
 944:	aa 1b       	sub	r26, r26
 946:	bb 1b       	sub	r27, r27
 948:	fd 01       	movw	r30, r26
 94a:	0d c0       	rjmp	.+26     	; 0x966 <__udivmodsi4_ep>

0000094c <__udivmodsi4_loop>:
 94c:	aa 1f       	adc	r26, r26
 94e:	bb 1f       	adc	r27, r27
 950:	ee 1f       	adc	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	a2 17       	cp	r26, r18
 956:	b3 07       	cpc	r27, r19
 958:	e4 07       	cpc	r30, r20
 95a:	f5 07       	cpc	r31, r21
 95c:	20 f0       	brcs	.+8      	; 0x966 <__udivmodsi4_ep>
 95e:	a2 1b       	sub	r26, r18
 960:	b3 0b       	sbc	r27, r19
 962:	e4 0b       	sbc	r30, r20
 964:	f5 0b       	sbc	r31, r21

00000966 <__udivmodsi4_ep>:
 966:	66 1f       	adc	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	1a 94       	dec	r1
 970:	69 f7       	brne	.-38     	; 0x94c <__udivmodsi4_loop>
 972:	60 95       	com	r22
 974:	70 95       	com	r23
 976:	80 95       	com	r24
 978:	90 95       	com	r25
 97a:	9b 01       	movw	r18, r22
 97c:	ac 01       	movw	r20, r24
 97e:	bd 01       	movw	r22, r26
 980:	cf 01       	movw	r24, r30
 982:	08 95       	ret

00000984 <__umulhisi3>:
 984:	a2 9f       	mul	r26, r18
 986:	b0 01       	movw	r22, r0
 988:	b3 9f       	mul	r27, r19
 98a:	c0 01       	movw	r24, r0
 98c:	a3 9f       	mul	r26, r19
 98e:	70 0d       	add	r23, r0
 990:	81 1d       	adc	r24, r1
 992:	11 24       	eor	r1, r1
 994:	91 1d       	adc	r25, r1
 996:	b2 9f       	mul	r27, r18
 998:	70 0d       	add	r23, r0
 99a:	81 1d       	adc	r24, r1
 99c:	11 24       	eor	r1, r1
 99e:	91 1d       	adc	r25, r1
 9a0:	08 95       	ret

000009a2 <sprintf>:
 9a2:	ae e0       	ldi	r26, 0x0E	; 14
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	e7 ed       	ldi	r30, 0xD7	; 215
 9a8:	f4 e0       	ldi	r31, 0x04	; 4
 9aa:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__prologue_saves__+0x1c>
 9ae:	0d 89       	ldd	r16, Y+21	; 0x15
 9b0:	1e 89       	ldd	r17, Y+22	; 0x16
 9b2:	86 e0       	ldi	r24, 0x06	; 6
 9b4:	8c 83       	std	Y+4, r24	; 0x04
 9b6:	1a 83       	std	Y+2, r17	; 0x02
 9b8:	09 83       	std	Y+1, r16	; 0x01
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	9f e7       	ldi	r25, 0x7F	; 127
 9be:	9e 83       	std	Y+6, r25	; 0x06
 9c0:	8d 83       	std	Y+5, r24	; 0x05
 9c2:	ae 01       	movw	r20, r28
 9c4:	47 5e       	subi	r20, 0xE7	; 231
 9c6:	5f 4f       	sbci	r21, 0xFF	; 255
 9c8:	6f 89       	ldd	r22, Y+23	; 0x17
 9ca:	78 8d       	ldd	r23, Y+24	; 0x18
 9cc:	ce 01       	movw	r24, r28
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <vfprintf>
 9d4:	ef 81       	ldd	r30, Y+7	; 0x07
 9d6:	f8 85       	ldd	r31, Y+8	; 0x08
 9d8:	e0 0f       	add	r30, r16
 9da:	f1 1f       	adc	r31, r17
 9dc:	10 82       	st	Z, r1
 9de:	2e 96       	adiw	r28, 0x0e	; 14
 9e0:	e4 e0       	ldi	r30, 0x04	; 4
 9e2:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__epilogue_restores__+0x1c>

000009e6 <vfprintf>:
 9e6:	ab e0       	ldi	r26, 0x0B	; 11
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	e9 ef       	ldi	r30, 0xF9	; 249
 9ec:	f4 e0       	ldi	r31, 0x04	; 4
 9ee:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__prologue_saves__>
 9f2:	6c 01       	movw	r12, r24
 9f4:	7b 01       	movw	r14, r22
 9f6:	8a 01       	movw	r16, r20
 9f8:	fc 01       	movw	r30, r24
 9fa:	17 82       	std	Z+7, r1	; 0x07
 9fc:	16 82       	std	Z+6, r1	; 0x06
 9fe:	83 81       	ldd	r24, Z+3	; 0x03
 a00:	81 ff       	sbrs	r24, 1
 a02:	cc c1       	rjmp	.+920    	; 0xd9c <__stack+0x29d>
 a04:	ce 01       	movw	r24, r28
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	3c 01       	movw	r6, r24
 a0a:	f6 01       	movw	r30, r12
 a0c:	93 81       	ldd	r25, Z+3	; 0x03
 a0e:	f7 01       	movw	r30, r14
 a10:	93 fd       	sbrc	r25, 3
 a12:	85 91       	lpm	r24, Z+
 a14:	93 ff       	sbrs	r25, 3
 a16:	81 91       	ld	r24, Z+
 a18:	7f 01       	movw	r14, r30
 a1a:	88 23       	and	r24, r24
 a1c:	09 f4       	brne	.+2      	; 0xa20 <__DATA_REGION_LENGTH__+0x20>
 a1e:	ba c1       	rjmp	.+884    	; 0xd94 <__stack+0x295>
 a20:	85 32       	cpi	r24, 0x25	; 37
 a22:	39 f4       	brne	.+14     	; 0xa32 <__DATA_REGION_LENGTH__+0x32>
 a24:	93 fd       	sbrc	r25, 3
 a26:	85 91       	lpm	r24, Z+
 a28:	93 ff       	sbrs	r25, 3
 a2a:	81 91       	ld	r24, Z+
 a2c:	7f 01       	movw	r14, r30
 a2e:	85 32       	cpi	r24, 0x25	; 37
 a30:	29 f4       	brne	.+10     	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
 a32:	b6 01       	movw	r22, r12
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 a3a:	e7 cf       	rjmp	.-50     	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
 a3c:	91 2c       	mov	r9, r1
 a3e:	21 2c       	mov	r2, r1
 a40:	31 2c       	mov	r3, r1
 a42:	ff e1       	ldi	r31, 0x1F	; 31
 a44:	f3 15       	cp	r31, r3
 a46:	d8 f0       	brcs	.+54     	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
 a48:	8b 32       	cpi	r24, 0x2B	; 43
 a4a:	79 f0       	breq	.+30     	; 0xa6a <__DATA_REGION_LENGTH__+0x6a>
 a4c:	38 f4       	brcc	.+14     	; 0xa5c <__DATA_REGION_LENGTH__+0x5c>
 a4e:	80 32       	cpi	r24, 0x20	; 32
 a50:	79 f0       	breq	.+30     	; 0xa70 <__DATA_REGION_LENGTH__+0x70>
 a52:	83 32       	cpi	r24, 0x23	; 35
 a54:	a1 f4       	brne	.+40     	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
 a56:	23 2d       	mov	r18, r3
 a58:	20 61       	ori	r18, 0x10	; 16
 a5a:	1d c0       	rjmp	.+58     	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
 a5c:	8d 32       	cpi	r24, 0x2D	; 45
 a5e:	61 f0       	breq	.+24     	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a60:	80 33       	cpi	r24, 0x30	; 48
 a62:	69 f4       	brne	.+26     	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
 a64:	23 2d       	mov	r18, r3
 a66:	21 60       	ori	r18, 0x01	; 1
 a68:	16 c0       	rjmp	.+44     	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
 a6a:	83 2d       	mov	r24, r3
 a6c:	82 60       	ori	r24, 0x02	; 2
 a6e:	38 2e       	mov	r3, r24
 a70:	e3 2d       	mov	r30, r3
 a72:	e4 60       	ori	r30, 0x04	; 4
 a74:	3e 2e       	mov	r3, r30
 a76:	2a c0       	rjmp	.+84     	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 a78:	f3 2d       	mov	r31, r3
 a7a:	f8 60       	ori	r31, 0x08	; 8
 a7c:	1d c0       	rjmp	.+58     	; 0xab8 <__DATA_REGION_LENGTH__+0xb8>
 a7e:	37 fc       	sbrc	r3, 7
 a80:	2d c0       	rjmp	.+90     	; 0xadc <__DATA_REGION_LENGTH__+0xdc>
 a82:	20 ed       	ldi	r18, 0xD0	; 208
 a84:	28 0f       	add	r18, r24
 a86:	2a 30       	cpi	r18, 0x0A	; 10
 a88:	40 f0       	brcs	.+16     	; 0xa9a <__DATA_REGION_LENGTH__+0x9a>
 a8a:	8e 32       	cpi	r24, 0x2E	; 46
 a8c:	b9 f4       	brne	.+46     	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
 a8e:	36 fc       	sbrc	r3, 6
 a90:	81 c1       	rjmp	.+770    	; 0xd94 <__stack+0x295>
 a92:	23 2d       	mov	r18, r3
 a94:	20 64       	ori	r18, 0x40	; 64
 a96:	32 2e       	mov	r3, r18
 a98:	19 c0       	rjmp	.+50     	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 a9a:	36 fe       	sbrs	r3, 6
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
 a9e:	8a e0       	ldi	r24, 0x0A	; 10
 aa0:	98 9e       	mul	r9, r24
 aa2:	20 0d       	add	r18, r0
 aa4:	11 24       	eor	r1, r1
 aa6:	92 2e       	mov	r9, r18
 aa8:	11 c0       	rjmp	.+34     	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 aaa:	ea e0       	ldi	r30, 0x0A	; 10
 aac:	2e 9e       	mul	r2, r30
 aae:	20 0d       	add	r18, r0
 ab0:	11 24       	eor	r1, r1
 ab2:	22 2e       	mov	r2, r18
 ab4:	f3 2d       	mov	r31, r3
 ab6:	f0 62       	ori	r31, 0x20	; 32
 ab8:	3f 2e       	mov	r3, r31
 aba:	08 c0       	rjmp	.+16     	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 abc:	8c 36       	cpi	r24, 0x6C	; 108
 abe:	21 f4       	brne	.+8      	; 0xac8 <__DATA_REGION_LENGTH__+0xc8>
 ac0:	83 2d       	mov	r24, r3
 ac2:	80 68       	ori	r24, 0x80	; 128
 ac4:	38 2e       	mov	r3, r24
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 ac8:	88 36       	cpi	r24, 0x68	; 104
 aca:	41 f4       	brne	.+16     	; 0xadc <__DATA_REGION_LENGTH__+0xdc>
 acc:	f7 01       	movw	r30, r14
 ace:	93 fd       	sbrc	r25, 3
 ad0:	85 91       	lpm	r24, Z+
 ad2:	93 ff       	sbrs	r25, 3
 ad4:	81 91       	ld	r24, Z+
 ad6:	7f 01       	movw	r14, r30
 ad8:	81 11       	cpse	r24, r1
 ada:	b3 cf       	rjmp	.-154    	; 0xa42 <__DATA_REGION_LENGTH__+0x42>
 adc:	98 2f       	mov	r25, r24
 ade:	9f 7d       	andi	r25, 0xDF	; 223
 ae0:	95 54       	subi	r25, 0x45	; 69
 ae2:	93 30       	cpi	r25, 0x03	; 3
 ae4:	28 f4       	brcc	.+10     	; 0xaf0 <__DATA_REGION_LENGTH__+0xf0>
 ae6:	0c 5f       	subi	r16, 0xFC	; 252
 ae8:	1f 4f       	sbci	r17, 0xFF	; 255
 aea:	9f e3       	ldi	r25, 0x3F	; 63
 aec:	99 83       	std	Y+1, r25	; 0x01
 aee:	0d c0       	rjmp	.+26     	; 0xb0a <__stack+0xb>
 af0:	83 36       	cpi	r24, 0x63	; 99
 af2:	31 f0       	breq	.+12     	; 0xb00 <__stack+0x1>
 af4:	83 37       	cpi	r24, 0x73	; 115
 af6:	71 f0       	breq	.+28     	; 0xb14 <__stack+0x15>
 af8:	83 35       	cpi	r24, 0x53	; 83
 afa:	09 f0       	breq	.+2      	; 0xafe <__DATA_REGION_LENGTH__+0xfe>
 afc:	59 c0       	rjmp	.+178    	; 0xbb0 <__stack+0xb1>
 afe:	21 c0       	rjmp	.+66     	; 0xb42 <__stack+0x43>
 b00:	f8 01       	movw	r30, r16
 b02:	80 81       	ld	r24, Z
 b04:	89 83       	std	Y+1, r24	; 0x01
 b06:	0e 5f       	subi	r16, 0xFE	; 254
 b08:	1f 4f       	sbci	r17, 0xFF	; 255
 b0a:	88 24       	eor	r8, r8
 b0c:	83 94       	inc	r8
 b0e:	91 2c       	mov	r9, r1
 b10:	53 01       	movw	r10, r6
 b12:	13 c0       	rjmp	.+38     	; 0xb3a <__stack+0x3b>
 b14:	28 01       	movw	r4, r16
 b16:	f2 e0       	ldi	r31, 0x02	; 2
 b18:	4f 0e       	add	r4, r31
 b1a:	51 1c       	adc	r5, r1
 b1c:	f8 01       	movw	r30, r16
 b1e:	a0 80       	ld	r10, Z
 b20:	b1 80       	ldd	r11, Z+1	; 0x01
 b22:	36 fe       	sbrs	r3, 6
 b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x2d>
 b26:	69 2d       	mov	r22, r9
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__stack+0x31>
 b2c:	6f ef       	ldi	r22, 0xFF	; 255
 b2e:	7f ef       	ldi	r23, 0xFF	; 255
 b30:	c5 01       	movw	r24, r10
 b32:	0e 94 df 06 	call	0xdbe	; 0xdbe <strnlen>
 b36:	4c 01       	movw	r8, r24
 b38:	82 01       	movw	r16, r4
 b3a:	f3 2d       	mov	r31, r3
 b3c:	ff 77       	andi	r31, 0x7F	; 127
 b3e:	3f 2e       	mov	r3, r31
 b40:	16 c0       	rjmp	.+44     	; 0xb6e <__stack+0x6f>
 b42:	28 01       	movw	r4, r16
 b44:	22 e0       	ldi	r18, 0x02	; 2
 b46:	42 0e       	add	r4, r18
 b48:	51 1c       	adc	r5, r1
 b4a:	f8 01       	movw	r30, r16
 b4c:	a0 80       	ld	r10, Z
 b4e:	b1 80       	ldd	r11, Z+1	; 0x01
 b50:	36 fe       	sbrs	r3, 6
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <__stack+0x5b>
 b54:	69 2d       	mov	r22, r9
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <__stack+0x5f>
 b5a:	6f ef       	ldi	r22, 0xFF	; 255
 b5c:	7f ef       	ldi	r23, 0xFF	; 255
 b5e:	c5 01       	movw	r24, r10
 b60:	0e 94 d4 06 	call	0xda8	; 0xda8 <strnlen_P>
 b64:	4c 01       	movw	r8, r24
 b66:	f3 2d       	mov	r31, r3
 b68:	f0 68       	ori	r31, 0x80	; 128
 b6a:	3f 2e       	mov	r3, r31
 b6c:	82 01       	movw	r16, r4
 b6e:	33 fc       	sbrc	r3, 3
 b70:	1b c0       	rjmp	.+54     	; 0xba8 <__stack+0xa9>
 b72:	82 2d       	mov	r24, r2
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	88 16       	cp	r8, r24
 b78:	99 06       	cpc	r9, r25
 b7a:	b0 f4       	brcc	.+44     	; 0xba8 <__stack+0xa9>
 b7c:	b6 01       	movw	r22, r12
 b7e:	80 e2       	ldi	r24, 0x20	; 32
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 b86:	2a 94       	dec	r2
 b88:	f4 cf       	rjmp	.-24     	; 0xb72 <__stack+0x73>
 b8a:	f5 01       	movw	r30, r10
 b8c:	37 fc       	sbrc	r3, 7
 b8e:	85 91       	lpm	r24, Z+
 b90:	37 fe       	sbrs	r3, 7
 b92:	81 91       	ld	r24, Z+
 b94:	5f 01       	movw	r10, r30
 b96:	b6 01       	movw	r22, r12
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 b9e:	21 10       	cpse	r2, r1
 ba0:	2a 94       	dec	r2
 ba2:	21 e0       	ldi	r18, 0x01	; 1
 ba4:	82 1a       	sub	r8, r18
 ba6:	91 08       	sbc	r9, r1
 ba8:	81 14       	cp	r8, r1
 baa:	91 04       	cpc	r9, r1
 bac:	71 f7       	brne	.-36     	; 0xb8a <__stack+0x8b>
 bae:	e8 c0       	rjmp	.+464    	; 0xd80 <__stack+0x281>
 bb0:	84 36       	cpi	r24, 0x64	; 100
 bb2:	11 f0       	breq	.+4      	; 0xbb8 <__stack+0xb9>
 bb4:	89 36       	cpi	r24, 0x69	; 105
 bb6:	41 f5       	brne	.+80     	; 0xc08 <__stack+0x109>
 bb8:	f8 01       	movw	r30, r16
 bba:	37 fe       	sbrs	r3, 7
 bbc:	07 c0       	rjmp	.+14     	; 0xbcc <__stack+0xcd>
 bbe:	60 81       	ld	r22, Z
 bc0:	71 81       	ldd	r23, Z+1	; 0x01
 bc2:	82 81       	ldd	r24, Z+2	; 0x02
 bc4:	93 81       	ldd	r25, Z+3	; 0x03
 bc6:	0c 5f       	subi	r16, 0xFC	; 252
 bc8:	1f 4f       	sbci	r17, 0xFF	; 255
 bca:	08 c0       	rjmp	.+16     	; 0xbdc <__stack+0xdd>
 bcc:	60 81       	ld	r22, Z
 bce:	71 81       	ldd	r23, Z+1	; 0x01
 bd0:	07 2e       	mov	r0, r23
 bd2:	00 0c       	add	r0, r0
 bd4:	88 0b       	sbc	r24, r24
 bd6:	99 0b       	sbc	r25, r25
 bd8:	0e 5f       	subi	r16, 0xFE	; 254
 bda:	1f 4f       	sbci	r17, 0xFF	; 255
 bdc:	f3 2d       	mov	r31, r3
 bde:	ff 76       	andi	r31, 0x6F	; 111
 be0:	3f 2e       	mov	r3, r31
 be2:	97 ff       	sbrs	r25, 7
 be4:	09 c0       	rjmp	.+18     	; 0xbf8 <__stack+0xf9>
 be6:	90 95       	com	r25
 be8:	80 95       	com	r24
 bea:	70 95       	com	r23
 bec:	61 95       	neg	r22
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	f0 68       	ori	r31, 0x80	; 128
 bf6:	3f 2e       	mov	r3, r31
 bf8:	2a e0       	ldi	r18, 0x0A	; 10
 bfa:	30 e0       	ldi	r19, 0x00	; 0
 bfc:	a3 01       	movw	r20, r6
 bfe:	0e 94 26 07 	call	0xe4c	; 0xe4c <__ultoa_invert>
 c02:	88 2e       	mov	r8, r24
 c04:	86 18       	sub	r8, r6
 c06:	45 c0       	rjmp	.+138    	; 0xc92 <__stack+0x193>
 c08:	85 37       	cpi	r24, 0x75	; 117
 c0a:	31 f4       	brne	.+12     	; 0xc18 <__stack+0x119>
 c0c:	23 2d       	mov	r18, r3
 c0e:	2f 7e       	andi	r18, 0xEF	; 239
 c10:	b2 2e       	mov	r11, r18
 c12:	2a e0       	ldi	r18, 0x0A	; 10
 c14:	30 e0       	ldi	r19, 0x00	; 0
 c16:	25 c0       	rjmp	.+74     	; 0xc62 <__stack+0x163>
 c18:	93 2d       	mov	r25, r3
 c1a:	99 7f       	andi	r25, 0xF9	; 249
 c1c:	b9 2e       	mov	r11, r25
 c1e:	8f 36       	cpi	r24, 0x6F	; 111
 c20:	c1 f0       	breq	.+48     	; 0xc52 <__stack+0x153>
 c22:	18 f4       	brcc	.+6      	; 0xc2a <__stack+0x12b>
 c24:	88 35       	cpi	r24, 0x58	; 88
 c26:	79 f0       	breq	.+30     	; 0xc46 <__stack+0x147>
 c28:	b5 c0       	rjmp	.+362    	; 0xd94 <__stack+0x295>
 c2a:	80 37       	cpi	r24, 0x70	; 112
 c2c:	19 f0       	breq	.+6      	; 0xc34 <__stack+0x135>
 c2e:	88 37       	cpi	r24, 0x78	; 120
 c30:	21 f0       	breq	.+8      	; 0xc3a <__stack+0x13b>
 c32:	b0 c0       	rjmp	.+352    	; 0xd94 <__stack+0x295>
 c34:	e9 2f       	mov	r30, r25
 c36:	e0 61       	ori	r30, 0x10	; 16
 c38:	be 2e       	mov	r11, r30
 c3a:	b4 fe       	sbrs	r11, 4
 c3c:	0d c0       	rjmp	.+26     	; 0xc58 <__stack+0x159>
 c3e:	fb 2d       	mov	r31, r11
 c40:	f4 60       	ori	r31, 0x04	; 4
 c42:	bf 2e       	mov	r11, r31
 c44:	09 c0       	rjmp	.+18     	; 0xc58 <__stack+0x159>
 c46:	34 fe       	sbrs	r3, 4
 c48:	0a c0       	rjmp	.+20     	; 0xc5e <__stack+0x15f>
 c4a:	29 2f       	mov	r18, r25
 c4c:	26 60       	ori	r18, 0x06	; 6
 c4e:	b2 2e       	mov	r11, r18
 c50:	06 c0       	rjmp	.+12     	; 0xc5e <__stack+0x15f>
 c52:	28 e0       	ldi	r18, 0x08	; 8
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	05 c0       	rjmp	.+10     	; 0xc62 <__stack+0x163>
 c58:	20 e1       	ldi	r18, 0x10	; 16
 c5a:	30 e0       	ldi	r19, 0x00	; 0
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <__stack+0x163>
 c5e:	20 e1       	ldi	r18, 0x10	; 16
 c60:	32 e0       	ldi	r19, 0x02	; 2
 c62:	f8 01       	movw	r30, r16
 c64:	b7 fe       	sbrs	r11, 7
 c66:	07 c0       	rjmp	.+14     	; 0xc76 <__stack+0x177>
 c68:	60 81       	ld	r22, Z
 c6a:	71 81       	ldd	r23, Z+1	; 0x01
 c6c:	82 81       	ldd	r24, Z+2	; 0x02
 c6e:	93 81       	ldd	r25, Z+3	; 0x03
 c70:	0c 5f       	subi	r16, 0xFC	; 252
 c72:	1f 4f       	sbci	r17, 0xFF	; 255
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <__stack+0x183>
 c76:	60 81       	ld	r22, Z
 c78:	71 81       	ldd	r23, Z+1	; 0x01
 c7a:	80 e0       	ldi	r24, 0x00	; 0
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	0e 5f       	subi	r16, 0xFE	; 254
 c80:	1f 4f       	sbci	r17, 0xFF	; 255
 c82:	a3 01       	movw	r20, r6
 c84:	0e 94 26 07 	call	0xe4c	; 0xe4c <__ultoa_invert>
 c88:	88 2e       	mov	r8, r24
 c8a:	86 18       	sub	r8, r6
 c8c:	fb 2d       	mov	r31, r11
 c8e:	ff 77       	andi	r31, 0x7F	; 127
 c90:	3f 2e       	mov	r3, r31
 c92:	36 fe       	sbrs	r3, 6
 c94:	0d c0       	rjmp	.+26     	; 0xcb0 <__stack+0x1b1>
 c96:	23 2d       	mov	r18, r3
 c98:	2e 7f       	andi	r18, 0xFE	; 254
 c9a:	a2 2e       	mov	r10, r18
 c9c:	89 14       	cp	r8, r9
 c9e:	58 f4       	brcc	.+22     	; 0xcb6 <__stack+0x1b7>
 ca0:	34 fe       	sbrs	r3, 4
 ca2:	0b c0       	rjmp	.+22     	; 0xcba <__stack+0x1bb>
 ca4:	32 fc       	sbrc	r3, 2
 ca6:	09 c0       	rjmp	.+18     	; 0xcba <__stack+0x1bb>
 ca8:	83 2d       	mov	r24, r3
 caa:	8e 7e       	andi	r24, 0xEE	; 238
 cac:	a8 2e       	mov	r10, r24
 cae:	05 c0       	rjmp	.+10     	; 0xcba <__stack+0x1bb>
 cb0:	b8 2c       	mov	r11, r8
 cb2:	a3 2c       	mov	r10, r3
 cb4:	03 c0       	rjmp	.+6      	; 0xcbc <__stack+0x1bd>
 cb6:	b8 2c       	mov	r11, r8
 cb8:	01 c0       	rjmp	.+2      	; 0xcbc <__stack+0x1bd>
 cba:	b9 2c       	mov	r11, r9
 cbc:	a4 fe       	sbrs	r10, 4
 cbe:	0f c0       	rjmp	.+30     	; 0xcde <__stack+0x1df>
 cc0:	fe 01       	movw	r30, r28
 cc2:	e8 0d       	add	r30, r8
 cc4:	f1 1d       	adc	r31, r1
 cc6:	80 81       	ld	r24, Z
 cc8:	80 33       	cpi	r24, 0x30	; 48
 cca:	21 f4       	brne	.+8      	; 0xcd4 <__stack+0x1d5>
 ccc:	9a 2d       	mov	r25, r10
 cce:	99 7e       	andi	r25, 0xE9	; 233
 cd0:	a9 2e       	mov	r10, r25
 cd2:	09 c0       	rjmp	.+18     	; 0xce6 <__stack+0x1e7>
 cd4:	a2 fe       	sbrs	r10, 2
 cd6:	06 c0       	rjmp	.+12     	; 0xce4 <__stack+0x1e5>
 cd8:	b3 94       	inc	r11
 cda:	b3 94       	inc	r11
 cdc:	04 c0       	rjmp	.+8      	; 0xce6 <__stack+0x1e7>
 cde:	8a 2d       	mov	r24, r10
 ce0:	86 78       	andi	r24, 0x86	; 134
 ce2:	09 f0       	breq	.+2      	; 0xce6 <__stack+0x1e7>
 ce4:	b3 94       	inc	r11
 ce6:	a3 fc       	sbrc	r10, 3
 ce8:	11 c0       	rjmp	.+34     	; 0xd0c <__stack+0x20d>
 cea:	a0 fe       	sbrs	r10, 0
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <__stack+0x1fb>
 cee:	b2 14       	cp	r11, r2
 cf0:	88 f4       	brcc	.+34     	; 0xd14 <__stack+0x215>
 cf2:	28 0c       	add	r2, r8
 cf4:	92 2c       	mov	r9, r2
 cf6:	9b 18       	sub	r9, r11
 cf8:	0e c0       	rjmp	.+28     	; 0xd16 <__stack+0x217>
 cfa:	b2 14       	cp	r11, r2
 cfc:	60 f4       	brcc	.+24     	; 0xd16 <__stack+0x217>
 cfe:	b6 01       	movw	r22, r12
 d00:	80 e2       	ldi	r24, 0x20	; 32
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d08:	b3 94       	inc	r11
 d0a:	f7 cf       	rjmp	.-18     	; 0xcfa <__stack+0x1fb>
 d0c:	b2 14       	cp	r11, r2
 d0e:	18 f4       	brcc	.+6      	; 0xd16 <__stack+0x217>
 d10:	2b 18       	sub	r2, r11
 d12:	02 c0       	rjmp	.+4      	; 0xd18 <__stack+0x219>
 d14:	98 2c       	mov	r9, r8
 d16:	21 2c       	mov	r2, r1
 d18:	a4 fe       	sbrs	r10, 4
 d1a:	10 c0       	rjmp	.+32     	; 0xd3c <__stack+0x23d>
 d1c:	b6 01       	movw	r22, r12
 d1e:	80 e3       	ldi	r24, 0x30	; 48
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d26:	a2 fe       	sbrs	r10, 2
 d28:	17 c0       	rjmp	.+46     	; 0xd58 <__stack+0x259>
 d2a:	a1 fc       	sbrc	r10, 1
 d2c:	03 c0       	rjmp	.+6      	; 0xd34 <__stack+0x235>
 d2e:	88 e7       	ldi	r24, 0x78	; 120
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <__stack+0x239>
 d34:	88 e5       	ldi	r24, 0x58	; 88
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	b6 01       	movw	r22, r12
 d3a:	0c c0       	rjmp	.+24     	; 0xd54 <__stack+0x255>
 d3c:	8a 2d       	mov	r24, r10
 d3e:	86 78       	andi	r24, 0x86	; 134
 d40:	59 f0       	breq	.+22     	; 0xd58 <__stack+0x259>
 d42:	a1 fe       	sbrs	r10, 1
 d44:	02 c0       	rjmp	.+4      	; 0xd4a <__stack+0x24b>
 d46:	8b e2       	ldi	r24, 0x2B	; 43
 d48:	01 c0       	rjmp	.+2      	; 0xd4c <__stack+0x24d>
 d4a:	80 e2       	ldi	r24, 0x20	; 32
 d4c:	a7 fc       	sbrc	r10, 7
 d4e:	8d e2       	ldi	r24, 0x2D	; 45
 d50:	b6 01       	movw	r22, r12
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d58:	89 14       	cp	r8, r9
 d5a:	38 f4       	brcc	.+14     	; 0xd6a <__stack+0x26b>
 d5c:	b6 01       	movw	r22, r12
 d5e:	80 e3       	ldi	r24, 0x30	; 48
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d66:	9a 94       	dec	r9
 d68:	f7 cf       	rjmp	.-18     	; 0xd58 <__stack+0x259>
 d6a:	8a 94       	dec	r8
 d6c:	f3 01       	movw	r30, r6
 d6e:	e8 0d       	add	r30, r8
 d70:	f1 1d       	adc	r31, r1
 d72:	80 81       	ld	r24, Z
 d74:	b6 01       	movw	r22, r12
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d7c:	81 10       	cpse	r8, r1
 d7e:	f5 cf       	rjmp	.-22     	; 0xd6a <__stack+0x26b>
 d80:	22 20       	and	r2, r2
 d82:	09 f4       	brne	.+2      	; 0xd86 <__stack+0x287>
 d84:	42 ce       	rjmp	.-892    	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
 d86:	b6 01       	movw	r22, r12
 d88:	80 e2       	ldi	r24, 0x20	; 32
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <fputc>
 d90:	2a 94       	dec	r2
 d92:	f6 cf       	rjmp	.-20     	; 0xd80 <__stack+0x281>
 d94:	f6 01       	movw	r30, r12
 d96:	86 81       	ldd	r24, Z+6	; 0x06
 d98:	97 81       	ldd	r25, Z+7	; 0x07
 d9a:	02 c0       	rjmp	.+4      	; 0xda0 <__stack+0x2a1>
 d9c:	8f ef       	ldi	r24, 0xFF	; 255
 d9e:	9f ef       	ldi	r25, 0xFF	; 255
 da0:	2b 96       	adiw	r28, 0x0b	; 11
 da2:	e2 e1       	ldi	r30, 0x12	; 18
 da4:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__epilogue_restores__>

00000da8 <strnlen_P>:
 da8:	fc 01       	movw	r30, r24
 daa:	05 90       	lpm	r0, Z+
 dac:	61 50       	subi	r22, 0x01	; 1
 dae:	70 40       	sbci	r23, 0x00	; 0
 db0:	01 10       	cpse	r0, r1
 db2:	d8 f7       	brcc	.-10     	; 0xdaa <strnlen_P+0x2>
 db4:	80 95       	com	r24
 db6:	90 95       	com	r25
 db8:	8e 0f       	add	r24, r30
 dba:	9f 1f       	adc	r25, r31
 dbc:	08 95       	ret

00000dbe <strnlen>:
 dbe:	fc 01       	movw	r30, r24
 dc0:	61 50       	subi	r22, 0x01	; 1
 dc2:	70 40       	sbci	r23, 0x00	; 0
 dc4:	01 90       	ld	r0, Z+
 dc6:	01 10       	cpse	r0, r1
 dc8:	d8 f7       	brcc	.-10     	; 0xdc0 <strnlen+0x2>
 dca:	80 95       	com	r24
 dcc:	90 95       	com	r25
 dce:	8e 0f       	add	r24, r30
 dd0:	9f 1f       	adc	r25, r31
 dd2:	08 95       	ret

00000dd4 <fputc>:
 dd4:	0f 93       	push	r16
 dd6:	1f 93       	push	r17
 dd8:	cf 93       	push	r28
 dda:	df 93       	push	r29
 ddc:	fb 01       	movw	r30, r22
 dde:	23 81       	ldd	r18, Z+3	; 0x03
 de0:	21 fd       	sbrc	r18, 1
 de2:	03 c0       	rjmp	.+6      	; 0xdea <fputc+0x16>
 de4:	8f ef       	ldi	r24, 0xFF	; 255
 de6:	9f ef       	ldi	r25, 0xFF	; 255
 de8:	2c c0       	rjmp	.+88     	; 0xe42 <fputc+0x6e>
 dea:	22 ff       	sbrs	r18, 2
 dec:	16 c0       	rjmp	.+44     	; 0xe1a <fputc+0x46>
 dee:	46 81       	ldd	r20, Z+6	; 0x06
 df0:	57 81       	ldd	r21, Z+7	; 0x07
 df2:	24 81       	ldd	r18, Z+4	; 0x04
 df4:	35 81       	ldd	r19, Z+5	; 0x05
 df6:	42 17       	cp	r20, r18
 df8:	53 07       	cpc	r21, r19
 dfa:	44 f4       	brge	.+16     	; 0xe0c <fputc+0x38>
 dfc:	a0 81       	ld	r26, Z
 dfe:	b1 81       	ldd	r27, Z+1	; 0x01
 e00:	9d 01       	movw	r18, r26
 e02:	2f 5f       	subi	r18, 0xFF	; 255
 e04:	3f 4f       	sbci	r19, 0xFF	; 255
 e06:	31 83       	std	Z+1, r19	; 0x01
 e08:	20 83       	st	Z, r18
 e0a:	8c 93       	st	X, r24
 e0c:	26 81       	ldd	r18, Z+6	; 0x06
 e0e:	37 81       	ldd	r19, Z+7	; 0x07
 e10:	2f 5f       	subi	r18, 0xFF	; 255
 e12:	3f 4f       	sbci	r19, 0xFF	; 255
 e14:	37 83       	std	Z+7, r19	; 0x07
 e16:	26 83       	std	Z+6, r18	; 0x06
 e18:	14 c0       	rjmp	.+40     	; 0xe42 <fputc+0x6e>
 e1a:	8b 01       	movw	r16, r22
 e1c:	ec 01       	movw	r28, r24
 e1e:	fb 01       	movw	r30, r22
 e20:	00 84       	ldd	r0, Z+8	; 0x08
 e22:	f1 85       	ldd	r31, Z+9	; 0x09
 e24:	e0 2d       	mov	r30, r0
 e26:	09 95       	icall
 e28:	89 2b       	or	r24, r25
 e2a:	e1 f6       	brne	.-72     	; 0xde4 <fputc+0x10>
 e2c:	d8 01       	movw	r26, r16
 e2e:	16 96       	adiw	r26, 0x06	; 6
 e30:	8d 91       	ld	r24, X+
 e32:	9c 91       	ld	r25, X
 e34:	17 97       	sbiw	r26, 0x07	; 7
 e36:	01 96       	adiw	r24, 0x01	; 1
 e38:	17 96       	adiw	r26, 0x07	; 7
 e3a:	9c 93       	st	X, r25
 e3c:	8e 93       	st	-X, r24
 e3e:	16 97       	sbiw	r26, 0x06	; 6
 e40:	ce 01       	movw	r24, r28
 e42:	df 91       	pop	r29
 e44:	cf 91       	pop	r28
 e46:	1f 91       	pop	r17
 e48:	0f 91       	pop	r16
 e4a:	08 95       	ret

00000e4c <__ultoa_invert>:
 e4c:	fa 01       	movw	r30, r20
 e4e:	aa 27       	eor	r26, r26
 e50:	28 30       	cpi	r18, 0x08	; 8
 e52:	51 f1       	breq	.+84     	; 0xea8 <__ultoa_invert+0x5c>
 e54:	20 31       	cpi	r18, 0x10	; 16
 e56:	81 f1       	breq	.+96     	; 0xeb8 <__ultoa_invert+0x6c>
 e58:	e8 94       	clt
 e5a:	6f 93       	push	r22
 e5c:	6e 7f       	andi	r22, 0xFE	; 254
 e5e:	6e 5f       	subi	r22, 0xFE	; 254
 e60:	7f 4f       	sbci	r23, 0xFF	; 255
 e62:	8f 4f       	sbci	r24, 0xFF	; 255
 e64:	9f 4f       	sbci	r25, 0xFF	; 255
 e66:	af 4f       	sbci	r26, 0xFF	; 255
 e68:	b1 e0       	ldi	r27, 0x01	; 1
 e6a:	3e d0       	rcall	.+124    	; 0xee8 <__ultoa_invert+0x9c>
 e6c:	b4 e0       	ldi	r27, 0x04	; 4
 e6e:	3c d0       	rcall	.+120    	; 0xee8 <__ultoa_invert+0x9c>
 e70:	67 0f       	add	r22, r23
 e72:	78 1f       	adc	r23, r24
 e74:	89 1f       	adc	r24, r25
 e76:	9a 1f       	adc	r25, r26
 e78:	a1 1d       	adc	r26, r1
 e7a:	68 0f       	add	r22, r24
 e7c:	79 1f       	adc	r23, r25
 e7e:	8a 1f       	adc	r24, r26
 e80:	91 1d       	adc	r25, r1
 e82:	a1 1d       	adc	r26, r1
 e84:	6a 0f       	add	r22, r26
 e86:	71 1d       	adc	r23, r1
 e88:	81 1d       	adc	r24, r1
 e8a:	91 1d       	adc	r25, r1
 e8c:	a1 1d       	adc	r26, r1
 e8e:	20 d0       	rcall	.+64     	; 0xed0 <__ultoa_invert+0x84>
 e90:	09 f4       	brne	.+2      	; 0xe94 <__ultoa_invert+0x48>
 e92:	68 94       	set
 e94:	3f 91       	pop	r19
 e96:	2a e0       	ldi	r18, 0x0A	; 10
 e98:	26 9f       	mul	r18, r22
 e9a:	11 24       	eor	r1, r1
 e9c:	30 19       	sub	r19, r0
 e9e:	30 5d       	subi	r19, 0xD0	; 208
 ea0:	31 93       	st	Z+, r19
 ea2:	de f6       	brtc	.-74     	; 0xe5a <__ultoa_invert+0xe>
 ea4:	cf 01       	movw	r24, r30
 ea6:	08 95       	ret
 ea8:	46 2f       	mov	r20, r22
 eaa:	47 70       	andi	r20, 0x07	; 7
 eac:	40 5d       	subi	r20, 0xD0	; 208
 eae:	41 93       	st	Z+, r20
 eb0:	b3 e0       	ldi	r27, 0x03	; 3
 eb2:	0f d0       	rcall	.+30     	; 0xed2 <__ultoa_invert+0x86>
 eb4:	c9 f7       	brne	.-14     	; 0xea8 <__ultoa_invert+0x5c>
 eb6:	f6 cf       	rjmp	.-20     	; 0xea4 <__ultoa_invert+0x58>
 eb8:	46 2f       	mov	r20, r22
 eba:	4f 70       	andi	r20, 0x0F	; 15
 ebc:	40 5d       	subi	r20, 0xD0	; 208
 ebe:	4a 33       	cpi	r20, 0x3A	; 58
 ec0:	18 f0       	brcs	.+6      	; 0xec8 <__ultoa_invert+0x7c>
 ec2:	49 5d       	subi	r20, 0xD9	; 217
 ec4:	31 fd       	sbrc	r19, 1
 ec6:	40 52       	subi	r20, 0x20	; 32
 ec8:	41 93       	st	Z+, r20
 eca:	02 d0       	rcall	.+4      	; 0xed0 <__ultoa_invert+0x84>
 ecc:	a9 f7       	brne	.-22     	; 0xeb8 <__ultoa_invert+0x6c>
 ece:	ea cf       	rjmp	.-44     	; 0xea4 <__ultoa_invert+0x58>
 ed0:	b4 e0       	ldi	r27, 0x04	; 4
 ed2:	a6 95       	lsr	r26
 ed4:	97 95       	ror	r25
 ed6:	87 95       	ror	r24
 ed8:	77 95       	ror	r23
 eda:	67 95       	ror	r22
 edc:	ba 95       	dec	r27
 ede:	c9 f7       	brne	.-14     	; 0xed2 <__ultoa_invert+0x86>
 ee0:	00 97       	sbiw	r24, 0x00	; 0
 ee2:	61 05       	cpc	r22, r1
 ee4:	71 05       	cpc	r23, r1
 ee6:	08 95       	ret
 ee8:	9b 01       	movw	r18, r22
 eea:	ac 01       	movw	r20, r24
 eec:	0a 2e       	mov	r0, r26
 eee:	06 94       	lsr	r0
 ef0:	57 95       	ror	r21
 ef2:	47 95       	ror	r20
 ef4:	37 95       	ror	r19
 ef6:	27 95       	ror	r18
 ef8:	ba 95       	dec	r27
 efa:	c9 f7       	brne	.-14     	; 0xeee <__ultoa_invert+0xa2>
 efc:	62 0f       	add	r22, r18
 efe:	73 1f       	adc	r23, r19
 f00:	84 1f       	adc	r24, r20
 f02:	95 1f       	adc	r25, r21
 f04:	a0 1d       	adc	r26, r0
 f06:	08 95       	ret

00000f08 <__prologue_saves__>:
 f08:	2f 92       	push	r2
 f0a:	3f 92       	push	r3
 f0c:	4f 92       	push	r4
 f0e:	5f 92       	push	r5
 f10:	6f 92       	push	r6
 f12:	7f 92       	push	r7
 f14:	8f 92       	push	r8
 f16:	9f 92       	push	r9
 f18:	af 92       	push	r10
 f1a:	bf 92       	push	r11
 f1c:	cf 92       	push	r12
 f1e:	df 92       	push	r13
 f20:	ef 92       	push	r14
 f22:	ff 92       	push	r15
 f24:	0f 93       	push	r16
 f26:	1f 93       	push	r17
 f28:	cf 93       	push	r28
 f2a:	df 93       	push	r29
 f2c:	cd b7       	in	r28, 0x3d	; 61
 f2e:	de b7       	in	r29, 0x3e	; 62
 f30:	ca 1b       	sub	r28, r26
 f32:	db 0b       	sbc	r29, r27
 f34:	0f b6       	in	r0, 0x3f	; 63
 f36:	f8 94       	cli
 f38:	de bf       	out	0x3e, r29	; 62
 f3a:	0f be       	out	0x3f, r0	; 63
 f3c:	cd bf       	out	0x3d, r28	; 61
 f3e:	09 94       	ijmp

00000f40 <__epilogue_restores__>:
 f40:	2a 88       	ldd	r2, Y+18	; 0x12
 f42:	39 88       	ldd	r3, Y+17	; 0x11
 f44:	48 88       	ldd	r4, Y+16	; 0x10
 f46:	5f 84       	ldd	r5, Y+15	; 0x0f
 f48:	6e 84       	ldd	r6, Y+14	; 0x0e
 f4a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f4c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f4e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f50:	aa 84       	ldd	r10, Y+10	; 0x0a
 f52:	b9 84       	ldd	r11, Y+9	; 0x09
 f54:	c8 84       	ldd	r12, Y+8	; 0x08
 f56:	df 80       	ldd	r13, Y+7	; 0x07
 f58:	ee 80       	ldd	r14, Y+6	; 0x06
 f5a:	fd 80       	ldd	r15, Y+5	; 0x05
 f5c:	0c 81       	ldd	r16, Y+4	; 0x04
 f5e:	1b 81       	ldd	r17, Y+3	; 0x03
 f60:	aa 81       	ldd	r26, Y+2	; 0x02
 f62:	b9 81       	ldd	r27, Y+1	; 0x01
 f64:	ce 0f       	add	r28, r30
 f66:	d1 1d       	adc	r29, r1
 f68:	0f b6       	in	r0, 0x3f	; 63
 f6a:	f8 94       	cli
 f6c:	de bf       	out	0x3e, r29	; 62
 f6e:	0f be       	out	0x3f, r0	; 63
 f70:	cd bf       	out	0x3d, r28	; 61
 f72:	ed 01       	movw	r28, r26
 f74:	08 95       	ret

00000f76 <_exit>:
 f76:	f8 94       	cli

00000f78 <__stop_program>:
 f78:	ff cf       	rjmp	.-2      	; 0xf78 <__stop_program>
